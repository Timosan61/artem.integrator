#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏ –∞–≥–µ–Ω—Ç–æ–≤
"""

import asyncio
import sys
import os
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from bot.core.interfaces import Message, User, MessageType, UserRole
from bot.core.unified_agent import unified_agent

async def test_agent_routing():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—é –º–µ–∂–¥—É –∞–≥–µ–Ω—Ç–∞–º–∏"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏ –∞–≥–µ–Ω—Ç–æ–≤\n")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    admin_user = User(
        id=12345,  # –ü–µ—Ä–≤—ã–π –∞–¥–º–∏–Ω
        username="admin",
        first_name="Admin",
        last_name="User",
        role=UserRole.ADMIN
    )
    
    regular_user = User(
        id=67890,
        username="user",
        first_name="Regular",
        last_name="User", 
        role=UserRole.USER
    )
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏
    test_cases = [
        {
            "name": "–ê–¥–º–∏–Ω –ø–∏—à–µ—Ç MCP –∫–æ–º–∞–Ω–¥—É",
            "user": admin_user,
            "text": "/mcp apps",
            "is_business": False,
            "expected_agent": "IntelligentAgent"
        },
        {
            "name": "–ê–¥–º–∏–Ω –ø–∏—à–µ—Ç –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
            "user": admin_user,
            "text": "–ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ –¥–µ–ª–∞?",
            "is_business": False,
            "expected_agent": "DefaultAgent"
        },
        {
            "name": "Business —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∞",
            "user": admin_user,
            "text": "–ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ –±–∏–∑–Ω–µ—Å —Å–æ–æ–±—â–µ–Ω–∏–µ",
            "is_business": True,
            "expected_agent": "DefaultAgent"
        },
        {
            "name": "–û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
            "user": regular_user,
            "text": "–ü—Ä–∏–≤–µ—Ç, —Ä–∞—Å—Å–∫–∞–∂–∏ –æ —Å–≤–æ–∏—Ö —É—Å–ª—É–≥–∞—Ö",
            "is_business": False,
            "expected_agent": "DefaultAgent"
        }
    ]
    
    for i, case in enumerate(test_cases, 1):
        print(f"üìã –¢–µ—Å—Ç {i}: {case['name']}")
        print(f"   üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {case['user'].username} (—Ä–æ–ª—å: {case['user'].role.value})")
        print(f"   üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: {case['text']}")
        print(f"   üì± Business: {case['is_business']}")
        
        # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = Message(
            id=i,
            user=case['user'],
            chat_id=123456,
            text=case['text'],
            type=MessageType.TEXT,
            timestamp=datetime.now(),
            is_business_message=case['is_business']
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –∞–≥–µ–Ω—Ç –ø–æ –æ—Ç–¥–µ–ª—å–Ω–æ—Å—Ç–∏
        print(f"   üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≥–µ–Ω—Ç–æ–≤:")
        for agent in unified_agent.chain.agents:
            can_handle = await agent.can_handle(message)
            print(f"     - {agent.get_name()}: {can_handle}")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–æ–π –∞–≥–µ–Ω—Ç –±—É–¥–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å
        handling_agent = await unified_agent.get_agent_for_message(message)
        
        print(f"   ü§ñ –ë—É–¥–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å: {handling_agent}")
        print(f"   ‚úÖ –û–∂–∏–¥–∞–µ–º—ã–π –∞–≥–µ–Ω—Ç: {case['expected_agent']}")
        
        if handling_agent == case['expected_agent']:
            print("   ‚úÖ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù")
        else:
            print("   ‚ùå –¢–ï–°–¢ –ù–ï –ü–†–û–ô–î–ï–ù")
        
        print()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
    print("üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã –∞–≥–µ–Ω—Ç–æ–≤:")
    status = unified_agent.get_status()
    for agent_name, agent_status in status.items():
        if isinstance(agent_status, dict):
            print(f"   {agent_name}: {agent_status}")
        else:
            print(f"   {agent_name}: {agent_status}")

if __name__ == "__main__":
    asyncio.run(test_agent_routing())