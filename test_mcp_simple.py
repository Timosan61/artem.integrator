#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç MCP —á–µ—Ä–µ–∑ webhook
"""

import asyncio
import aiohttp
import json
from datetime import datetime

async def test_mcp_webhook():
    """–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç MCP –∫–æ–º–∞–Ω–¥ —á–µ—Ä–µ–∑ webhook"""
    
    print("\nüîç –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç MCP —á–µ—Ä–µ–∑ webhook")
    print("=" * 60)
    
    webhook_url = "http://localhost:8000/webhook"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get("http://localhost:8000/") as resp:
                if resp.status == 200:
                    status = await resp.json()
                    print(f"‚úÖ Webhook –¥–æ—Å—Ç—É–ø–µ–Ω: {status}")
                else:
                    print("‚ùå Webhook –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")
                    return
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        return
    
    # –¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞
    update = {
        "update_id": 10000,
        "message": {
            "message_id": 1000,
            "from": {
                "id": 229838448,
                "is_bot": False,
                "first_name": "Admin",
                "username": "admin"
            },
            "chat": {
                "id": 229838448,
                "type": "private"
            },
            "date": int(datetime.now().timestamp()),
            "text": "/mcp status"
        }
    }
    
    headers = {
        "Content-Type": "application/json",
        "X-Telegram-Bot-Api-Secret-Token": "test-secret"
    }
    
    print(f"\nüìÆ –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã: /mcp status")
    
    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(webhook_url, json=update, headers=headers) as resp:
                print(f"üì¨ –°—Ç–∞—Ç—É—Å: {resp.status}")
                
                if resp.status == 200:
                    result = await resp.json()
                    print(f"‚úÖ –û—Ç–≤–µ—Ç: {json.dumps(result, indent=2, ensure_ascii=False)}")
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞: {await resp.text()}")
                    
    except Exception as e:
        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
    
    print("\n" + "=" * 60)

if __name__ == "__main__":
    asyncio.run(test_mcp_webhook())