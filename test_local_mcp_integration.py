#!/usr/bin/env python3
"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –ª–æ–∫–∞–ª—å–Ω—ã—Ö MCP —Å–µ—Ä–≤–µ—Ä–æ–≤ —á–µ—Ä–µ–∑ –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª
Telegram -> Claude Code SDK -> MCP DigitalOcean -> Telegram
"""

import asyncio
import json
import logging
import os
import sys
import aiohttp
from pathlib import Path
from datetime import datetime
from typing import Dict, Any

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log_file = f'mcp_integration_{datetime.now().strftime("%Y%m%d_%H%M%S")}.log'
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout),
        logging.FileHandler(log_file)
    ]
)
logger = logging.getLogger(__name__)

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ bot –º–æ–¥—É–ª—é
sys.path.insert(0, str(Path(__file__).parent))

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
from dotenv import load_dotenv
load_dotenv()

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥—É–ª–∏
from bot.services.claude_code_service import ClaudeCodeService, CLAUDE_CODE_SDK_AVAILABLE
from bot.core.config import config


class MCPIntegrationTester:
    """–¢–µ—Å—Ç–µ—Ä –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ MCP –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
    
    def __init__(self):
        self.webhook_url = "http://localhost:8000/webhook"
        self.admin_id = int(os.getenv("ADMIN_TELEGRAM_ID", "229838448"))
        self.secret_token = os.getenv("TELEGRAM_WEBHOOK_SECRET", "test-secret")
        self.bot_token = os.getenv("TELEGRAM_BOT_TOKEN", "")
        
    async def send_telegram_update(self, text: str, chat_id: int = None) -> Dict[str, Any]:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ webhook –∫–∞–∫ –æ—Ç Telegram"""
        if chat_id is None:
            chat_id = self.admin_id
            
        update = {
            "update_id": 10000,
            "message": {
                "message_id": 1000,
                "from": {
                    "id": chat_id,
                    "is_bot": False,
                    "first_name": "Test",
                    "username": "testuser"
                },
                "chat": {
                    "id": chat_id,
                    "type": "private"
                },
                "date": int(datetime.now().timestamp()),
                "text": text
            }
        }
        
        headers = {
            "Content-Type": "application/json",
            "X-Telegram-Bot-Api-Secret-Token": self.secret_token
        }
        
        async with aiohttp.ClientSession() as session:
            try:
                async with session.post(
                    self.webhook_url,
                    json=update,
                    headers=headers
                ) as response:
                    return {
                        "status": response.status,
                        "response": await response.json() if response.status == 200 else await response.text()
                    }
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ webhook: {e}")
                return {"status": 0, "error": str(e)}
    
    async def test_direct_mcp_call(self):
        """–ü—Ä—è–º–æ–π —Ç–µ—Å—Ç –≤—ã–∑–æ–≤–∞ MCP —á–µ—Ä–µ–∑ Claude Code Service"""
        print("\n" + "="*60)
        print("üß™ –¢–ï–°–¢ 1: –ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤ MCP —á–µ—Ä–µ–∑ Claude Code Service")
        print("="*60)
        
        if not CLAUDE_CODE_SDK_AVAILABLE:
            print("‚ùå Claude Code SDK –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω!")
            return
            
        service = ClaudeCodeService()
        if not service.enabled:
            print("‚ùå Claude Code Service –æ—Ç–∫–ª—é—á–µ–Ω!")
            return
            
        # –¢–µ—Å—Ç–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã
        test_commands = [
            {
                "cmd": "/mcp status",
                "desc": "–°—Ç–∞—Ç—É—Å MCP —Å–µ—Ä–≤–µ—Ä–æ–≤"
            },
            {
                "cmd": "/mcp apps",
                "desc": "–°–ø–∏—Å–æ–∫ DigitalOcean –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π"
            },
            {
                "cmd": "/docs react useState",
                "desc": "–ü–æ–∏—Å–∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ React useState"
            }
        ]
        
        for test in test_commands:
            print(f"\nüìù –ö–æ–º–∞–Ω–¥–∞: {test['cmd']}")
            print(f"üìã –û–ø–∏—Å–∞–Ω–∏–µ: {test['desc']}")
            print("-" * 40)
            
            start_time = asyncio.get_event_loop().time()
            
            try:
                result = await service.execute_mcp_command(test['cmd'])
                duration = asyncio.get_event_loop().time() - start_time
                
                print(f"‚è±Ô∏è –í—Ä–µ–º—è: {duration:.2f} —Å–µ–∫")
                print(f"‚úÖ –£—Å–ø–µ—Ö: {result.get('success', False)}")
                
                if result.get('success'):
                    response = result.get('response', '')
                    print(f"üìÑ –û—Ç–≤–µ—Ç ({len(response)} —Å–∏–º–≤–æ–ª–æ–≤):")
                    print(f"   {response[:200]}..." if len(response) > 200 else f"   {response}")
                    
                    if result.get('data'):
                        print(f"üìä –î–∞–Ω–Ω—ã–µ: {json.dumps(result.get('data'), indent=2)[:200]}...")
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
                    
            except Exception as e:
                logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}", exc_info=True)
                print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
    
    async def test_webhook_mcp_integration(self):
        """–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ —á–µ—Ä–µ–∑ webhook"""
        print("\n" + "="*60)
        print("üß™ –¢–ï–°–¢ 2: –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª —á–µ—Ä–µ–∑ Telegram Webhook")
        print("="*60)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å webhook
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get("http://localhost:8000/") as resp:
                    if resp.status != 200:
                        print("‚ùå Webhook —Å–µ—Ä–≤–µ—Ä –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω!")
                        return
                    print("‚úÖ Webhook —Å–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω")
        except Exception as e:
            print(f"‚ùå –ù–µ –º–æ–≥—É –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ webhook: {e}")
            return
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏
        test_scenarios = [
            {
                "message": "/mcp status",
                "description": "–ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ç—É—Å–∞ MCP"
            },
            {
                "message": "/mcp apps",
                "description": "–°–ø–∏—Å–æ–∫ DigitalOcean –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π"
            },
            {
                "message": "/docs vue composition api",
                "description": "–ü–æ–∏—Å–∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ Vue"
            },
            {
                "message": "–†–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ MCP —Å–µ—Ä–≤–µ—Ä—ã",
                "description": "–û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º MCP"
            }
        ]
        
        for scenario in test_scenarios:
            print(f"\nüìÆ –û—Ç–ø—Ä–∞–≤–∫–∞: {scenario['message']}")
            print(f"üìã –°—Ü–µ–Ω–∞—Ä–∏–π: {scenario['description']}")
            print("-" * 40)
            
            result = await self.send_telegram_update(scenario['message'])
            
            print(f"üì¨ –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {result['status']}")
            
            if result['status'] == 200:
                response = result['response']
                print(f"‚úÖ Webhook –æ–±—Ä–∞–±–æ—Ç–∞–ª –∑–∞–ø—Ä–æ—Å")
                print(f"   –û—Ç–≤–µ—Ç: {json.dumps(response, ensure_ascii=False, indent=2)}")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ webhook: {result.get('error', result.get('response'))}")
            
            # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É
            await asyncio.sleep(2)
    
    async def test_large_json_handling(self):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–æ–ª—å—à–∏—Ö JSON –æ—Ç–≤–µ—Ç–æ–≤"""
        print("\n" + "="*60)
        print("üß™ –¢–ï–°–¢ 3: –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–æ–ª—å—à–∏—Ö JSON –æ—Ç–≤–µ—Ç–æ–≤")
        print("="*60)
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É, –∫–æ—Ç–æ—Ä–∞—è –≤–µ—Ä–Ω–µ—Ç –±–æ–ª—å—à–æ–π –æ—Ç–≤–µ—Ç
        test_command = "/mcp do list_all_resources"
        
        print(f"üìù –ö–æ–º–∞–Ω–¥–∞: {test_command}")
        print("üéØ –¶–µ–ª—å: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –±–æ–ª—å—à–∏—Ö JSON")
        print("-" * 40)
        
        service = ClaudeCodeService()
        
        try:
            # –í–∫–ª—é—á–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
            original_level = logger.level
            logger.setLevel(logging.DEBUG)
            
            result = await service.execute_mcp_command(test_command)
            
            if result.get('success'):
                response = result.get('response', '')
                print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –æ—Ç–≤–µ—Ç —Ä–∞–∑–º–µ—Ä–æ–º {len(response)} —Å–∏–º–≤–æ–ª–æ–≤")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–µ–∑–∞–Ω –∏–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω
                if len(response) > 10000:
                    print("‚ö†Ô∏è –ë–æ–ª—å—à–æ–π –æ—Ç–≤–µ—Ç –±—ã–ª –ø–æ–ª—É—á–µ–Ω –∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞: {result.get('error')}")
                
            logger.setLevel(original_level)
            
        except json.JSONDecodeError as e:
            print(f"‚ùå JSON –æ—à–∏–±–∫–∞ (–æ–∂–∏–¥–∞–µ–º–æ): {e}")
            print("   –ù—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –±–æ–ª—å—à–∏—Ö JSON")
        except Exception as e:
            logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
    
    async def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã"""
        print(f"\nüöÄ –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ MCP")
        print(f"üìÅ –õ–æ–≥-—Ñ–∞–π–ª: {log_file}")
        print(f"üîß SDK –¥–æ—Å—Ç—É–ø–µ–Ω: {CLAUDE_CODE_SDK_AVAILABLE}")
        print(f"üåê Webhook URL: {self.webhook_url}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
        await self.test_direct_mcp_call()
        await self.test_webhook_mcp_integration()
        await self.test_large_json_handling()
        
        print("\n" + "="*60)
        print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã")
        print(f"üìã –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥-—Ñ–∞–π–ª –¥–ª—è –¥–µ—Ç–∞–ª–µ–π: {log_file}")
        print("="*60)


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    tester = MCPIntegrationTester()
    await tester.run_all_tests()


if __name__ == "__main__":
    asyncio.run(main())