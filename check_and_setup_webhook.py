#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook —Å Business API –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π
"""

import sys
import os
import asyncio
import json
from typing import Dict, Any

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

try:
    from bot.webhook.services import WebhookService
    from bot.core.config import config
    from bot.telegram_bot import bot
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    print("–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
    sys.exit(1)

def print_colored(text: str, color: str = "white"):
    """–ü–µ—á–∞—Ç—å —Å —Ü–≤–µ—Ç–∞–º–∏"""
    colors = {
        "red": "\033[0;31m",
        "green": "\033[0;32m", 
        "yellow": "\033[1;33m",
        "blue": "\033[0;34m",
        "white": "\033[0m"
    }
    reset = "\033[0m"
    print(f"{colors.get(color, colors['white'])}{text}{reset}")

async def check_current_webhook():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—Érac–∏—é webhook"""
    print_colored("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ webhook...", "blue")
    
    webhook_service = WebhookService()
    info = await webhook_service.get_webhook_info()
    
    if "error" in info:
        print_colored(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ webhook: {info['error']}", "red")
        return False
    
    print_colored("üìä –¢–µ–∫—É—â–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è webhook:", "blue")
    print(f"   üîó URL: {info.get('webhook_url', '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')}")
    print(f"   üì® –û–∂–∏–¥–∞—é—â–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {info.get('pending_updates', 0)}")
    print(f"   ‚ùå –ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞: {info.get('last_error', '–ù–µ—Ç')}")
    print(f"   üîÑ –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è: {info.get('allowed_updates', '–í—Å–µ')}")
    print(f"   üî¢ –ú–∞–∫—Å–∏–º—É–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: {info.get('max_connections', '–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é')}")
    print()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Business API —Å–æ–±—ã—Ç–∏–π
    allowed_updates = info.get('allowed_updates', [])
    business_events = ['business_message', 'business_connection']
    
    has_business_support = False
    if isinstance(allowed_updates, list):
        has_business_support = all(event in allowed_updates for event in business_events)
    elif allowed_updates == "all" or not allowed_updates:
        has_business_support = True  # –ï—Å–ª–∏ "all", —Ç–æ Business API –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è
    
    if has_business_support:
        print_colored("‚úÖ Business API —Å–æ–±—ã—Ç–∏—è –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è", "green")
    else:
        print_colored("‚ùå Business API —Å–æ–±—ã—Ç–∏—è –ù–ï –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã!", "red")
        missing_events = [event for event in business_events if event not in allowed_updates]
        print(f"   –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Å–æ–±—ã—Ç–∏—è: {missing_events}")
    
    return has_business_support

async def setup_webhook_with_business():
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç webhook —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Business API"""
    print_colored("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook —Å Business API –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π...", "blue")
    
    webhook_service = WebhookService()
    
    # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ Business —Å–æ–±—ã—Ç–∏—è –≤–∫–ª—é—á–µ–Ω—ã
    business_allowed_updates = [
        "message", 
        "callback_query",
        "business_message", 
        "business_connection",
        "edited_business_message",
        "deleted_business_messages"
    ]
    
    print(f"üìã –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è: {business_allowed_updates}")
    
    result = await webhook_service.setup_webhook(
        allowed_updates=business_allowed_updates,
        drop_pending_updates=True  # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    )
    
    if result.get("success"):
        print_colored(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {result.get('webhook_url')}", "green")
        return True
    else:
        print_colored(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook: {result.get('error')}", "red")
        return False

def test_business_message_structure():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É Business —Å–æ–æ–±—â–µ–Ω–∏—è"""
    print_colored("üß™ –¢–µ—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã Business —Å–æ–æ–±—â–µ–Ω–∏—è...", "blue")
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    try:
        from bot.webhook.services import TestService
        test_service = TestService()
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ Business —Å–æ–æ–±—â–µ–Ω–∏–µ
        business_update = test_service.create_test_business_update(
            chat_id=123456,
            text="–¢–µ—Å—Ç–æ–≤–æ–µ Business —Å–æ–æ–±—â–µ–Ω–∏–µ",
            business_connection_id="test_connection_123",
            user_id=987654321
        )
        
        print("üì® –°—Ç—Ä—É–∫—Ç—É—Ä–∞ Business —Å–æ–æ–±—â–µ–Ω–∏—è:")
        print(json.dumps(business_update, indent=2, ensure_ascii=False))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        business_msg = business_update.get("business_message", {})
        required_fields = ["business_connection_id", "from", "chat", "text"]
        
        missing_fields = []
        for field in required_fields:
            if field not in business_msg:
                missing_fields.append(field)
        
        if not missing_fields:
            print_colored("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ Business —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞", "green")
        else:
            print_colored(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è: {missing_fields}", "red")
            
    except Exception as e:
        print_colored(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}", "red")

async def test_send_business_message():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É Business —Å–æ–æ–±—â–µ–Ω–∏—è"""
    print_colored("üì§ –¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ Business —Å–æ–æ–±—â–µ–Ω–∏—è...", "blue")
    
    try:
        from bot.webhook.handlers import send_business_message
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é
        print("üîç –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤...")
        
        # –¢–µ—Å—Ç —Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        result = send_business_message(None, "test", "conn_123")
        if not result.get("success"):
            print_colored("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è chat_id —Ä–∞–±–æ—Ç–∞–µ—Ç", "green")
        else:
            print_colored("‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è chat_id –ù–ï —Ä–∞–±–æ—Ç–∞–µ—Ç", "red")
        
        result = send_business_message(123, "", "conn_123")
        if not result.get("success"):
            print_colored("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è text —Ä–∞–±–æ—Ç–∞–µ—Ç", "green")
        else:
            print_colored("‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è text –ù–ï —Ä–∞–±–æ—Ç–∞–µ—Ç", "red")
        
        result = send_business_message(123, "test", "")
        if not result.get("success"):
            print_colored("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è business_connection_id —Ä–∞–±–æ—Ç–∞–µ—Ç", "green")
        else:
            print_colored("‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è business_connection_id –ù–ï —Ä–∞–±–æ—Ç–∞–µ—Ç", "red")
            
        print_colored("‚úÖ –§—É–Ω–∫—Ü–∏—è send_business_message() –≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ", "green")
        
    except Exception as e:
        print_colored(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è send_business_message: {e}", "red")

async def check_business_connections():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç Business –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
    print_colored("üîó –ü—Ä–æ–≤–µ—Ä–∫–∞ Business –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π...", "blue")
    
    try:
        from bot.webhook.handlers import get_business_connections_info
        
        connections_info = get_business_connections_info()
        
        if connections_info.get("success"):
            count = connections_info.get("connections_count", 0)
            print(f"üìä –ù–∞–π–¥–µ–Ω–æ Business –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π: {count}")
            
            if count > 0:
                print("üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:")
                for conn in connections_info.get("connections", []):
                    user_info = conn.get("user", {})
                    username = user_info.get("username", "Unknown")
                    is_enabled = conn.get("is_enabled", False)
                    status_emoji = "‚úÖ" if is_enabled else "‚ùå"
                    print(f"   {status_emoji} @{username}")
            else:
                print_colored("‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö Business –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π", "yellow")
                print("üí° –î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Business API:")
                print("   1. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å Telegram Premium")
                print("   2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ Settings ‚Üí Business ‚Üí Chatbots")
                print("   3. –ü–æ–¥–∫–ª—é—á–∏—Ç–µ –≤–∞—à–µ–≥–æ –±–æ—Ç–∞")
        else:
            error_details = connections_info.get("details", "Unknown error")
            print_colored(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π: {error_details}", "red")
            
    except Exception as e:
        print_colored(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π: {e}", "red")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print_colored("üöÄ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ Business API webhook", "blue")
    print("=" * 60)
    
    try:
        # –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π webhook
        business_supported = await check_current_webhook()
        
        # –®–∞–≥ 2: –ï—Å–ª–∏ Business API –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è, –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º
        if not business_supported:
            print_colored("üîß Business API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –≤—ã–ø–æ–ª–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É...", "yellow")
            success = await setup_webhook_with_business()
            if not success:
                print_colored("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å webhook", "red")
                return 1
        else:
            print_colored("‚úÖ Business API —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω", "green")
        
        # –®–∞–≥ 3: –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
        test_business_message_structure()
        print()
        
        # –®–∞–≥ 4: –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ—Ç–ø—Ä–∞–≤–∫–∏
        await test_send_business_message()
        print()
        
        # –®–∞–≥ 5: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        await check_business_connections()
        print()
        
        print_colored("üéâ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!", "green")
        print()
        print_colored("üìã –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:", "blue")
        print("1. –ï—Å–ª–∏ –Ω–µ—Ç Business –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π - –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –∏—Ö –≤ Telegram")
        print("2. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞")
        print("3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ DigitalOcean —Å –ø–æ–º–æ—â—å—é ./get_digitalocean_logs.sh")
        print("4. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /business_status –≤ –±–æ—Ç–µ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏")
        
        return 0
        
    except Exception as e:
        print_colored(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", "red")
        import traceback
        traceback.print_exc()
        return 1

if __name__ == "__main__":
    exit_code = asyncio.run(main())
    sys.exit(exit_code)