"""
ü§ñ Artyom Integrator Webhook Server

–û—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ Telegram Business API.
–†–∞–±–æ—Ç–∞–µ—Ç –≤ —Ä–µ–∂–∏–º–µ webhook –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –æ—Ç –∏–º–µ–Ω–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞ –ï–ª–µ–Ω—ã –∏–∑ Textile Pro.

–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
- –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç—É
- –û–±—Ä–∞–±–æ—Ç–∫–∞ Business API —Å–æ–æ–±—â–µ–Ω–∏–π (–æ—Ç –≤–∞—à–µ–≥–æ Premium –∞–∫–∫–∞—É–Ω—Ç–∞)
- AI-powered –æ—Ç–≤–µ—Ç—ã —á–µ—Ä–µ–∑ OpenAI (–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ï–ª–µ–Ω–∞)
- –ü–∞–º—è—Ç—å –¥–∏–∞–ª–æ–≥–æ–≤ —á–µ—Ä–µ–∑ Zep
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
"""

import os
import sys
import logging
import traceback
from datetime import datetime
from fastapi import FastAPI, Request, HTTPException
import telebot
import json
import asyncio
import requests

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π –±–æ—Ç–∞
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

print("üöÄ –ó–∞–≥—Ä—É–∑–∫–∞ Artyom Integrator Webhook Server...")

# –ü—ã—Ç–∞–µ–º—Å—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å AI agent
try:
    import bot
    print("‚úÖ –ú–æ–¥—É–ª—å bot –Ω–∞–π–¥–µ–Ω")
    from bot.agent import agent
    print("‚úÖ AI Agent –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ")
    AI_ENABLED = True
except ImportError as e:
    print(f"‚ö†Ô∏è AI Agent –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
    print(f"üìÅ –¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {os.getcwd()}")
    print(f"üìÅ –§–∞–π–ª—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {os.listdir('.')}")
    if os.path.exists('bot'):
        print(f"üìÅ –§–∞–π–ª—ã –≤ bot/: {os.listdir('bot')}")
    AI_ENABLED = False

# –ü—ã—Ç–∞–µ–º—Å—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å Voice Service
try:
    print(f"üîç –ü–æ–ø—ã—Ç–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ Voice Service...")
    print(f"üìÅ –¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {os.getcwd()}")
    print(f"üìÅ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {os.listdir('.')}")
    print(f"üìÅ –°—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ voice/: {os.path.exists('voice')}")
    if os.path.exists('voice'):
        print(f"üìÅ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ voice/: {os.listdir('voice')}")
    
    from voice import VoiceService
    print("‚úÖ Voice Service –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ")
    VOICE_ENABLED = True
except ImportError as e:
    print(f"‚ö†Ô∏è Voice Service –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω (ImportError): {e}")
    print(f"üìç Python path: {sys.path}")
    VOICE_ENABLED = False
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ Voice Service: {e}")
    print(f"üîç Traceback: {traceback.format_exc()}")
    VOICE_ENABLED = False

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
WEBHOOK_SECRET_TOKEN = os.getenv("WEBHOOK_SECRET_TOKEN", "artyom_integrator_secret_2025")

if not TELEGRAM_BOT_TOKEN:
    raise ValueError("‚ùå TELEGRAM_BOT_TOKEN –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!")

print(f"‚úÖ –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –ø–æ–ª—É—á–µ–Ω: {TELEGRAM_BOT_TOKEN[:20]}...")

# === –°–û–ó–î–ê–ù–ò–ï –°–ò–ù–•–†–û–ù–ù–û–ì–û –ë–û–¢–ê (–ù–ï ASYNC!) ===
bot = telebot.TeleBot(TELEGRAM_BOT_TOKEN)

# === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø VOICE SERVICE ===
voice_service = None
if VOICE_ENABLED:  # –£–±–∏—Ä–∞–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ AI_ENABLED
    try:
        openai_api_key = os.getenv('OPENAI_API_KEY')
        if openai_api_key:
            voice_service = VoiceService(TELEGRAM_BOT_TOKEN, openai_api_key)
            print("‚úÖ Voice Service –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        else:
            print("‚ö†Ô∏è OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω, –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Voice Service: {e}")
        voice_service = None

# === –õ–û–ì–ò–†–û–í–ê–ù–ò–ï ===
import logging.handlers

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
os.makedirs("logs", exist_ok=True)

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ñ–∞–π–ª –∏ –∫–æ–Ω—Å–æ–ª—å
logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)

# –§–æ—Ä–º–∞—Ç –ª–æ–≥–æ–≤
formatter = logging.Formatter(
    '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

# –§–∞–π–ª–æ–≤—ã–π —Ö–µ–Ω–¥–ª–µ—Ä —Å —Ä–æ—Ç–∞—Ü–∏–µ–π
file_handler = logging.handlers.RotatingFileHandler(
    filename="logs/bot.log",
    maxBytes=10*1024*1024,  # 10MB
    backupCount=5,
    encoding='utf-8'
)
file_handler.setFormatter(formatter)
file_handler.setLevel(logging.INFO)

# –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π —Ö–µ–Ω–¥–ª–µ—Ä
console_handler = logging.StreamHandler()
console_handler.setFormatter(formatter)
console_handler.setLevel(logging.INFO)

# –î–æ–±–∞–≤–ª—è–µ–º —Ö–µ–Ω–¥–ª–µ—Ä—ã –∫ –ª–æ–≥–≥–µ—Ä—É
logger.addHandler(file_handler)
logger.addHandler(console_handler)

# –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
logger.info("üöÄ Webhook server started")
logger.info(f"üìÅ Logs directory: {os.path.abspath('logs')}")
logger.info(f"ü§ñ Bot token: {TELEGRAM_BOT_TOKEN[:20]}...")
logger.info(f"üîÑ AI Agent enabled: {AI_ENABLED}")

# === –§–£–ù–ö–¶–ò–Ø –î–õ–Ø BUSINESS API ===
def send_business_message(chat_id, text, business_connection_id):
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ Business API –∏—Å–ø–æ–ª—å–∑—É—è –ø—Ä—è–º–æ–π HTTP –∑–∞–ø—Ä–æ—Å
    (pyTelegramBotAPI –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç business_connection_id)
    """
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    data = {
        "chat_id": chat_id,
        "text": text,
        "business_connection_id": business_connection_id
    }
    
    try:
        response = requests.post(url, json=data, timeout=10)
        result = response.json()
        
        if result.get("ok"):
            logger.info(f"‚úÖ Business API: —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ HTTP API")
            return result.get("result")
        else:
            logger.error(f"‚ùå Business API –æ—à–∏–±–∫–∞: {result}")
            return None
    except Exception as e:
        logger.error(f"‚ùå Business API HTTP –æ—à–∏–±–∫–∞: {e}")
        return None

# === FASTAPI –ü–†–ò–õ–û–ñ–ï–ù–ò–ï ===
app = FastAPI(
    title="ü§ñ Artyom Integrator Bot", 
    description="Webhook-only —Ä–µ–∂–∏–º –¥–ª—è Textile Pro –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞ –ï–ª–µ–Ω—ã"
)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö updates –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
from collections import deque
last_updates = deque(maxlen=10)
update_counter = 0

@app.get("/")
async def health_check():
    """Health check endpoint"""
    try:
        bot_info = bot.get_me()
        return {
            "status": "üü¢ ONLINE", 
            "service": "Artyom Integrator Webhook",
            "bot": f"@{bot_info.username}",
            "bot_id": bot_info.id,
            "mode": "WEBHOOK_ONLY",
            "ai_status": "‚úÖ ENABLED" if AI_ENABLED else "‚ùå DISABLED",
            "voice_status": "‚úÖ ENABLED" if voice_service else "‚ùå DISABLED",
            "openai_configured": bool(os.getenv('OPENAI_API_KEY')),
            "endpoints": {
                "webhook_info": "/webhook/info",
                "set_webhook": "/webhook/set",
                "delete_webhook": "/webhook (DELETE method)"
            },
            "hint": "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /webhook/set –≤ –±—Ä–∞—É–∑–µ—Ä–µ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook"
        }
    except Exception as e:
        return {"status": "üî¥ ERROR", "error": str(e)}

@app.get("/webhook/info")
async def webhook_info():
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ webhook"""
    try:
        info = bot.get_webhook_info()
        return {
            "webhook_url": info.url or "‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω",
            "pending_updates": info.pending_update_count,
            "last_error": info.last_error_message or "‚úÖ –ù–µ—Ç –æ—à–∏–±–æ–∫",
            "has_custom_certificate": info.has_custom_certificate,
            "allowed_updates": info.allowed_updates or ["–≤—Å–µ"]
        }
    except Exception as e:
        return {"error": str(e)}

@app.get("/webhook/set")
async def set_webhook_get():
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook —á–µ—Ä–µ–∑ GET (–¥–ª—è –±—Ä–∞—É–∑–µ—Ä–∞)"""
    return await set_webhook()

@app.post("/webhook/set")
async def set_webhook():
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook"""
    try:
        webhook_url = "https://artyom-integrator-production.up.railway.app/webhook"
        
        result = bot.set_webhook(
            url=webhook_url,
            secret_token=WEBHOOK_SECRET_TOKEN,
            allowed_updates=[
                "message",
                "business_connection", 
                "business_message",
                "edited_business_message",
                "deleted_business_messages"
            ]
        )
        
        if result:
            logger.info(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")
            return {
                "status": "‚úÖ SUCCESS",
                "webhook_url": webhook_url,
                "secret_token": "‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω",
                "allowed_updates": "‚úÖ Business API –≤–∫–ª—é—á–µ–Ω"
            }
        else:
            return {"status": "‚ùå FAILED"}
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook: {e}")
        return {"status": "‚ùå ERROR", "error": str(e)}

@app.delete("/webhook")
async def delete_webhook():
    """–£–¥–∞–ª–µ–Ω–∏–µ webhook"""
    try:
        result = bot.delete_webhook()
        return {"status": "‚úÖ Webhook —É–¥–∞–ª–µ–Ω" if result else "‚ùå –û—à–∏–±–∫–∞"}
    except Exception as e:
        return {"status": "‚ùå ERROR", "error": str(e)}

@app.get("/debug/last-updates")
async def get_last_updates():
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ updates –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"""
    return {
        "total_received": update_counter,
        "last_10_updates": list(last_updates),
        "current_time": datetime.now().isoformat()
    }

@app.get("/debug/zep-status")
async def get_zep_status():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å Zep Memory"""
    zep_info = {
        "zep_api_key_set": bool(os.getenv('ZEP_API_KEY')),
        "zep_api_key_length": len(os.getenv('ZEP_API_KEY', '')) if os.getenv('ZEP_API_KEY') else 0,
        "ai_agent_available": AI_ENABLED,
        "zep_client_initialized": False,
        "memory_mode": "unknown"
    }
    
    if AI_ENABLED:
        try:
            zep_info["zep_client_initialized"] = agent.zep_client is not None
            zep_info["memory_mode"] = "Zep Cloud" if agent.zep_client else "Local Fallback"
            zep_info["local_sessions_count"] = len(agent.user_sessions)
            zep_info["local_session_ids"] = list(agent.user_sessions.keys())
        except Exception as e:
            zep_info["error"] = str(e)
    
    return zep_info

@app.get("/debug/memory/{session_id}")
async def get_session_memory(session_id: str):
    """–ü–æ–ª—É—á–∏—Ç—å –ø–∞–º—è—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å–µ—Å—Å–∏–∏"""
    if not AI_ENABLED:
        return {"error": "AI –Ω–µ –≤–∫–ª—é—á–µ–Ω"}
    
    try:
        memory_info = {
            "session_id": session_id,
            "zep_memory": None,
            "local_memory": None,
            "zep_available": agent.zep_client is not None
        }
        
        # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ Zep
        if agent.zep_client:
            try:
                context = await agent.get_zep_memory_context(session_id)
                messages = await agent.get_zep_recent_messages(session_id)
                memory_info["zep_memory"] = {
                    "context": context,
                    "recent_messages": messages
                }
            except Exception as e:
                memory_info["zep_error"] = str(e)
        
        # –ü–æ–ª—É—á–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –ø–∞–º—è—Ç—å
        if session_id in agent.user_sessions:
            memory_info["local_memory"] = agent.user_sessions[session_id]
        
        return memory_info
        
    except Exception as e:
        return {"error": str(e), "traceback": traceback.format_exc()}

@app.post("/test/business-send")
async def test_business_send(request: Request):
    """–¢–µ—Å—Ç–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ Business API"""
    try:
        data = await request.json()
        chat_id = data.get("chat_id")
        connection_id = data.get("business_connection_id")
        text = data.get("text", "üß™ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ Business API")
        
        if not chat_id:
            return {"error": "chat_id –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω"}
        
        if connection_id:
            result = send_business_message(chat_id, text, connection_id)
            if result:
                return {"status": "‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ Business API", "connection_id": connection_id, "result": result}
            else:
                return {"status": "‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ Business API"}
        else:
            bot.send_message(chat_id, text)
            return {"status": "‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"}
            
    except Exception as e:
        return {"error": str(e), "traceback": traceback.format_exc()}

@app.get("/debug/recent-logs")
async def get_recent_logs():
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏ –∏–∑ —Ñ–∞–π–ª–∞ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    try:
        log_data = {
            "log_file_exists": os.path.exists("logs/bot.log"),
            "log_file_size": 0,
            "recent_logs": [],
            "error": None
        }
        
        if os.path.exists("logs/bot.log"):
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
            log_data["log_file_size"] = os.path.getsize("logs/bot.log")
            
            # –ß–∏—Ç–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 —Å—Ç—Ä–æ–∫
            with open("logs/bot.log", "r", encoding="utf-8") as f:
                lines = f.readlines()
                log_data["recent_logs"] = [line.strip() for line in lines[-50:]]
                log_data["total_lines"] = len(lines)
        else:
            log_data["error"] = "–§–∞–π–ª –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω"
        
        return log_data
        
    except Exception as e:
        return {
            "error": str(e), 
            "traceback": traceback.format_exc(),
            "log_file_exists": False,
            "recent_logs": []
        }

@app.get("/debug/voice-status")
async def get_voice_status():
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å Voice Service –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    try:
        voice_status = {
            "VOICE_ENABLED": VOICE_ENABLED,
            "AI_ENABLED": AI_ENABLED,
            "voice_service_initialized": voice_service is not None,
            "voice_service_type": str(type(voice_service)),
            "openai_api_key_set": bool(os.getenv('OPENAI_API_KEY')),
            "openai_api_key_length": len(os.getenv('OPENAI_API_KEY', '')),
            "telegram_token_set": bool(os.getenv('TELEGRAM_BOT_TOKEN')),
            "current_time": datetime.now().isoformat()
        }
        
        if voice_service:
            try:
                voice_status["service_info"] = voice_service.get_service_info()
            except Exception as e:
                voice_status["service_info_error"] = str(e)
        
        # –¢–µ—Å—Ç has_attachments —Å –≥–æ–ª–æ—Å–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        test_voice_msg = {
            "voice": {
                "duration": 3,
                "file_id": "test_voice_id",
                "file_size": 15234
            }
        }
        
        attachments, attachments_details = has_attachments(test_voice_msg)
        voice_status["test_attachments"] = attachments
        voice_status["test_details"] = attachments_details
        voice_status["test_condition"] = 'voice' in attachments and voice_service is not None
        
        return voice_status
        
    except Exception as e:
        return {"error": str(e), "traceback": traceback.format_exc()}

@app.get("/debug/prompt")
async def get_prompt_status():
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–º–ø—Ç –∏ —Å—Ç–∞—Ç—É—Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π"""
    if not AI_ENABLED:
        return {"error": "AI –Ω–µ –≤–∫–ª—é—á–µ–Ω"}
    
    try:
        prompt_info = {
            "instruction_file": agent.instruction,
            "last_updated": agent.instruction.get('last_updated', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'),
            "system_instruction_length": len(agent.instruction.get('system_instruction', '')),
            "welcome_message_length": len(agent.instruction.get('welcome_message', '')),
            "current_time": datetime.now().isoformat(),
            "status": "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω"
        }
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤ —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
        system_instruction = agent.instruction.get('system_instruction', '')
        if system_instruction:
            prompt_info["system_instruction_preview"] = system_instruction[:200] + "..." if len(system_instruction) > 200 else system_instruction
        
        return prompt_info
        
    except Exception as e:
        return {"error": str(e), "traceback": traceback.format_exc()}

@app.post("/admin/reload-prompt")
async def reload_prompt():
    """–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ–º–ø—Ç –∏–∑ —Ñ–∞–π–ª–∞ (–¥–ª—è –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏)"""
    if not AI_ENABLED:
        return {"error": "AI –Ω–µ –≤–∫–ª—é—á–µ–Ω"}
    
    try:
        old_updated = agent.instruction.get('last_updated', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        agent.reload_instruction()
        new_updated = agent.instruction.get('last_updated', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        
        return {
            "status": "‚úÖ –ü—Ä–æ–º–ø—Ç –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω",
            "old_updated": old_updated,
            "new_updated": new_updated,
            "changed": old_updated != new_updated,
            "current_time": datetime.now().isoformat()
        }
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–º–ø—Ç–∞: {e}")
        return {"error": str(e), "traceback": traceback.format_exc()}

def has_attachments(message):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –≤–ª–æ–∂–µ–Ω–∏–π –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –∏—Ö –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ"""
    attachment_types = [
        'photo', 'document', 'video', 'audio', 'voice', 'video_note',
        'sticker', 'animation', 'contact', 'location', 'venue', 'poll'
    ]
    
    attachments_found = []
    attachments_details = []
    
    for attachment_type in attachment_types:
        if attachment_type in message:
            attachments_found.append(attachment_type)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–ª–æ–∂–µ–Ω–∏–∏
            attachment_data = message[attachment_type]
            detail = {"type": attachment_type}
            
            # –î–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –≤–ª–æ–∂–µ–Ω–∏–π –∏–∑–≤–ª–µ–∫–∞–µ–º —Ä–∞–∑–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            if attachment_type == 'photo':
                # –§–æ—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–∞—Å—Å–∏–≤–æ–º —Ä–∞–∑–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤
                if isinstance(attachment_data, list) and len(attachment_data) > 0:
                    largest_photo = max(attachment_data, key=lambda x: x.get('file_size', 0))
                    detail.update({
                        "file_id": largest_photo.get('file_id'),
                        "file_size": largest_photo.get('file_size'),
                        "width": largest_photo.get('width'),
                        "height": largest_photo.get('height')
                    })
            elif attachment_type == 'document':
                detail.update({
                    "file_id": attachment_data.get('file_id'),
                    "file_name": attachment_data.get('file_name'),
                    "file_size": attachment_data.get('file_size'),
                    "mime_type": attachment_data.get('mime_type')
                })
            elif attachment_type in ['video', 'audio', 'voice', 'video_note']:
                detail.update({
                    "file_id": attachment_data.get('file_id'),
                    "file_size": attachment_data.get('file_size'),
                    "duration": attachment_data.get('duration')
                })
                if attachment_type == 'video':
                    detail.update({
                        "width": attachment_data.get('width'),
                        "height": attachment_data.get('height')
                    })
            elif attachment_type == 'sticker':
                detail.update({
                    "file_id": attachment_data.get('file_id'),
                    "width": attachment_data.get('width'),
                    "height": attachment_data.get('height'),
                    "emoji": attachment_data.get('emoji')
                })
            elif attachment_type == 'contact':
                detail.update({
                    "phone_number": attachment_data.get('phone_number'),
                    "first_name": attachment_data.get('first_name'),
                    "last_name": attachment_data.get('last_name')
                })
            elif attachment_type == 'location':
                detail.update({
                    "latitude": attachment_data.get('latitude'),
                    "longitude": attachment_data.get('longitude')
                })
            else:
                # –î–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ –ø—Ä–æ—Å—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º file_id –µ—Å–ª–∏ –µ—Å—Ç—å
                if hasattr(attachment_data, 'get') and attachment_data.get('file_id'):
                    detail["file_id"] = attachment_data.get('file_id')
            
            attachments_details.append(detail)
    
    return attachments_found, attachments_details

@app.post("/webhook")
async def process_webhook(request: Request):
    """–ì–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ webhook"""
    global update_counter
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º secret token –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        secret_token = request.headers.get("X-Telegram-Bot-Api-Secret-Token")
        if secret_token != WEBHOOK_SECRET_TOKEN:
            logger.warning(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π secret token: {secret_token}")
            return {"ok": False, "error": "Invalid secret token"}
        
        json_data = await request.body()
        json_string = json_data.decode('utf-8')
        
        logger.info(f"üì® Webhook –ø–æ–ª—É—á–µ–Ω: {json_string[:150]}...")
        print(f"üì® –û–±—Ä–∞–±–æ—Ç–∫–∞ webhook update...")
        
        update_dict = json.loads(json_string)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º update –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        update_counter += 1
        debug_update = {
            "id": update_counter,
            "timestamp": datetime.now().isoformat(),
            "type": "unknown",
            "data": update_dict
        }
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø update
        if "message" in update_dict:
            debug_update["type"] = "message"
        elif "business_message" in update_dict:
            debug_update["type"] = "business_message"
        elif "business_connection" in update_dict:
            debug_update["type"] = "business_connection"
        elif "edited_business_message" in update_dict:
            debug_update["type"] = "edited_business_message"
        elif "deleted_business_messages" in update_dict:
            debug_update["type"] = "deleted_business_messages"
        else:
            debug_update["type"] = f"other: {list(update_dict.keys())}"
            
        last_updates.append(debug_update)
        logger.info(f"üìä Update #{update_counter} —Ç–∏–ø: {debug_update['type']}")
        
        # === –û–ë–´–ß–ù–´–ï –°–û–û–ë–©–ï–ù–ò–Ø ===
        if "message" in update_dict:
            msg = update_dict["message"]
            chat_id = msg["chat"]["id"]
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ text –∏–ª–∏ caption (–¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤)
            text = msg.get("text", "") or msg.get("caption", "")
            user_id = msg.get("from", {}).get("id", "unknown")
            user_name = msg.get("from", {}).get("first_name", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
            
            # –î–ï–¢–ê–õ–¨–ù–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –°–û–û–ë–©–ï–ù–ò–Ø
            print(f"\n=== MESSAGE PROCESSING START ===")
            print(f"üì® USER: {user_name} (ID: {user_id})")
            print(f"üí¨ CHAT: {chat_id}")
            print(f"üìù TEXT: '{text}'")
            print(f"üìã MSG KEYS: {list(msg.keys())}")
            logger.info(f"üì® –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç {user_name} ({user_id}) –≤ —á–∞—Ç–µ {chat_id}")
            logger.info(f"üìù –¢–µ–∫—Å—Ç: '{text}'")
            logger.info(f"üìã –ö–ª—é—á–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {list(msg.keys())}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤–ª–æ–∂–µ–Ω–∏–π
            attachments, attachments_details = has_attachments(msg)
            
            # –î–ï–¢–ê–õ–¨–ù–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –í–õ–û–ñ–ï–ù–ò–ô
            print(f"üìé ATTACHMENTS: {attachments}")
            print(f"üìÑ DETAILS: {attachments_details}")
            
            try:
                # –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–æ–±—â–µ–Ω–∏–∏
                if attachments:
                    logger.info(f"üìé –°–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–ª–æ–∂–µ–Ω–∏—è–º–∏: {attachments}, —Ç–µ–∫—Å—Ç: '{text}'")
                    logger.info(f"üìã –ò—Å—Ç–æ—á–Ω–∏–∫ —Ç–µ–∫—Å—Ç–∞: {'text' if msg.get('text') else 'caption' if msg.get('caption') else 'none'}")
                    # –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–ª–æ–∂–µ–Ω–∏–π
                    for detail in attachments_details:
                        logger.info(f"   üìÑ {detail['type']}: {detail}")
                
                # === –û–ë–†–ê–ë–û–¢–ö–ê –ì–û–õ–û–°–û–í–´–• –°–û–û–ë–©–ï–ù–ò–ô ===
                print(f"\n--- VOICE CHECK ---")
                print(f"üîç attachments: {attachments}")
                print(f"üîç voice_service: {voice_service is not None}")
                print(f"üîç VOICE_ENABLED: {VOICE_ENABLED}")
                print(f"üîç 'voice' in attachments: {'voice' in attachments if attachments else False}")
                print(f"üîç voice_service type: {type(voice_service)}")
                logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö: attachments={attachments}, voice_service={voice_service is not None}, VOICE_ENABLED={VOICE_ENABLED}")
                
                if 'voice' in attachments and voice_service:
                    print(f"üé§ VOICE PROCESSING STARTED!")
                    print(f"üé§ Voice attachments found: {[d for d in attachments_details if d['type'] == 'voice']}")
                    logger.info(f"üé§ –ü–æ–ª—É—á–µ–Ω–æ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_name}, —Ç–µ–∫—Å—Ç='{text}'")
                    
                    try:
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–ø–∏—Å–∏ –≥–æ–ª–æ—Å–∞
                        bot.send_chat_action(chat_id, 'record_voice')
                        
                        # –ù–∞—Ö–æ–¥–∏–º –¥–∞–Ω–Ω—ã–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                        voice_data = None
                        for detail in attachments_details:
                            if detail['type'] == 'voice':
                                voice_data = detail
                                break
                        
                        if voice_data:
                            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                            print(f"üé§ Processing voice data: {voice_data}")
                            try:
                                # –ü—Ä–æ—Å—Ç–æ–π –ø–æ–¥—Ö–æ–¥ - –∑–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º thread
                                import threading
                                import queue
                                
                                result_queue = queue.Queue()
                                
                                def run_voice_processing():
                                    try:
                                        loop = asyncio.new_event_loop()
                                        asyncio.set_event_loop(loop)
                                        try:
                                            result = loop.run_until_complete(
                                                voice_service.process_voice_message(
                                                    voice_data, 
                                                    str(user_id), 
                                                    str(msg.get('message_id', 'unknown'))
                                                )
                                            )
                                            result_queue.put(('success', result))
                                        finally:
                                            loop.close()
                                    except Exception as e:
                                        result_queue.put(('error', str(e)))
                                
                                thread = threading.Thread(target=run_voice_processing)
                                thread.start()
                                thread.join(timeout=30)  # 30 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
                                
                                if thread.is_alive():
                                    print(f"‚è∞ –¢–∞–π–º–∞—É—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–∞")
                                    voice_result = {'success': False, 'error': 'Voice processing timeout'}
                                else:
                                    try:
                                        status, result = result_queue.get_nowait()
                                        if status == 'success':
                                            voice_result = result
                                        else:
                                            voice_result = {'success': False, 'error': result}
                                    except queue.Empty:
                                        voice_result = {'success': False, 'error': 'No result from voice processing'}
                                        
                            except Exception as voice_proc_error:
                                print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–∞: {voice_proc_error}")
                                voice_result = {'success': False, 'error': str(voice_proc_error)}
                            
                            if voice_result['success']:
                                # –ü–æ–ª—É—á–∏–ª–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é - –ø–µ—Ä–µ–¥–∞–µ–º –∞–≥–µ–Ω—Ç—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
                                transcribed_text = voice_result['text']
                                logger.info(f"‚úÖ –ì–æ–ª–æ—Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω: {transcribed_text[:100]}...")
                                print(f"üé§ Voice transcribed: {transcribed_text[:100]}...")
                                
                                # –ó–∞–º–µ–Ω—è–µ–º –ø—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç –Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω–Ω—ã–π
                                text = transcribed_text
                                logger.info(f"üé§ –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∞–≥–µ–Ω—Ç–æ–º –∫–∞–∫ —Ç–µ–∫—Å—Ç: {text[:100]}...")
                                print(f"üé§ Voice message will be processed by agent as text: {text[:100]}...")
                                # –ù–ï –≤–æ–∑–≤—Ä–∞—â–∞–µ–º, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                            else:
                                # –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–∞ - —Ç–æ–ª—å–∫–æ –ª–æ–≥–∏—Ä—É–µ–º
                                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–∞: {voice_result['error']}")
                                print(f"‚ùå Voice processing error: {voice_result['error']}")
                                # –ù–ï –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                                return {"ok": True, "action": "voice_error_silent"}
                        else:
                            logger.error("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è")
                            
                    except Exception as voice_error:
                        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–∞: {voice_error}")
                        print(f"‚ùå Critical voice error: {voice_error}")
                        # –ù–ï –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                        return {"ok": True, "action": "voice_critical_error_silent"}
                
                
                # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∞–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞
                try:
                    bot.send_chat_action(chat_id, 'typing')
                except Exception as typing_error:
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å typing –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä: {typing_error}")
                
                # === –û–ë–†–ê–ë–û–¢–ö–ê –ö–û–ú–ê–ù–î –ò –¢–ï–ö–°–¢–ê ===
                print(f"\n--- TEXT PROCESSING ---")
                print(f"üìù Processing text: '{text}'")
                print(f"ü§ñ AI_ENABLED: {AI_ENABLED}")
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
                if text.startswith("/start"):
                    print(f"üöÄ START command detected")
                    if AI_ENABLED:
                        response = agent.get_welcome_message()
                    else:
                        response = f"üëã –ü—Ä–∏–≤–µ—Ç, {user_name}! –ú–µ–Ω—è –∑–æ–≤—É—Ç –ï–ª–µ–Ω–∞, —è –º–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–º–ø–∞–Ω–∏–∏ Textile Pro.\n\n–ö–∞–∫–æ–π —É –≤–∞—Å –≤–æ–ø—Ä–æ—Å?"
                
                elif text.startswith("/help"):
                    print(f"‚ùì HELP command detected")
                    response = """‚ÑπÔ∏è –ü–æ–º–æ—â—å:
/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
/help - –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–º–æ—â—å

–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –æ —Ç–µ–∫—Å—Ç–∏–ª—å–Ω–æ–º –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ, –∏ —è —Å —Ä–∞–¥–æ—Å—Ç—å—é –ø–æ–º–æ–≥—É!

üìû –î–ª—è —Å—Ä–æ—á–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤: +86 123 456 789"""
                
                # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç (—Å –≤–ª–æ–∂–µ–Ω–∏—è–º–∏ –∏–ª–∏ –±–µ–∑) - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ AI
                elif text and AI_ENABLED:
                    print(f"ü§ñ AI processing text: '{text[:50]}...'")
                    print(f"üìé With attachments: {attachments}")
                    try:
                        session_id = f"user_{user_id}"
                        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Zep –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                        if agent.zep_client:
                            await agent.ensure_user_exists(f"user_{user_id}", {
                                'first_name': user_name,
                                'email': f'{user_id}@telegram.user'
                            })
                            await agent.ensure_session_exists(session_id, f"user_{user_id}")
                        response = await agent.generate_response(text, session_id, user_name)
                        
                        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Å–ª—É—á–∞—è —Å –≤–ª–æ–∂–µ–Ω–∏—è–º–∏
                        if attachments:
                            logger.info(f"‚úÖ AI –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ –¢–ï–ö–°–¢ (–≤–ª–æ–∂–µ–Ω–∏—è –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω—ã): {attachments}")
                            for detail in attachments_details:
                                logger.info(f"   üìÑ –í–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–æ {detail['type']}: {detail}")
                        
                    except Exception as ai_error:
                        logger.error(f"–û—à–∏–±–∫–∞ AI –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {ai_error}")
                        response = f"–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–æ–ø—Ä–æ—Å —Å–Ω–æ–≤–∞.\n\n–ü–æ –ª—é–±—ã–º —Å—Ä–æ—á–Ω—ã–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –Ω–∞–ø—Ä—è–º—É—é.\n\n–ï–ª–µ–Ω–∞, Textile Pro"
                    
                # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ –≤–ª–æ–∂–µ–Ω–∏—è –±–µ–∑ —Ç–µ–∫—Å—Ç–∞ - –ù–ï –æ—Ç–≤–µ—á–∞–µ–º
                elif attachments and not text:
                    print(f"üìé Attachments received but no response sent: {attachments}")
                    logger.info(f"üìé –í–ª–æ–∂–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω—ã –±–µ–∑ —Ç–µ–∫—Å—Ç–∞, –æ—Ç–≤–µ—Ç –ù–ï –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è: {attachments}")
                    # –ù–ï –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏ –ù–ï –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ –≤–ª–æ–∂–µ–Ω–∏—è –±–µ–∑ —Ç–µ–∫—Å—Ç–∞
                    return {"ok": True, "action": "attachments_ignored"}
                
                elif text:
                    # Fallback –µ—Å–ª–∏ AI –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω
                    print(f"üí¨ Text fallback (AI disabled): '{text}'")
                    response = f"üëã {user_name}, –ø–æ–ª—É—á–∏–ª–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å!\n\n–ü–æ–¥–≥–æ—Ç–æ–≤–ª—é –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –ø–æ —Ç–µ–∫—Å—Ç–∏–ª—å–Ω–æ–º—É –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤—É. –ú–∏–Ω—É—Ç–æ—á–∫—É!\n\n–ï–ª–µ–Ω–∞, Textile Pro"
                
                elif attachments and not text:
                    # Fallback –¥–ª—è –≤–ª–æ–∂–µ–Ω–∏–π –±–µ–∑ AI - –ù–ï –æ—Ç–≤–µ—á–∞–µ–º
                    print(f"üìé Attachments ignored (AI disabled): {attachments}")
                    logger.info(f"üìé –í–ª–æ–∂–µ–Ω–∏—è –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω—ã (AI –æ—Ç–∫–ª—é—á–µ–Ω): {attachments}")
                    return {"ok": True, "action": "attachments_ignored_no_ai"}
                
                else:
                    # –≠—Ç–æ—Ç —Å–ª—É—á–∞–π –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å
                    print(f"‚ö†Ô∏è UNEXPECTED: No text and no attachments")
                    print(f"üìã MSG STRUCTURE: {json.dumps(msg, ensure_ascii=False, indent=2)}")
                    logger.warning(f"‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å–ª—É—á–∞–π: –Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞ –∏ –Ω–µ—Ç –≤–ª–æ–∂–µ–Ω–∏–π")
                    logger.warning(f"üìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: {json.dumps(msg, ensure_ascii=False)}")
                    return {"ok": True, "action": "no_action"}
                    
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –æ–ø—Ä–µ–¥–µ–ª–µ–Ω
                if 'response' in locals() and response:
                    print(f"\n--- SENDING RESPONSE ---")
                    print(f"üì§ Response: '{response[:100]}...'")
                    print(f"üí¨ To chat: {chat_id}")
                    bot.send_message(chat_id, response)
                    logger.info(f"‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —á–∞—Ç {chat_id}")
                    print(f"‚úÖ Response sent to {user_name}")
                else:
                    print(f"\n--- NO RESPONSE ---")
                    print(f"üîá No response generated (attachments ignored)")
                    logger.info(f"üîá –û—Ç–≤–µ—Ç –ù–ï –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω (–≤–ª–æ–∂–µ–Ω–∏—è –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω—ã)")
                print(f"=== MESSAGE PROCESSING END ===\n")
                
            except Exception as e:
                print(f"\n‚ùå CRITICAL ERROR in message processing:")
                print(f"‚ùå Error: {e}")
                print(f"‚ùå Traceback: {traceback.format_exc()}")
                print(f"‚ùå Message data: {json.dumps(msg, ensure_ascii=False, indent=2)}")
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                logger.error(f"‚ùå Traceback: {traceback.format_exc()}")
                logger.error(f"‚ùå –î–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {json.dumps(msg, ensure_ascii=False)}")
                try:
                    bot.send_message(chat_id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å —Å–Ω–æ–≤–∞.\n\n–ï–ª–µ–Ω–∞, Textile Pro")
                    print(f"‚úÖ Error message sent")
                except Exception as send_error:
                    print(f"‚ùå Failed to send error message: {send_error}")
                    logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {send_error}")
        
        # === BUSINESS –°–û–û–ë–©–ï–ù–ò–Ø ===
        elif "business_message" in update_dict:
            bus_msg = update_dict["business_message"]
            
            # –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã business_message
            logger.info(f"üì® Business message –ø–æ–ª–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞: {json.dumps(bus_msg, ensure_ascii=False)[:500]}...")
            
            chat_id = bus_msg["chat"]["id"]
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ text –∏–ª–∏ caption (–¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤)
            text = bus_msg.get("text", "") or bus_msg.get("caption", "")
            user_id = bus_msg.get("from", {}).get("id", "unknown")
            business_connection_id = bus_msg.get("business_connection_id")
            user_name = bus_msg.get("from", {}).get("first_name", "–ö–ª–∏–µ–Ω—Ç")
            
            # –õ–æ–≥–∏—Ä—É–µ–º business_connection_id –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            logger.info(f"üìä Business message - connection_id: '{business_connection_id}' (—Ç–∏–ø: {type(business_connection_id)})")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ business_connection_id
            if not business_connection_id:
                logger.warning(f"‚ö†Ô∏è Business message –±–µ–∑ connection_id –æ—Ç {user_name} ({user_id})")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤–ª–æ–∂–µ–Ω–∏–π –≤ business —Å–æ–æ–±—â–µ–Ω–∏–∏
            attachments, attachments_details = has_attachments(bus_msg)
            
            # –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–æ–±—â–µ–Ω–∏–∏
            if attachments:
                logger.info(f"üìé Business —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–ª–æ–∂–µ–Ω–∏—è–º–∏: {attachments}, —Ç–µ–∫—Å—Ç: '{text}'")
                logger.info(f"üìã –ò—Å—Ç–æ—á–Ω–∏–∫ —Ç–µ–∫—Å—Ç–∞: {'text' if bus_msg.get('text') else 'caption' if bus_msg.get('caption') else 'none'}")
                # –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–ª–æ–∂–µ–Ω–∏–π
                for detail in attachments_details:
                    logger.info(f"   üìÑ {detail['type']}: {detail}")
            
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º business —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ç–µ–∫—Å—Ç–æ–º (—Å –≤–ª–æ–∂–µ–Ω–∏—è–º–∏ –∏–ª–∏ –±–µ–∑)
            if text:
                try:
                    logger.info(f"üîÑ –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É business message: text='{text}', chat_id={chat_id}")
                    
                    # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å typing, –Ω–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è –¥–ª—è business —á–∞—Ç–æ–≤
                    try:
                        bot.send_chat_action(chat_id, 'typing')
                        logger.info(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω typing –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä")
                    except Exception as typing_error:
                        # Business —á–∞—Ç—ã –º–æ–≥—É—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å typing —á–µ—Ä–µ–∑ –æ–±—ã—á–Ω—ã–π API
                        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å typing –¥–ª—è business —á–∞—Ç–∞: {typing_error}")
                        logger.info(f"‚ÑπÔ∏è –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ typing –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞")
                    
                    if AI_ENABLED:
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º AI –¥–ª—è Business —Å–æ–æ–±—â–µ–Ω–∏–π
                        logger.info(f"ü§ñ AI –≤–∫–ª—é—á–µ–Ω, –≥–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç–≤–µ—Ç...")
                        session_id = f"business_{user_id}"
                        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Zep –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                        if agent.zep_client:
                            await agent.ensure_user_exists(f"business_{user_id}", {
                                'first_name': user_name,
                                'email': f'{user_id}@business.telegram.user'
                            })
                            await agent.ensure_session_exists(session_id, f"business_{user_id}")
                        response = await agent.generate_response(text, session_id, user_name)
                        logger.info(f"‚úÖ AI –æ—Ç–≤–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {response[:100]}...")
                        
                        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Å–ª—É—á–∞—è —Å –≤–ª–æ–∂–µ–Ω–∏—è–º–∏
                        if attachments:
                            logger.info(f"‚úÖ AI –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ business –¢–ï–ö–°–¢ (–≤–ª–æ–∂–µ–Ω–∏—è –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω—ã): {attachments}")
                            for detail in attachments_details:
                                logger.info(f"   üìÑ Business –≤–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–æ {detail['type']}: {detail}")
                    else:
                        logger.info(f"ü§ñ AI –æ—Ç–∫–ª—é—á–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É—é —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç")
                        response = f"üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user_name}!\n\n–ú–µ–Ω—è –∑–æ–≤—É—Ç –ï–ª–µ–Ω–∞, —è –º–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–º–ø–∞–Ω–∏–∏ Textile Pro.\n\n–ü–æ–¥–≥–æ—Ç–æ–≤–ª—é –æ—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å –æ —Ç–µ–∫—Å—Ç–∏–ª—å–Ω–æ–º –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ. –ú–∏–Ω—É—Ç–æ—á–∫—É!"
                    
                    # –î–ª—è business_message –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
                    logger.info(f"üì§ –ü—ã—Ç–∞—é—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç...")
                    if business_connection_id:
                        logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é —á–µ—Ä–µ–∑ Business API —Å connection_id='{business_connection_id}'")
                        result = send_business_message(chat_id, response, business_connection_id)
                        if result:
                            logger.info(f"‚úÖ Business –æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —á–∞—Ç {chat_id} —Å connection_id='{business_connection_id}'")
                        else:
                            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ—Ä–µ–∑ Business API")
                    else:
                        # –ï—Å–ª–∏ connection_id –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –ª–æ–≥–∏—Ä—É–µ–º —ç—Ç–æ –∫–∞–∫ –∫—Ä–∏—Ç–∏—á–µ—Å–∫—É—é –æ—à–∏–±–∫—É
                        logger.error(f"‚ùå –ö–†–ò–¢–ò–ß–ù–û: –ü–æ–ª—É—á–µ–Ω business_message –±–µ–∑ connection_id! chat_id={chat_id}, user={user_name}")
                        # –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                        bot.send_message(chat_id, response)
                        logger.warning(f"‚ö†Ô∏è –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (fallback)")
                    
                    print(f"‚úÖ Business –æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_name}")
                    
                except Exception as e:
                    # –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏ —Å traceback
                    error_info = {
                        "error": str(e),
                        "traceback": traceback.format_exc(),
                        "business_connection_id": business_connection_id,
                        "chat_id": chat_id,
                        "text": text
                    }
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ business —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                    logger.error(f"Traceback:\n{traceback.format_exc()}")
                    logger.error(f"Business connection_id: '{business_connection_id}'")
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—à–∏–±–∫—É –≤ debug –¥–∞–Ω–Ω—ã–µ
                    last_updates.append({
                        "id": f"error_{update_counter}",
                        "timestamp": datetime.now().isoformat(),
                        "type": "business_message_error",
                        "error_info": error_info
                    })
                    
                    # –í–ê–ñ–ù–û: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É –¢–û–ñ–ï —á–µ—Ä–µ–∑ Business API!
                    try:
                        error_message = "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫–æ –º–Ω–µ –Ω–∞–ø—Ä—è–º—É—é.\n\n–ï–ª–µ–Ω–∞, Textile Pro"
                        
                        # –ï—Å–ª–∏ –µ—Å—Ç—å business_connection_id - –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
                        if business_connection_id:
                            result = send_business_message(chat_id, error_message, business_connection_id)
                            if result:
                                logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ Business API")
                            else:
                                # –ï—Å–ª–∏ Business API –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø—Ä–æ–±—É–µ–º –æ–±—ã—á–Ω—ã–π —Å–ø–æ—Å–æ–±
                                bot.send_message(chat_id, error_message)
                                logger.warning(f"‚ö†Ô∏è Business API –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –æ–±—ã—á–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º")
                        else:
                            # Fallback: –µ—Å–ª–∏ –Ω–µ—Ç connection_id, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                            bot.send_message(chat_id, error_message)
                            logger.warning(f"‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ë–ï–ó Business API (–Ω–µ—Ç connection_id)")
                            
                    except Exception as send_error:
                        logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {send_error}")
            
            # Business –≤–ª–æ–∂–µ–Ω–∏—è –±–µ–∑ —Ç–µ–∫—Å—Ç–∞ - –ò–ì–ù–û–†–ò–†–£–ï–ú (–Ω–µ –æ—Ç–≤–µ—á–∞–µ–º)
            elif attachments:
                logger.info(f"üìé Business –≤–ª–æ–∂–µ–Ω–∏—è –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω—ã (–Ω–µ –æ—Ç–≤–µ—á–∞–µ–º): {attachments}")
                print(f"üìé Business attachments ignored: {attachments}")
                # –ù–ï –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∏–∫–∞–∫–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ business –≤–ª–æ–∂–µ–Ω–∏—è
        
        # === BUSINESS CONNECTION ===
        elif "business_connection" in update_dict:
            conn = update_dict["business_connection"]
            is_enabled = conn.get("is_enabled", False)
            user_name = conn.get("user", {}).get("first_name", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
            
            status = "‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω" if is_enabled else "‚ùå –û—Ç–∫–ª—é—á–µ–Ω"
            logger.info(f"{status} –∫ Business –∞–∫–∫–∞—É–Ω—Ç—É: {user_name}")
        
        return {"ok": True, "status": "processed", "update_id": update_counter}
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ webhook: {e}")
        return {"ok": False, "error": str(e)}

@app.on_event("startup")
async def startup():
    """–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞"""
    print("\n" + "="*50)
    print("üöÄ ARTYOM INTEGRATOR WEBHOOK SERVER")
    print("="*50)
    
    # –û—á–∏—â–∞–µ–º webhook –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    try:
        bot.delete_webhook()
        print("üßπ Webhook –æ—á–∏—â–µ–Ω")
    except:
        pass
    
    try:
        bot_info = bot.get_me()
        print(f"ü§ñ –ë–æ—Ç: @{bot_info.username}")
        print(f"üìä ID: {bot_info.id}")
        print(f"üìõ –ò–º—è: {bot_info.first_name}")
        print("üîó –†–µ–∂–∏–º: WEBHOOK ONLY")
        print("‚ùå Polling: –û–¢–ö–õ–Æ–ß–ï–ù")
        print(f"ü§ñ AI: {'‚úÖ –í–ö–õ–Æ–ß–ï–ù' if AI_ENABLED else '‚ùå –û–¢–ö–õ–Æ–ß–ï–ù'}")
        print(f"üé§ Voice Service: {'‚úÖ –í–ö–õ–Æ–ß–ï–ù' if voice_service else '‚ùå –û–¢–ö–õ–Æ–ß–ï–ù'}")
        print(f"üîë OpenAI API: {'‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω' if os.getenv('OPENAI_API_KEY') else '‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}")
        print(f"üîë VOICE_ENABLED: {VOICE_ENABLED}")
        print(f"üîë voice_service object: {voice_service}")
        print("="*50)
        logger.info("‚úÖ –ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –í–°–ï–ì–î–ê –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
        print("üîß –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook...")
        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
            current_webhook = bot.get_webhook_info()
            if current_webhook.url:
                print(f"üìç –¢–µ–∫—É—â–∏–π webhook: {current_webhook.url}")
            else:
                print("‚ùå Webhook –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook
            webhook_url = os.getenv("WEBHOOK_URL", "https://artyom-integrator-production.up.railway.app/webhook")
            result = bot.set_webhook(
                url=webhook_url,
                secret_token=WEBHOOK_SECRET_TOKEN,
                allowed_updates=[
                    "message",
                    "business_connection", 
                    "business_message",
                    "edited_business_message",
                    "deleted_business_messages"
                ]
            )
            
            if result:
                print(f"‚úÖ Webhook –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")
                logger.info(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ: {webhook_url}")
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å webhook –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
                logger.error("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–µ webhook: {e}")
            logger.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook: {e}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞: {e}")

@app.on_event("shutdown")
async def shutdown():
    """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"""
    logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Artyom Integrator Webhook Server")
    print("üõë –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

if __name__ == "__main__":
    import uvicorn
    port = int(os.getenv("PORT", 8000))
    print(f"üåê –ó–∞–ø—É—Å–∫ –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    uvicorn.run(app, host="0.0.0.0", port=port)