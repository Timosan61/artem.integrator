#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ MCP –∫–æ–º–∞–Ω–¥ —á–µ—Ä–µ–∑ Claude Code Service
"""

import asyncio
import logging
from pathlib import Path
import sys

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º –±–æ—Ç–∞
sys.path.append(str(Path(__file__).parent))

from bot.services.claude_code_service import claude_code_service
from bot.core.config import config

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


async def test_mcp_status():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–æ–º–∞–Ω–¥—É /mcp status"""
    print("\n" + "="*60)
    print("üîå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: /mcp status")
    print("="*60)
    
    result = await claude_code_service.execute_mcp_command("/mcp status", "test_user")
    
    print(f"‚úÖ Success: {result.get('success')}")
    print(f"üìù Response: {result.get('response', '')[:500]}...")
    if result.get('error'):
        print(f"‚ùå Error: {result.get('error')}")
    
    return result.get('success', False)


async def test_mcp_projects():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–æ–º–∞–Ω–¥—É /mcp projects"""
    print("\n" + "="*60)
    print("üóÑÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: /mcp projects")
    print("="*60)
    
    result = await claude_code_service.execute_mcp_command("/mcp projects", "test_user")
    
    print(f"‚úÖ Success: {result.get('success')}")
    print(f"üìù Response: {result.get('response', '')[:500]}...")
    if result.get('error'):
        print(f"‚ùå Error: {result.get('error')}")
    
    return result.get('success', False)


async def test_db_command():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–æ–º–∞–Ω–¥—É /db"""
    print("\n" + "="*60)
    print("üóÑÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: /db SELECT version()")
    print("="*60)
    
    result = await claude_code_service.execute_mcp_command("/db SELECT version()", "test_user")
    
    print(f"‚úÖ Success: {result.get('success')}")
    print(f"üìù Response: {result.get('response', '')[:500]}...")
    if result.get('error'):
        print(f"‚ùå Error: {result.get('error')}")
    
    return result.get('success', False)


async def test_mcp_apps():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–æ–º–∞–Ω–¥—É /mcp apps"""
    print("\n" + "="*60)
    print("üåä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: /mcp apps")
    print("="*60)
    
    result = await claude_code_service.execute_mcp_command("/mcp apps", "test_user")
    
    print(f"‚úÖ Success: {result.get('success')}")
    print(f"üìù Response: {result.get('response', '')[:500]}...")
    if result.get('error'):
        print(f"‚ùå Error: {result.get('error')}")
    
    return result.get('success', False)


async def test_docs_command():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–æ–º–∞–Ω–¥—É /docs"""
    print("\n" + "="*60)
    print("üìö –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: /docs react hooks")
    print("="*60)
    
    result = await claude_code_service.execute_mcp_command("/docs react hooks", "test_user")
    
    print(f"‚úÖ Success: {result.get('success')}")
    print(f"üìù Response: {result.get('response', '')[:500]}...")
    if result.get('error'):
        print(f"‚ùå Error: {result.get('error')}")
    
    return result.get('success', False)


async def test_connection():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –±–∞–∑–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ"""
    print("\n" + "="*60)
    print("üîó –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Claude Code Service")
    print("="*60)
    
    result = await claude_code_service.test_connection()
    
    print(f"‚úÖ Success: {result.get('success')}")
    print(f"üîå Enabled: {result.get('enabled')}")
    print(f"üìÅ MCP Config Exists: {result.get('mcp_config_exists')}")
    print(f"üîë API Key Set: {result.get('api_key_set')}")
    if result.get('error'):
        print(f"‚ùå Error: {result.get('error')}")
    
    return result.get('success', False)


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ MCP –∫–æ–º–∞–Ω–¥")
    print("=" * 80)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    print("\nüìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:")
    print(f"  MCP Enabled: {config.mcp.enabled}")
    print(f"  Anthropic Enabled: {config.anthropic.enabled}")
    print(f"  Anthropic API Key: {'‚úÖ Set' if config.anthropic.api_key else '‚ùå Not set'}")
    print(f"  Supabase Enabled: {config.mcp.supabase_enabled}")
    print(f"  DigitalOcean Enabled: {config.mcp.digitalocean_enabled}")
    print(f"  Context7 Enabled: {config.mcp.context7_enabled}")
    
    if not config.mcp.enabled or not config.anthropic.enabled:
        print("\n‚ùå MCP –∏–ª–∏ Anthropic –æ—Ç–∫–ª—é—á–µ–Ω—ã –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏!")
        print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ .env —Ñ–∞–π–ª –∏ —É–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ:")
        print("  - MCP_ENABLED=true")
        print("  - ANTHROPIC_ENABLED=true")
        print("  - ANTHROPIC_API_KEY —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç—ã
    results = {
        "connection": await test_connection(),
        "status": await test_mcp_status(),
        "projects": await test_mcp_projects(),
        "db": await test_db_command(),
        "apps": await test_mcp_apps(),
        "docs": await test_docs_command()
    }
    
    # –ò—Ç–æ–≥–∏
    print("\n" + "="*80)
    print("üìä –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print("="*80)
    
    passed = sum(1 for v in results.values() if v)
    total = len(results)
    
    for test_name, success in results.items():
        status = "‚úÖ PASSED" if success else "‚ùå FAILED"
        print(f"  {test_name.ljust(15)}: {status}")
    
    print(f"\nüìà –†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ")
    
    if passed == total:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ! MCP —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
    else:
        print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏ –ª–æ–≥–∏.")
        print("\nüí° –°–æ–≤–µ—Ç—ã –ø–æ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—é –ø—Ä–æ–±–ª–µ–º:")
        print("1. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ claude-code-sdk —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: pip install claude-code-sdk")
        print("2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ ANTHROPIC_API_KEY –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π")
        print("3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ data/mcp-servers.json")
        print("4. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ MCP —Å–µ—Ä–≤–µ—Ä—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")


if __name__ == "__main__":
    asyncio.run(main())