#!/usr/bin/env python3
"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ç–µ—Å—Ç–µ—Ä –±–æ—Ç–∞ —Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º –ª–æ–≥–æ–≤
–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Å–ª–µ–¥–∏—Ç –∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
"""

import asyncio
import aiohttp
import json
import time
import subprocess
import threading
from datetime import datetime
from typing import Dict, List, Optional, Tuple
import os
import re
from colorama import init, Fore, Style

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è colorama
init(autoreset=True)

class BotAutoTester:
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ç–µ—Å—Ç–µ—Ä —Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º –ª–æ–≥–æ–≤"""
    
    def __init__(self):
        self.webhook_url = "https://16bf5c25554f.ngrok-free.app/webhook"
        self.bot_token = "6658269281:AAETA0vTXiRCMPcL1y_DzEeU_Fc6DiqdpFk"
        self.chat_id = 229838448
        self.admin_username = "aaatema"
        self.update_id = int(time.time() * 1000)
        self.log_file = "webhook.log"
        self.log_monitor_thread = None
        self.monitoring = False
        self.log_buffer = []
        
    def start_log_monitoring(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ª–æ–≥–æ–≤ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        self.monitoring = True
        self.log_monitor_thread = threading.Thread(target=self._monitor_logs)
        self.log_monitor_thread.daemon = True
        self.log_monitor_thread.start()
        
    def stop_log_monitoring(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ª–æ–≥–æ–≤"""
        self.monitoring = False
        if self.log_monitor_thread:
            self.log_monitor_thread.join(timeout=2)
    
    def _monitor_logs(self):
        """–°–ª–µ–¥–∏—Ç –∑–∞ –ª–æ–≥–∞–º–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º tail -f –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –Ω–æ–≤—ã—Ö —Å—Ç—Ä–æ–∫
            process = subprocess.Popen(
                ['tail', '-f', self.log_file],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                text=True
            )
            
            while self.monitoring:
                line = process.stdout.readline()
                if line:
                    self.log_buffer.append(line.strip())
                    # –í—ã–≤–æ–¥–∏–º –≤–∞–∂–Ω—ã–µ –ª–æ–≥–∏
                    if any(key in line for key in ['üì•', 'üì§', '‚úÖ', '‚ùå', 'ERROR', 'Sending']):
                        self._print_log_line(line.strip())
                        
        except Exception as e:
            print(f"{Fore.RED}‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ª–æ–≥–æ–≤: {e}")
    
    def _print_log_line(self, line: str):
        """–ö—Ä–∞—Å–∏–≤–æ –≤—ã–≤–æ–¥–∏—Ç —Å—Ç—Ä–æ–∫—É –ª–æ–≥–∞"""
        if 'ERROR' in line or '‚ùå' in line:
            print(f"{Fore.RED}{line}")
        elif '‚úÖ' in line:
            print(f"{Fore.GREEN}{line}")
        elif 'üì•' in line or 'üì§' in line:
            print(f"{Fore.BLUE}{line}")
        elif 'Sending' in line:
            print(f"{Fore.YELLOW}{line}")
        else:
            print(line)
    
    def _create_update(self, text: str) -> Dict:
        """–°–æ–∑–¥–∞–µ—Ç Telegram Update –æ–±—ä–µ–∫—Ç"""
        self.update_id += 1
        return {
            "update_id": self.update_id,
            "message": {
                "message_id": self.update_id,
                "from": {
                    "id": self.chat_id,
                    "is_bot": False,
                    "first_name": "Test",
                    "username": self.admin_username,
                    "language_code": "ru"
                },
                "chat": {
                    "id": self.chat_id,
                    "first_name": "Test",
                    "username": self.admin_username,
                    "type": "private"
                },
                "date": int(time.time()),
                "text": text
            }
        }
    
    async def send_to_webhook(self, text: str) -> Tuple[bool, str]:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ webhook"""
        update = self._create_update(text)
        
        headers = {
            "Content-Type": "application/json",
            "X-Telegram-Bot-Api-Secret-Token": "artyom_integrator_secret_2025"
        }
        
        async with aiohttp.ClientSession() as session:
            try:
                async with session.post(
                    self.webhook_url,
                    json=update,
                    headers=headers,
                    timeout=aiohttp.ClientTimeout(total=10)
                ) as response:
                    result = await response.json()
                    return response.status == 200, str(result)
            except Exception as e:
                return False, str(e)
    
    async def check_bot_response(self, wait_time: int = 3) -> Optional[Dict]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ —á–µ—Ä–µ–∑ Telegram API"""
        await asyncio.sleep(wait_time)  # –ñ–¥–µ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏
        
        url = f"https://api.telegram.org/bot{self.bot_token}/getUpdates"
        params = {"offset": -10, "limit": 10}  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π
        
        async with aiohttp.ClientSession() as session:
            try:
                async with session.get(url, params=params) as response:
                    data = await response.json()
                    if data.get("ok") and data.get("result"):
                        # –ò—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –±–æ—Ç–∞
                        for update in reversed(data["result"]):
                            msg = update.get("message", {})
                            if msg.get("from", {}).get("is_bot") and msg.get("chat", {}).get("id") == self.chat_id:
                                return msg
                return None
            except Exception as e:
                print(f"{Fore.RED}‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–≤–µ—Ç–∞: {e}")
                return None
    
    def analyze_logs_for_errors(self) -> List[str]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±—É—Ñ–µ—Ä –ª–æ–≥–æ–≤ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫"""
        errors = []
        for line in self.log_buffer[-50:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 50 —Å—Ç—Ä–æ–∫
            if 'ERROR' in line or 'Failed' in line or 'Exception' in line:
                errors.append(line)
        return errors
    
    async def run_test(self, command: str, description: str):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –æ–¥–∏–Ω —Ç–µ—Å—Ç"""
        print(f"\n{Fore.CYAN}{'='*60}")
        print(f"{Fore.CYAN}üß™ –¢–µ—Å—Ç: {description}")
        print(f"{Fore.CYAN}üìù –ö–æ–º–∞–Ω–¥–∞: {command}")
        print(f"{Fore.CYAN}{'='*60}")
        
        # –û—á–∏—â–∞–µ–º –±—É—Ñ–µ—Ä –ª–æ–≥–æ–≤
        self.log_buffer.clear()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É
        print(f"\n{Fore.YELLOW}üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ webhook...")
        success, result = await self.send_to_webhook(command)
        
        if success:
            print(f"{Fore.GREEN}‚úÖ Webhook –ø—Ä–∏–Ω—è–ª –∑–∞–ø—Ä–æ—Å: {result}")
        else:
            print(f"{Fore.RED}‚ùå –û—à–∏–±–∫–∞ webhook: {result}")
            return
        
        # –ñ–¥–µ–º –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç
        print(f"\n{Fore.YELLOW}‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –±–æ—Ç–∞...")
        bot_response = await self.check_bot_response()
        
        if bot_response:
            print(f"{Fore.GREEN}‚úÖ –ë–æ—Ç –æ—Ç–≤–µ—Ç–∏–ª:")
            print(f"{Fore.WHITE}   –¢–µ–∫—Å—Ç: {bot_response.get('text', '–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞')}")
            print(f"{Fore.WHITE}   –í—Ä–µ–º—è: {datetime.fromtimestamp(bot_response.get('date', 0))}")
        else:
            print(f"{Fore.RED}‚ùå –ë–æ—Ç –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –≤ –ª–æ–≥–∞—Ö
            errors = self.analyze_logs_for_errors()
            if errors:
                print(f"\n{Fore.RED}üîç –ù–∞–π–¥–µ–Ω—ã –æ—à–∏–±–∫–∏ –≤ –ª–æ–≥–∞—Ö:")
                for error in errors:
                    print(f"{Fore.RED}   - {error}")
    
    async def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã"""
        print(f"{Fore.MAGENTA}üöÄ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞")
        print(f"{Fore.MAGENTA}üìç Webhook URL: {self.webhook_url}")
        print(f"{Fore.MAGENTA}üë§ User ID: {self.chat_id}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ª–æ–≥–æ–≤
        print(f"\n{Fore.YELLOW}üìä –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ª–æ–≥–æ–≤...")
        self.start_log_monitoring()
        await asyncio.sleep(1)  # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∑–∞–ø—É—Å–∫
        
        # –¢–µ—Å—Ç—ã
        tests = [
            ("/start", "–ö–æ–º–∞–Ω–¥–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è"),
            ("/help", "–ö–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â–∏"),
            ("–ü—Ä–∏–≤–µ—Ç", "–û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"),
            ("/mcp status", "MCP —Å—Ç–∞—Ç—É—Å"),
            ("/clear", "–û—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏")
        ]
        
        for command, description in tests:
            await self.run_test(command, description)
            await asyncio.sleep(2)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        print(f"\n{Fore.YELLOW}üìä –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ª–æ–≥–æ–≤...")
        self.stop_log_monitoring()
        
        # –§–∏–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        print(f"\n{Fore.MAGENTA}{'='*60}")
        print(f"{Fore.MAGENTA}üìã –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
        print(f"{Fore.MAGENTA}{'='*60}")
        
        all_errors = self.analyze_logs_for_errors()
        if all_errors:
            print(f"{Fore.RED}‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {len(all_errors)} –æ—à–∏–±–æ–∫")
            for i, error in enumerate(all_errors[:5], 1):
                print(f"{Fore.RED}{i}. {error}")
        else:
            print(f"{Fore.GREEN}‚úÖ –û—à–∏–±–æ–∫ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    tester = BotAutoTester()
    await tester.run_all_tests()


if __name__ == "__main__":
    asyncio.run(main())