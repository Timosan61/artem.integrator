#!/usr/bin/env python3
"""
–ò–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤

–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ç–æ–ª—å–∫–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏ –±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –æ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–æ—Ç–∞
"""

import asyncio
import sys
import os
from datetime import datetime, timedelta
from typing import Optional
from dataclasses import dataclass

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'bot'))

# –ü—Ä—è–º–æ–π –∏–º–ø–æ—Ä—Ç —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
try:
    from bot.core.request_tracer import (
        RequestTracer, RequestTrace, TraceEvent, TraceStatus, ComponentStep
    )
    from bot.core.logging_utils import ComponentType
    IMPORTS_OK = True
    print("‚úÖ –ò–º–ø–æ—Ä—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏ —É—Å–ø–µ—à–µ–Ω")
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    IMPORTS_OK = False

@dataclass 
class TestResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞"""
    test_name: str
    success: bool
    error: Optional[str] = None
    duration_ms: Optional[float] = None

def test_tracer_initialization():
    """–¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤—â–∏–∫–∞"""
    print("\nüß™ –¢–µ—Å—Ç 1: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è RequestTracer")
    
    try:
        tracer = RequestTracer(max_traces=100, trace_ttl_hours=1)
        
        print(f"‚úÖ RequestTracer —Å–æ–∑–¥–∞–Ω —Å max_traces=100, ttl=1h")
        print(f"üìä –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–æ–∫: {len(tracer.active_traces)}")
        print(f"üìä –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–æ–∫: {len(tracer.completed_traces)}")
        print(f"üìä –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {tracer.total_requests}")
        
        return TestResult("tracer_initialization", True)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        return TestResult("tracer_initialization", False, error=str(e))

def test_trace_creation():
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏"""
    print("\nüß™ –¢–µ—Å—Ç 2: –°–æ–∑–¥–∞–Ω–∏–µ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞–º–∏")
    
    try:
        tracer = RequestTracer()
        
        # –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫—É
        trace_id = tracer.create_trace(
            user_id="test_user_123", 
            session_id="session_456",
            metadata={"test": "trace_creation", "version": "1.0"}
        )
        
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞: {trace_id}")
        print(f"üìä –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {tracer.total_requests}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫—É
        trace = tracer.get_trace(trace_id)
        if trace:
            print(f"‚úÖ –¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –Ω–∞–π–¥–µ–Ω–∞: {trace.trace_id}")
            print(f"   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {trace.user_id}")
            print(f"   –°–µ—Å—Å–∏—è: {trace.session_id}")
            print(f"   –°—Ç–∞—Ç—É—Å: {trace.status.value}")
            print(f"   –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è: {trace.start_time}")
            print(f"   –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ: {trace.metadata}")
        else:
            raise Exception("–¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        return TestResult("trace_creation", True)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏: {e}")
        return TestResult("trace_creation", False, error=str(e))

def test_event_management():
    """–¢–µ—Å—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è–º–∏"""
    print("\nüß™ –¢–µ—Å—Ç 3: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è–º–∏")
    
    try:
        tracer = RequestTracer()
        trace_id = tracer.create_trace("test_user")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
        events_data = [
            (ComponentType.WEBHOOK, ComponentStep.WEBHOOK_RECEIVED, {"source": "telegram"}, 2.5, True, None),
            (ComponentType.AGENT, ComponentStep.AGENT_ROUTING, {"agents": 3}, 5.0, True, None),
            (ComponentType.AGENT, ComponentStep.AGENT_PROCESSING, {"agent": "IntelligentAgent"}, 120.0, True, None),
            (ComponentType.MCP, ComponentStep.TOOL_EXECUTION, {"tool": "mcp_apps"}, 45.0, False, "Connection timeout"),
            (ComponentType.AGENT, ComponentStep.RESPONSE_GENERATION, {"length": 150}, 8.0, True, None),
        ]
        
        for component, step, details, duration, success, error in events_data:
            tracer.add_event(trace_id, component, step, details, duration, success, error)
            status = "‚úÖ" if success else "‚ùå"
            print(f"   {status} {component.value} -> {step.value} ({duration}ms)")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–±—ã—Ç–∏—è
        trace = tracer.get_trace(trace_id)
        if trace:
            print(f"\nüìä –í—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π: {len(trace.events)}")
            print(f"üìä –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º: {trace.component_durations}")
            
            successful_events = sum(1 for event in trace.events if event.success)
            failed_events = len(trace.events) - successful_events
            print(f"üìä –£—Å–ø–µ—à–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π: {successful_events}")
            print(f"üìä –ù–µ—É—Å–ø–µ—à–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π: {failed_events}")
        
        return TestResult("event_management", True)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è–º–∏: {e}")
        return TestResult("event_management", False, error=str(e))

def test_trace_completion():
    """–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏"""
    print("\nüß™ –¢–µ—Å—Ç 4: –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏")
    
    try:
        tracer = RequestTracer()
        
        # –¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        trace_id_success = tracer.create_trace("user_success")
        tracer.add_event(trace_id_success, ComponentType.WEBHOOK, ComponentStep.WEBHOOK_RECEIVED, duration_ms=3.0)
        tracer.complete_trace(
            trace_id_success, 
            TraceStatus.COMPLETED,
            final_metadata={"result": "success", "response_length": 100}
        )
        
        # –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å –æ—à–∏–±–∫–æ–π
        trace_id_failed = tracer.create_trace("user_failed")
        tracer.add_event(trace_id_failed, ComponentType.AGENT, ComponentStep.AGENT_PROCESSING, 
                        duration_ms=50.0, success=False, error="Agent unavailable")
        tracer.complete_trace(trace_id_failed, TraceStatus.FAILED)
        
        print("‚úÖ –û–±–µ —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        metrics = tracer.get_performance_metrics()
        print(f"üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"   –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {metrics['total_requests']}")
        print(f"   –£—Å–ø–µ—à–Ω—ã—Ö: {metrics['successful_requests']}")
        print(f"   –ù–µ—É—Å–ø–µ—à–Ω—ã—Ö: {metrics['failed_requests']}")
        print(f"   –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {metrics['success_rate']:.1%}")
        print(f"   –ê–∫—Ç–∏–≤–Ω—ã—Ö: {metrics['active_traces']}")
        print(f"   –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö: {metrics['completed_traces']}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏
        success_trace = tracer.get_trace(trace_id_success)
        failed_trace = tracer.get_trace(trace_id_failed)
        
        if success_trace:
            print(f"‚úÖ –£—Å–ø–µ—à–Ω–∞—è —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞: {success_trace.status.value}, {success_trace.duration_ms:.1f}ms")
        if failed_trace:
            print(f"‚ùå –ù–µ—É—Å–ø–µ—à–Ω–∞—è —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞: {failed_trace.status.value}, {failed_trace.duration_ms:.1f}ms")
        
        return TestResult("trace_completion", True)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏: {e}")
        return TestResult("trace_completion", False, error=str(e))

async def test_context_manager():
    """–¢–µ—Å—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
    print("\nüß™ –¢–µ—Å—Ç 5: –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π")
    
    try:
        tracer = RequestTracer()
        trace_id = tracer.create_trace("context_test")
        
        # –¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
        async with tracer.trace_operation(
            trace_id, ComponentType.MCP, ComponentStep.TOOL_EXECUTION,
            details={"operation": "test_success"}
        ):
            await asyncio.sleep(0.01)  # –ò–º–∏—Ç–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç—É
            print("   ‚úÖ –£—Å–ø–µ—à–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        
        # –¢–µ—Å—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –æ—à–∏–±–∫–æ–π
        try:
            async with tracer.trace_operation(
                trace_id, ComponentType.AGENT, ComponentStep.AGENT_PROCESSING,
                details={"operation": "test_error"}
            ):
                await asyncio.sleep(0.005)
                raise ValueError("–¢–µ—Å—Ç–æ–≤–∞—è –æ—à–∏–±–∫–∞")
        except ValueError:
            print("   ‚ùå –û—à–∏–±–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø–µ—Ä–µ—Ö–≤–∞—á–µ–Ω–∞")
        
        tracer.complete_trace(trace_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        trace = tracer.get_trace(trace_id)
        if trace:
            print(f"üìä –°–æ–±—ã—Ç–∏–π –ø–æ—Å–ª–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π: {len(trace.events)}")
            for i, event in enumerate(trace.events):
                status = "‚úÖ" if event.success else "‚ùå"
                error_info = f" (–æ—à–∏–±–∫–∞: {event.error})" if event.error else ""
                print(f"   {i+1}. {status} {event.step.value}: {event.duration_ms:.1f}ms{error_info}")
        
        return TestResult("context_manager", True)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞: {e}")
        return TestResult("context_manager", False, error=str(e))

def test_user_traces():
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    print("\nüß™ –¢–µ—Å—Ç 6: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    
    try:
        tracer = RequestTracer()
        
        # –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        user1_traces = []
        user2_traces = []
        
        for i in range(3):
            trace_id1 = tracer.create_trace(f"user_1", metadata={"request": i+1})
            user1_traces.append(trace_id1)
            tracer.complete_trace(trace_id1)
            
            trace_id2 = tracer.create_trace(f"user_2", metadata={"request": i+1})
            user2_traces.append(trace_id2)
            tracer.complete_trace(trace_id2)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        user1_results = tracer.get_user_traces("user_1", limit=5)
        user2_results = tracer.get_user_traces("user_2", limit=2)
        
        print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å user_1: {len(user1_results)} —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–æ–∫")
        print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å user_2: {len(user2_results)} —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–æ–∫ (–ª–∏–º–∏—Ç 2)")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É (–Ω–æ–≤—ã–µ –ø–µ—Ä–≤—ã–º–∏)
        if len(user1_results) >= 2:
            first_trace = user1_results[0]
            second_trace = user1_results[1]
            if first_trace.start_time >= second_trace.start_time:
                print("‚úÖ –¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏")
            else:
                print("‚ö†Ô∏è –ü–æ—Ä—è–¥–æ–∫ —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–æ–∫ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º")
        
        return TestResult("user_traces", True)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        return TestResult("user_traces", False, error=str(e))

def test_performance_metrics():
    """–¢–µ—Å—Ç –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    print("\nüß™ –¢–µ—Å—Ç 7: –î–µ—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
    
    try:
        tracer = RequestTracer()
        
        # –°–æ–∑–¥–∞–µ–º —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–µ —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏
        scenarios = [
            ("fast_user", [
                (ComponentType.WEBHOOK, ComponentStep.WEBHOOK_RECEIVED, 1.0),
                (ComponentType.AGENT, ComponentStep.AGENT_PROCESSING, 25.0),
            ], TraceStatus.COMPLETED),
            ("slow_user", [
                (ComponentType.WEBHOOK, ComponentStep.WEBHOOK_RECEIVED, 2.0),
                (ComponentType.AGENT, ComponentStep.AGENT_ROUTING, 10.0),
                (ComponentType.MCP, ComponentStep.TOOL_EXECUTION, 200.0),
                (ComponentType.AGENT, ComponentStep.RESPONSE_GENERATION, 15.0),
            ], TraceStatus.COMPLETED),
            ("error_user", [
                (ComponentType.WEBHOOK, ComponentStep.WEBHOOK_RECEIVED, 1.5),
                (ComponentType.AGENT, ComponentStep.AGENT_PROCESSING, 30.0),
            ], TraceStatus.FAILED),
        ]
        
        for user, events, final_status in scenarios:
            trace_id = tracer.create_trace(user)
            for component, step, duration in events:
                tracer.add_event(trace_id, component, step, duration_ms=duration)
            tracer.complete_trace(trace_id, final_status)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        metrics = tracer.get_performance_metrics()
        
        print("üìä –î–µ—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:")
        print(f"   –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {metrics['total_requests']}")
        print(f"   –£—Å–ø–µ—à–Ω—ã—Ö: {metrics['successful_requests']}")
        print(f"   –ù–µ—É—Å–ø–µ—à–Ω—ã—Ö: {metrics['failed_requests']}")
        print(f"   –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {metrics['success_rate']:.1%}")
        print(f"   –°—Ä–µ–¥–Ω—è—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {metrics['avg_duration_ms']:.1f}ms")
        
        if metrics['component_performance']:
            print("\n   üìä –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º:")
            for component, stats in metrics['component_performance'].items():
                print(f"     {component}:")
                print(f"       - –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {stats['avg_ms']:.1f}ms")
                print(f"       - –û–±—â–µ–µ –≤—Ä–µ–º—è: {stats['total_ms']:.1f}ms")
                print(f"       - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {stats['count']}")
        
        return TestResult("performance_metrics", True)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {e}")
        return TestResult("performance_metrics", False, error=str(e))

def test_cleanup_functionality():
    """–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –æ—á–∏—Å—Ç–∫–∏"""
    print("\nüß™ –¢–µ—Å—Ç 8: –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –æ—á–∏—Å—Ç–∫–∏ —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–æ–∫")
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤—â–∏–∫ —Å –º–∞–ª—ã–º TTL –¥–ª—è —Ç–µ—Å—Ç–∞
        tracer = RequestTracer(max_traces=5, trace_ttl_hours=0)  # TTL = 0 –¥–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏
        
        # –°–æ–∑–¥–∞–µ–º –º–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–æ–∫
        for i in range(8):
            trace_id = tracer.create_trace(f"cleanup_user_{i}")
            tracer.add_event(trace_id, ComponentType.WEBHOOK, ComponentStep.WEBHOOK_RECEIVED, duration_ms=1.0)
            tracer.complete_trace(trace_id)
        
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ 8 —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–æ–∫")
        
        initial_metrics = tracer.get_performance_metrics()
        print(f"üìä –î–æ –æ—á–∏—Å—Ç–∫–∏: {initial_metrics['completed_traces']} –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–æ–∫")
        
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞
        tracer._cleanup_old_traces()
        
        after_metrics = tracer.get_performance_metrics()
        print(f"üìä –ü–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏: {after_metrics['completed_traces']} –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–æ–∫")
        
        if after_metrics['completed_traces'] <= tracer.max_traces:
            print(f"‚úÖ –û—á–∏—Å—Ç–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ (–ª–∏–º–∏—Ç: {tracer.max_traces})")
        else:
            print(f"‚ö†Ô∏è –û—á–∏—Å—Ç–∫–∞ –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        
        return TestResult("cleanup_functionality", True)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –æ—á–∏—Å—Ç–∫–∏: {e}")
        return TestResult("cleanup_functionality", False, error=str(e))

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–ê–ü–£–°–ö –ò–ó–û–õ–ò–†–û–í–ê–ù–ù–´–• –¢–ï–°–¢–û–í –°–ò–°–¢–ï–ú–´ –¢–†–ê–°–°–ò–†–û–í–ö–ò –ó–ê–ü–†–û–°–û–í")
    print("=" * 70)
    
    if not IMPORTS_OK:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏")
        return
    
    # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
    tests = [
        ("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è", test_tracer_initialization),
        ("–°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–æ–∫", test_trace_creation),
        ("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è–º–∏", test_event_management),
        ("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–æ–∫", test_trace_completion),
        ("–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä", test_context_manager),
        ("–¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", test_user_traces),
        ("–ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏", test_performance_metrics),
        ("–û—á–∏—Å—Ç–∫–∞ —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–æ–∫", test_cleanup_functionality),
    ]
    
    results = []
    
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
    for test_name, test_func in tests:
        try:
            if asyncio.iscoroutinefunction(test_func):
                result = await test_func()
            else:
                result = test_func()
            results.append(result)
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ '{test_name}': {e}")
            results.append(TestResult(test_name, False, error=str(e)))
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "=" * 70)
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 70)
    
    successful = 0
    failed = 0
    
    for result in results:
        status = "‚úÖ –£–°–ü–ï–•" if result.success else "‚ùå –û–®–ò–ë–ö–ê"
        error_info = f" - {result.error}" if result.error else ""
        print(f"{status:12} | {result.test_name:25}{error_info}")
        
        if result.success:
            successful += 1
        else:
            failed += 1
    
    print("\n" + "-" * 50)
    print(f"–£—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {successful:2d}")
    print(f"–ù–µ—É—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {failed:2d}")
    
    if failed == 0:
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    else:
        print(f"\n‚ö†Ô∏è –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´ –í {failed} –¢–ï–°–¢–ê–•")
        print("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞")
    
    print("\nüìä –°–∏—Å—Ç–µ–º–∞ —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –≤ –±–æ—Ç–µ")

if __name__ == "__main__":
    asyncio.run(main())