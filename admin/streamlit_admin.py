import streamlit as st
import json
import os
import sys
from datetime import datetime

sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from admin.config import INSTRUCTION_FILE, DEFAULT_INSTRUCTION, STREAMLIT_CONFIG
from admin.auth import check_password
from admin.deploy_integration import DeployManager, show_deploy_status


def load_instruction():
    try:
        with open(INSTRUCTION_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    except FileNotFoundError:
        default_data = DEFAULT_INSTRUCTION.copy()
        default_data["last_updated"] = datetime.now().isoformat()
        return default_data


def save_instruction(instruction_data):
    try:
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
        if not isinstance(instruction_data, dict):
            raise ValueError("–î–∞–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–ª–æ–≤–∞—Ä–µ–º")
        
        required_fields = ['system_instruction', 'welcome_message']
        for field in required_fields:
            if field not in instruction_data:
                raise ValueError(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ: {field}")
            if not isinstance(instruction_data[field], str):
                raise ValueError(f"–ü–æ–ª–µ {field} –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã –ø–æ–ª–µ–π
        if len(instruction_data['system_instruction']) < 10:
            raise ValueError("–°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∞—è (–º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤)")
        if len(instruction_data['welcome_message']) < 5:
            raise ValueError("–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ (–º–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤)")
        
        instruction_data["last_updated"] = datetime.now().isoformat()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ JSON –≤–∞–ª–∏–¥–Ω—ã–π
        json_str = json.dumps(instruction_data, ensure_ascii=False, indent=2)
        json.loads(json_str)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–∂–Ω–æ –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞—Ç—å
        
        with open(INSTRUCTION_FILE, 'w', encoding='utf-8') as f:
            f.write(json_str)
        return True
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
        return False


def main():
    st.set_page_config(
        page_title=STREAMLIT_CONFIG['page_title'],
        page_icon=STREAMLIT_CONFIG['page_icon'],
        layout=STREAMLIT_CONFIG['layout']
    )
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    if not check_password():
        return
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫  
    st.title("ü§ñ Artyom Integrator - –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –¥–µ–ø–ª–æ—è –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏
    deploy_manager = show_deploy_status()
    
    if not os.path.exists(INSTRUCTION_FILE):
        st.warning("‚ö†Ô∏è –§–∞–π–ª –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏.")
    
    instruction_data = load_instruction()
    
    system_instruction = st.text_area(
        "–°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:",
        value=instruction_data.get("system_instruction", ""),
        height=400
    )
    
    welcome_message = st.text_area(
        "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:",
        value=instruction_data.get("welcome_message", ""),
        height=150
    )
    
    st.markdown("---")
    
    # –°—Ç–∞—Ç—É—Å —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ –≤ –±–æ—Ç–µ
    st.subheader("üìä –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞")
    
    col1, col2 = st.columns(2)
    
    with col1:
        if st.button("üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–º–ø—Ç", use_container_width=True):
            try:
                import requests
                response = requests.get("https://artemintegrator-nahdj.ondigitalocean.app/debug/current-prompt", timeout=10)
                if response.status_code == 200:
                    data = response.json()
                    if "error" not in data:
                        st.success("‚úÖ –ü—Ä–æ–º–ø—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω")
                        
                        # –ö—Ä–∞—Å–∏–≤–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–º–ø—Ç–µ
                        st.markdown("### üìÑ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–º–ø—Ç–µ")
                        
                        col_info1, col_info2 = st.columns(2)
                        with col_info1:
                            st.metric("–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ", data.get("last_updated", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"))
                            st.metric("–°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", f"{data.get('system_instruction_length', 0)} —Å–∏–º–≤–æ–ª–æ–≤")
                        
                        with col_info2:
                            st.metric("–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", f"{data.get('welcome_message_length', 0)} —Å–∏–º–≤–æ–ª–æ–≤")
                            st.metric("–§–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç", "‚úÖ" if data.get("exists", False) else "‚ùå")
                        
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏
                        with st.expander("üîç –î–µ—Ç–∞–ª–∏"):
                            st.json(data)
                    else:
                        st.error(f"‚ùå –û—à–∏–±–∫–∞: {data['error']}")
                        if st.checkbox("–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏"):
                            st.json(data)
                else:
                    st.error(f"‚ùå HTTP {response.status_code}")
            except Exception as e:
                st.error(f"‚ùå –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–æ—Ç—É: {e}")
    
    with col2:
        if st.button("üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ–º–ø—Ç", use_container_width=True):
            try:
                import requests
                
                # –ü–æ–ª—É—á–∞–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–π —Ç–æ–∫–µ–Ω –∏–∑ secrets
                admin_token = st.secrets.get("ADMIN_TOKEN", "secure-admin-token")
                
                headers = {
                    "X-Admin-Token": admin_token,
                    "Content-Type": "application/json"
                }
                
                response = requests.post(
                    "https://artemintegrator-nahdj.ondigitalocean.app/admin/reload-prompt", 
                    headers=headers,
                    timeout=10
                )
                
                if response.status_code == 200:
                    data = response.json()
                    if data.get("changed"):
                        st.success(f"‚úÖ –ü—Ä–æ–º–ø—Ç –æ–±–Ω–æ–≤–ª–µ–Ω")
                        st.info(f"üìÖ –°—Ç–∞—Ä–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {data.get('old_updated', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
                        st.info(f"üìÖ –ù–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {data.get('new_updated', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
                    else:
                        st.info("üìù –ü—Ä–æ–º–ø—Ç –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)")
                        
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
                    with st.expander("üîç –î–µ—Ç–∞–ª–∏ –æ—Ç–≤–µ—Ç–∞"):
                        st.json(data)
                        
                elif response.status_code == 403:
                    st.error("‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: –Ω–µ–≤–µ—Ä–Ω—ã–π –∞–¥–º–∏–Ω—Å–∫–∏–π —Ç–æ–∫–µ–Ω")
                    st.info("üîë –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É ADMIN_TOKEN –≤ secrets")
                elif response.status_code == 404:
                    st.error("‚ùå –ê–¥–º–∏–Ω—Å–∫–∏–µ endpoints –æ—Ç–∫–ª—é—á–µ–Ω—ã")
                    st.info("‚öôÔ∏è –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã")
                else:
                    st.error(f"‚ùå HTTP {response.status_code}")
                    try:
                        error_data = response.json()
                        st.error(f"–î–µ—Ç–∞–ª–∏: {error_data.get('detail', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
                    except:
                        st.error(f"–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response.text[:200]}")
                        
            except Exception as e:
                st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏: {e}")
                st.info("üåê –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É")
    
    st.markdown("---")
    
    if st.button("üöÄ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", type="primary", use_container_width=True):
        new_instruction_data = {
            "system_instruction": system_instruction,
            "welcome_message": welcome_message,
            "last_updated": datetime.now().isoformat()
        }
        
        if save_instruction(new_instruction_data):
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –¥–µ–ø–ª–æ–π —á–µ—Ä–µ–∑ GitHub API
            commit_message = f"Update bot instructions via admin panel\n\n- Modified system instruction\n- Updated welcome message\n- Last updated: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n\nü§ñ Generated with [Claude Code](https://claude.ai/code)\n\nCo-Authored-By: Claude <noreply@anthropic.com>"
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ JSON –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ GitHub API
            instruction_json = json.dumps(new_instruction_data, ensure_ascii=False, indent=2)
            
            deploy_manager.auto_deploy_changes(commit_message, instruction_json)
            st.balloons()


if __name__ == "__main__":
    main()