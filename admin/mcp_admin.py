"""
MCP Admin Panel - Streamlit –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è MCP

–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —É–¥–æ–±–Ω—ã–π –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è:
- –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è MCP —Å–µ—Ä–≤–µ—Ä–æ–≤
- –í—ã–ø–æ–ª–Ω–µ–Ω–∏—è SQL –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ Supabase
- –£–ø—Ä–∞–≤–ª–µ–Ω–∏—è DigitalOcean –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è–º–∏
- –ü–æ–∏—Å–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Context7
- –ü—Ä–æ—Å–º–æ—Ç—Ä–∞ –º–µ—Ç—Ä–∏–∫ –∏ –ª–æ–≥–æ–≤
"""

import streamlit as st
import asyncio
import json
import pandas as pd
from datetime import datetime, timedelta
import plotly.express as px
import plotly.graph_objects as go
from typing import Dict, Any, List, Optional
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω—é –ø—Ä–æ–µ–∫—Ç–∞
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å MCP
try:
    from bot.mcp_agent import MCPAgent
    from bot.mcp_manager import MCPManager
    from bot.services.mcp_service import MCPServiceFactory
    from bot.config import MCP_ENABLED, ANTHROPIC_API_KEY, OPENAI_API_KEY
    from bot.config import MCP_SUPABASE_ENABLED, MCP_DIGITALOCEAN_ENABLED, MCP_CONTEXT7_ENABLED
    MCP_AVAILABLE = True
except ImportError as e:
    MCP_AVAILABLE = False
    MCP_ENABLED = False
    st.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ MCP –º–æ–¥—É–ª–µ–π: {e}")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="üîå MCP Admin Panel",
    page_icon="üîå",
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS —Å—Ç–∏–ª–∏
st.markdown("""
<style>
    .stMetric {
        background-color: #f0f2f6;
        padding: 15px;
        border-radius: 10px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }
    .success-box {
        background-color: #d4edda;
        color: #155724;
        padding: 10px;
        border-radius: 5px;
        margin: 10px 0;
    }
    .error-box {
        background-color: #f8d7da;
        color: #721c24;
        padding: 10px;
        border-radius: 5px;
        margin: 10px 0;
    }
    .info-box {
        background-color: #d1ecf1;
        color: #0c5460;
        padding: 10px;
        border-radius: 5px;
        margin: 10px 0;
    }
    .stButton > button {
        width: 100%;
        background-color: #007bff;
        color: white;
        border: none;
        padding: 10px;
        border-radius: 5px;
        cursor: pointer;
        transition: background-color 0.3s;
    }
    .stButton > button:hover {
        background-color: #0056b3;
    }
</style>
""", unsafe_allow_html=True)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è session state
if 'mcp_manager' not in st.session_state:
    st.session_state.mcp_manager = None
    st.session_state.mcp_agent = None
    st.session_state.service_factory = None
    st.session_state.initialized = False
    st.session_state.sql_history = []
    st.session_state.deployment_history = []
    st.session_state.current_project = None
    st.session_state.current_app = None

async def initialize_mcp():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MCP –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
    if not MCP_AVAILABLE or not MCP_ENABLED:
        return False
    
    try:
        # –°–æ–∑–¥–∞–µ–º MCP Manager
        mcp_manager = MCPManager()
        await mcp_manager.initialize()
        
        # –°–æ–∑–¥–∞–µ–º MCP Agent
        mcp_agent = MCPAgent(
            openai_key=OPENAI_API_KEY,
            anthropic_key=ANTHROPIC_API_KEY,
            mcp_manager=mcp_manager
        )
        
        # –°–æ–∑–¥–∞–µ–º Service Factory
        service_factory = MCPServiceFactory(mcp_manager)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ session state
        st.session_state.mcp_manager = mcp_manager
        st.session_state.mcp_agent = mcp_agent
        st.session_state.service_factory = service_factory
        st.session_state.initialized = True
        
        return True
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ MCP: {e}")
        return False

def format_time_ago(timestamp: datetime) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è –≤ —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç"""
    now = datetime.now()
    diff = now - timestamp
    
    if diff < timedelta(minutes=1):
        return "—Ç–æ–ª—å–∫–æ —á—Ç–æ"
    elif diff < timedelta(hours=1):
        minutes = int(diff.total_seconds() / 60)
        return f"{minutes} –º–∏–Ω. –Ω–∞–∑–∞–¥"
    elif diff < timedelta(days=1):
        hours = int(diff.total_seconds() / 3600)
        return f"{hours} —á. –Ω–∞–∑–∞–¥"
    else:
        days = diff.days
        return f"{days} –¥–Ω. –Ω–∞–∑–∞–¥"

def display_server_status(status: Dict[str, Any]):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å—Ç–∞—Ç—É—Å MCP —Å–µ—Ä–≤–µ—Ä–æ–≤"""
    st.header("üìä –°—Ç–∞—Ç—É—Å MCP —Å–µ—Ä–≤–µ—Ä–æ–≤")
    
    if not status.get("mcp_enabled"):
        st.error("‚ùå MCP –æ—Ç–∫–ª—é—á–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        return
    
    servers = status.get("servers", {})
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        supabase_status = servers.get("supabase", {})
        if supabase_status.get("enabled"):
            st.success("‚úÖ Supabase")
            st.metric("–§—É–Ω–∫—Ü–∏–π", supabase_status.get("functions_count", 0))
        else:
            st.error("‚ùå Supabase –æ—Ç–∫–ª—é—á–µ–Ω")
    
    with col2:
        do_status = servers.get("digitalocean", {})
        if do_status.get("enabled"):
            st.success("‚úÖ DigitalOcean")
            st.metric("–§—É–Ω–∫—Ü–∏–π", do_status.get("functions_count", 0))
        else:
            st.error("‚ùå DigitalOcean –æ—Ç–∫–ª—é—á–µ–Ω")
    
    with col3:
        ctx7_status = servers.get("context7", {})
        if ctx7_status.get("enabled"):
            st.success("‚úÖ Context7")
            st.metric("–§—É–Ω–∫—Ü–∏–π", ctx7_status.get("functions_count", 0))
        else:
            st.error("‚ùå Context7 –æ—Ç–∫–ª—é—á–µ–Ω")

def display_metrics(metrics: Dict[str, Any]):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è MCP"""
    st.header("üìà –ú–µ—Ç—Ä–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è")
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric("–í—Å–µ–≥–æ –≤—ã–∑–æ–≤–æ–≤", metrics.get("total_calls", 0))
    
    with col2:
        successful = metrics.get("total_successful", 0)
        st.metric("–£—Å–ø–µ—à–Ω—ã—Ö", successful, delta=None)
    
    with col3:
        failed = metrics.get("total_failed", 0)
        st.metric("–û—à–∏–±–æ–∫", failed, delta=None)
    
    with col4:
        avg_time = metrics.get("average_execution_time", 0)
        st.metric("–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è", f"{avg_time:.2f}—Å")
    
    # –ì—Ä–∞—Ñ–∏–∫ –ø–æ —Å–µ—Ä–≤–µ—Ä–∞–º
    servers_data = metrics.get("servers", {})
    if servers_data:
        st.subheader("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–µ—Ä–≤–µ—Ä–∞–º")
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
        server_names = []
        calls_count = []
        
        for server_name, server_metrics in servers_data.items():
            server_names.append(server_name.capitalize())
            calls_count.append(server_metrics.get("total_calls", 0))
        
        # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
        fig = px.bar(
            x=server_names,
            y=calls_count,
            labels={'x': '–°–µ—Ä–≤–µ—Ä', 'y': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–∑–æ–≤–æ–≤'},
            title="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–æ–≤"
        )
        st.plotly_chart(fig)

async def supabase_tab():
    """–í–∫–ª–∞–¥–∫–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Supabase"""
    st.header("üóÑÔ∏è Supabase Manager")
    
    if not MCP_SUPABASE_ENABLED:
        st.warning("‚ö†Ô∏è Supabase –Ω–µ –≤–∫–ª—é—á–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        return
    
    supabase_service = st.session_state.service_factory.get_supabase_service()
    
    # –í—ã–±–æ—Ä –ø—Ä–æ–µ–∫—Ç–∞
    st.subheader("üìÇ –ü—Ä–æ–µ–∫—Ç—ã")
    
    if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤"):
        with st.spinner("–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤..."):
            result = await supabase_service.list_projects()
            if result["success"]:
                projects = result["projects"]
                st.session_state.projects = projects
                st.success(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(projects)} –ø—Ä–æ–µ–∫—Ç–æ–≤")
            else:
                st.error(result["message"])
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–æ–≤
    if hasattr(st.session_state, 'projects'):
        project_names = [p["name"] for p in st.session_state.projects]
        selected_project = st.selectbox(
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç",
            options=range(len(project_names)),
            format_func=lambda x: project_names[x]
        )
        
        if selected_project is not None:
            project = st.session_state.projects[selected_project]
            st.session_state.current_project = project["id"]
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ
            col1, col2 = st.columns(2)
            with col1:
                st.info(f"**ID:** `{project['id']}`")
            with col2:
                st.info(f"**–†–µ–≥–∏–æ–Ω:** {project.get('region', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
    
    # SQL –∑–∞–ø—Ä–æ—Å—ã
    if st.session_state.current_project:
        st.subheader("üîç SQL –∑–∞–ø—Ä–æ—Å—ã")
        
        # SQL —Ä–µ–¥–∞–∫—Ç–æ—Ä
        sql_query = st.text_area(
            "SQL –∑–∞–ø—Ä–æ—Å",
            height=150,
            placeholder="SELECT * FROM users LIMIT 10;"
        )
        
        col1, col2 = st.columns([3, 1])
        
        with col1:
            if st.button("‚ñ∂Ô∏è –í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å", type="primary"):
                if sql_query:
                    with st.spinner("–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞..."):
                        result = await supabase_service.execute_sql(
                            st.session_state.current_project,
                            sql_query
                        )
                        
                        if result["success"]:
                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
                            st.session_state.sql_history.append({
                                "query": sql_query,
                                "timestamp": datetime.now(),
                                "rows_count": len(result.get("rows", [])),
                                "execution_time": result.get("execution_time", 0)
                            })
                            
                            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                            st.success(f"‚úÖ –ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω –∑–∞ {result['execution_time']:.2f}—Å")
                            
                            rows = result.get("rows", [])
                            if rows:
                                df = pd.DataFrame(rows)
                                st.dataframe(df, use_container_width=True)
                            else:
                                st.info("–ó–∞–ø—Ä–æ—Å –Ω–µ –≤–µ—Ä–Ω—É–ª –¥–∞–Ω–Ω—ã—Ö")
                            
                            if result.get("affected_rows"):
                                st.info(f"–ó–∞—Ç—Ä–æ–Ω—É—Ç–æ —Å—Ç—Ä–æ–∫: {result['affected_rows']}")
                        else:
                            st.error(result["message"])
                else:
                    st.warning("–í–≤–µ–¥–∏—Ç–µ SQL –∑–∞–ø—Ä–æ—Å")
        
        with col2:
            # –ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
            if st.button("üìú –ò—Å—Ç–æ—Ä–∏—è"):
                if st.session_state.sql_history:
                    st.subheader("–ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤")
                    for item in reversed(st.session_state.sql_history[-10:]):
                        with st.expander(
                            f"{format_time_ago(item['timestamp'])} - {item['rows_count']} —Å—Ç—Ä–æ–∫"
                        ):
                            st.code(item['query'], language='sql')
                            st.caption(f"–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {item['execution_time']:.2f}—Å")
                else:
                    st.info("–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞")
        
        # –¢–∞–±–ª–∏—Ü—ã
        st.subheader("üìä –¢–∞–±–ª–∏—Ü—ã")
        
        if st.button("üîÑ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü"):
            with st.spinner("–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–∞–±–ª–∏—Ü..."):
                result = await supabase_service.list_tables(
                    st.session_state.current_project,
                    schemas=["public"]
                )
                
                if result["success"]:
                    tables = result["tables"]
                    if tables:
                        df = pd.DataFrame(tables)
                        st.dataframe(df, use_container_width=True)
                    else:
                        st.info("–¢–∞–±–ª–∏—Ü—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                else:
                    st.error(result["message"])

async def digitalocean_tab():
    """–í–∫–ª–∞–¥–∫–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å DigitalOcean"""
    st.header("üåä DigitalOcean Manager")
    
    if not MCP_DIGITALOCEAN_ENABLED:
        st.warning("‚ö†Ô∏è DigitalOcean –Ω–µ –≤–∫–ª—é—á–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        return
    
    do_service = st.session_state.service_factory.get_digitalocean_service()
    
    # –°–ø–∏—Å–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
    st.subheader("üöÄ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
    
    if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π"):
        with st.spinner("–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π..."):
            result = await do_service.list_apps()
            if result["success"]:
                apps = result["apps"]
                st.session_state.apps = apps
                st.success(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(apps)} –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π")
            else:
                st.error(result["message"])
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
    if hasattr(st.session_state, 'apps'):
        for app in st.session_state.apps:
            status_emoji = {
                "active": "üü¢",
                "deploying": "üöÄ",
                "error": "üî¥",
                "building": "üî®"
            }.get(app.get("status", ""), "‚ö™")
            
            with st.expander(f"{status_emoji} {app['name']}"):
                col1, col2 = st.columns(2)
                
                with col1:
                    st.info(f"**ID:** `{app['id']}`")
                    st.info(f"**–°—Ç–∞—Ç—É—Å:** {app.get('status', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
                
                with col2:
                    # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
                    if st.button(f"üöÄ –î–µ–ø–ª–æ–π", key=f"deploy_{app['id']}"):
                        with st.spinner("–ó–∞–ø—É—Å–∫ –¥–µ–ø–ª–æ—è..."):
                            result = await do_service.create_deployment(app['id'])
                            if result["success"]:
                                st.success(result["message"])
                                st.session_state.deployment_history.append({
                                    "app_id": app['id'],
                                    "app_name": app['name'],
                                    "deployment_id": result["deployment_id"],
                                    "timestamp": datetime.now()
                                })
                            else:
                                st.error(result["message"])
                    
                    if st.button(f"üìã –õ–æ–≥–∏", key=f"logs_{app['id']}"):
                        st.session_state.current_app = app['id']
                        st.session_state.show_logs = True
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ª–æ–≥–æ–≤
    if hasattr(st.session_state, 'show_logs') and st.session_state.show_logs:
        st.subheader("üìã –õ–æ–≥–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
        
        log_type = st.selectbox(
            "–¢–∏–ø –ª–æ–≥–æ–≤",
            options=["RUN", "BUILD", "DEPLOY"],
            index=0
        )
        
        if st.button("üîÑ –ó–∞–≥—Ä—É–∑–∏—Ç—å –ª–æ–≥–∏"):
            with st.spinner("–ó–∞–≥—Ä—É–∑–∫–∞ –ª–æ–≥–æ–≤..."):
                result = await do_service.get_app_logs(
                    st.session_state.current_app,
                    log_type
                )
                
                if result["success"]:
                    logs = result["logs"]
                    if logs:
                        st.text_area(
                            f"–õ–æ–≥–∏ {log_type}",
                            value=logs,
                            height=400
                        )
                    else:
                        st.info("–õ–æ–≥–∏ –ø—É—Å—Ç—ã")
                else:
                    st.error(result["message"])
        
        if st.button("‚ùå –ó–∞–∫—Ä—ã—Ç—å –ª–æ–≥–∏"):
            st.session_state.show_logs = False
            st.rerun()
    
    # –ò—Å—Ç–æ—Ä–∏—è –¥–µ–ø–ª–æ–µ–≤
    if st.session_state.deployment_history:
        st.subheader("üìú –ò—Å—Ç–æ—Ä–∏—è –¥–µ–ø–ª–æ–µ–≤")
        
        for item in reversed(st.session_state.deployment_history[-5:]):
            st.info(
                f"üöÄ {item['app_name']} - "
                f"{format_time_ago(item['timestamp'])} - "
                f"ID: `{item['deployment_id']}`"
            )

async def context7_tab():
    """–í–∫–ª–∞–¥–∫–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Context7"""
    st.header("üìö Context7 Documentation")
    
    if not MCP_CONTEXT7_ENABLED:
        st.warning("‚ö†Ô∏è Context7 –Ω–µ –≤–∫–ª—é—á–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        return
    
    ctx7_service = st.session_state.service_factory.get_context7_service()
    
    # –ü–æ–∏—Å–∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
    st.subheader("üîç –ü–æ–∏—Å–∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏")
    
    col1, col2 = st.columns([2, 1])
    
    with col1:
        library_name = st.text_input(
            "–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞",
            placeholder="react, nextjs, supabase..."
        )
    
    with col2:
        search_query = st.text_input(
            "–ó–∞–ø—Ä–æ—Å",
            placeholder="hooks, routing, auth..."
        )
    
    if st.button("üîç –ò—Å–∫–∞—Ç—å", type="primary"):
        if library_name and search_query:
            with st.spinner("–ü–æ–∏—Å–∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏..."):
                result = await ctx7_service.search_docs(
                    library_name,
                    search_query,
                    limit=10
                )
                
                if result["success"]:
                    results = result["results"]
                    st.success(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
                    
                    for i, doc in enumerate(results, 1):
                        with st.expander(f"{i}. {doc.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}"):
                            if doc.get("snippet"):
                                st.markdown(doc["snippet"])
                            
                            if doc.get("url"):
                                st.markdown(f"[üîó –ß–∏—Ç–∞—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é]({doc['url']})")
                else:
                    st.error(result["message"])
        else:
            st.warning("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è")
    
    # –ü—Ä–∏–º–µ—Ä—ã –∫–æ–¥–∞
    st.subheader("üíª –ü—Ä–∏–º–µ—Ä—ã –∫–æ–¥–∞")
    
    col1, col2, col3 = st.columns([2, 1, 1])
    
    with col1:
        example_library = st.text_input(
            "–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è –ø—Ä–∏–º–µ—Ä–æ–≤",
            placeholder="react, vue, express..."
        )
    
    with col2:
        example_topic = st.text_input(
            "–¢–µ–º–∞",
            placeholder="authentication, routing..."
        )
    
    with col3:
        language = st.selectbox(
            "–Ø–∑—ã–∫",
            options=["javascript", "typescript", "python", "go"],
            index=0
        )
    
    if st.button("üíª –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–º–µ—Ä—ã"):
        if example_library and example_topic:
            with st.spinner("–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏–º–µ—Ä–æ–≤..."):
                result = await ctx7_service.get_code_examples(
                    example_library,
                    example_topic,
                    language
                )
                
                if result["success"]:
                    examples = result["examples"]
                    if examples:
                        for example in examples:
                            with st.expander(example.get("title", "–ü—Ä–∏–º–µ—Ä")):
                                if example.get("description"):
                                    st.markdown(example["description"])
                                
                                if example.get("code"):
                                    st.code(
                                        example["code"],
                                        language=example.get("language", "javascript")
                                    )
                    else:
                        st.info("–ü—Ä–∏–º–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                else:
                    st.error(result["message"])
        else:
            st.warning("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è")

async def monitoring_tab():
    """–í–∫–ª–∞–¥–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    st.header("üîç –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞")
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
    if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å", type="primary"):
        if st.session_state.mcp_agent:
            with st.spinner("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞..."):
                status = await st.session_state.mcp_agent.get_status()
                metrics = st.session_state.mcp_manager.get_metrics()
                
                display_server_status(status)
                display_metrics(metrics)
        else:
            st.error("MCP Agent –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    # Health Check
    st.subheader("üè• Health Check")
    
    if st.button("üè• –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ —Å–µ—Ä–≤–µ—Ä–æ–≤"):
        if st.session_state.mcp_manager:
            with st.spinner("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤..."):
                col1, col2, col3 = st.columns(3)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —Å–µ—Ä–≤–µ—Ä
                servers = ["supabase", "digitalocean", "context7"]
                for i, server in enumerate(servers):
                    connection = st.session_state.mcp_manager._get_connection(server)
                    if connection:
                        is_healthy = await connection.health_check()
                        
                        with [col1, col2, col3][i]:
                            if is_healthy:
                                st.success(f"‚úÖ {server.capitalize()}")
                            else:
                                st.error(f"‚ùå {server.capitalize()}")
                    else:
                        with [col1, col2, col3][i]:
                            st.warning(f"‚ö†Ô∏è {server.capitalize()} –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω")
    
    # –ö—ç—à —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    st.subheader("üíæ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞")
    
    if st.session_state.mcp_manager:
        cache_stats = st.session_state.mcp_manager._cache_stats()
        
        col1, col2, col3 = st.columns(3)
        
        with col1:
            st.metric("–†–∞–∑–º–µ—Ä –∫—ç—à–∞", cache_stats["size"])
        
        with col2:
            st.metric("–ü–æ–ø–∞–¥–∞–Ω–∏–π", cache_stats["hits"])
        
        with col3:
            st.metric("–ü—Ä–æ–º–∞—Ö–æ–≤", cache_stats["misses"])
        
        if cache_stats["size"] > 0:
            hit_rate = (cache_stats["hits"] / (cache_stats["hits"] + cache_stats["misses"])) * 100
            st.info(f"üìä Hit Rate: {hit_rate:.1f}%")
        
        if st.button("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à"):
            st.session_state.mcp_manager._clear_cache()
            st.success("‚úÖ –ö—ç—à –æ—á–∏—â–µ–Ω")

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def main():
    st.title("üîå MCP Admin Panel")
    st.markdown("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Model Context Protocol —Å–µ—Ä–≤–µ—Ä–∞–º–∏")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ MCP
    if not MCP_AVAILABLE:
        st.error("‚ùå MCP –º–æ–¥—É–ª–∏ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∫—É –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π.")
        return
    
    if not MCP_ENABLED:
        st.warning("‚ö†Ô∏è MCP –æ—Ç–∫–ª—é—á–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (MCP_ENABLED=false)")
        return
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MCP –µ—Å–ª–∏ –µ—â–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
    if not st.session_state.initialized:
        with st.spinner("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MCP..."):
            success = await initialize_mcp()
            if not success:
                st.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å MCP")
                return
    
    # –ë–æ–∫–æ–≤–æ–µ –º–µ–Ω—é
    with st.sidebar:
        st.header("üîå MCP Control Panel")
        
        # –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        if st.session_state.initialized:
            st.success("‚úÖ MCP –ø–æ–¥–∫–ª—é—á–µ–Ω")
        else:
            st.error("‚ùå MCP –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω")
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        st.subheader("‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è")
        st.info(f"**Anthropic API:** {'‚úÖ' if ANTHROPIC_API_KEY else '‚ùå'}")
        st.info(f"**OpenAI API:** {'‚úÖ' if OPENAI_API_KEY else '‚ùå'}")
        
        # –ù–∞–≤–∏–≥–∞—Ü–∏—è
        st.subheader("üìç –ù–∞–≤–∏–≥–∞—Ü–∏—è")
        page = st.radio(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª",
            options=[
                "üîç –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥",
                "üóÑÔ∏è Supabase",
                "üåä DigitalOcean",
                "üìö Context7"
            ],
            index=0
        )
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    if page == "üîç –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥":
        await monitoring_tab()
    elif page == "üóÑÔ∏è Supabase":
        await supabase_tab()
    elif page == "üåä DigitalOcean":
        await digitalocean_tab()
    elif page == "üìö Context7":
        await context7_tab()
    
    # Footer
    st.markdown("---")
    st.caption("ü§ñ Artem Integrator MCP Admin Panel v1.0")

# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    asyncio.run(main())