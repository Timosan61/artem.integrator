#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã /mcp apps –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —ç–º—É–ª—è—Ü–∏–∏
"""

import asyncio
import logging
import sys
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Ñ–∞–π–ª
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('mcp_test.log'),
        logging.StreamHandler()
    ]
)

sys.path.insert(0, str(Path(__file__).parent))

from dotenv import load_dotenv
load_dotenv()

from bot.services.claude_code_service import ClaudeCodeService

async def test_mcp_apps():
    """–¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã /mcp apps"""
    
    print("\nüß™ –¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã /mcp apps")
    print("=" * 50)
    
    service = ClaudeCodeService()
    
    from bot.services.claude_code_service import CLAUDE_CODE_SDK_AVAILABLE
    print(f"‚úÖ SDK –¥–æ—Å—Ç—É–ø–µ–Ω: {CLAUDE_CODE_SDK_AVAILABLE}")
    print(f"‚úÖ MCP –≤–∫–ª—é—á–µ–Ω: {service.enabled}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É
    result = await service.execute_mcp_command("/mcp apps")
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç:")
    print(f"   - –£—Å–ø–µ—à–Ω–æ: {result.get('success')}")
    print(f"   - –û—à–∏–±–∫–∞: {result.get('error', '–ù–µ—Ç')}")
    
    response = result.get('response', '')
    print(f"\nüìÑ –û—Ç–≤–µ—Ç:")
    print("-" * 50)
    print(response)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —ç–º—É–ª—è—Ü–∏—é
    if "Emulated" in response or "‚ö†Ô∏è" in response:
        print("\n‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ü–æ–ª—É—á–µ–Ω —ç–º—É–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç!")
    else:
        print("\n‚úÖ –ü–æ–ª—É—á–µ–Ω —Ä–µ–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç MCP")

if __name__ == "__main__":
    asyncio.run(test_mcp_apps())