#!/usr/bin/env python3
"""
–ü—Ä—è–º–æ–π —Ç–µ—Å—Ç Claude Code Service
"""
import asyncio
import logging
from bot.services.claude_code_service import ClaudeCodeService

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

async def test_mcp_apps():
    """–¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã MCP apps –Ω–∞–ø—Ä—è–º—É—é"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Claude Code Service –Ω–∞–ø—Ä—è–º—É—é")
    print("-" * 60)
    
    # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å
    service = ClaudeCodeService()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–µ—Ä–≤–∏—Å –≤–∫–ª—é—á–µ–Ω
    print(f"‚úÖ Service enabled: {service.enabled}")
    print(f"üìÅ Config path: {service.mcp_config_path}")
    print(f"üîë API key set: {bool(service.api_key)}")
    print("-" * 60)
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É
    print("üöÄ Executing /mcp apps...")
    result = await service.execute_mcp_command("/mcp apps", "test_user")
    
    print("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç:")
    print(f"Success: {result.get('success')}")
    print(f"Response length: {len(result.get('response', ''))}")
    print(f"Has error: {bool(result.get('error'))}")
    print(f"Message count: {result.get('message_count', 0)}")
    
    print("\nüìù Response:")
    print("-" * 60)
    print(result.get('response', 'No response'))
    print("-" * 60)
    
    if result.get('error'):
        print(f"\n‚ùå Error: {result.get('error')}")
    
    if result.get('data'):
        print(f"\nüì¶ Data: {result.get('data')}")

if __name__ == "__main__":
    asyncio.run(test_mcp_apps())