#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã fallback —Å –Ω–∞—Å—Ç–æ—è—â–∏–º–∏ API –∫–ª—é—á–∞–º–∏
"""
import asyncio
import os
import sys
from pathlib import Path
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º .env —Ñ–∞–π–ª
load_dotenv()

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.append(str(Path(__file__).parent))

from agent.core.intelligent_agent import IntelligentAgent

async def test_with_real_keys():
    """–¢–µ—Å—Ç —Å –Ω–∞—Å—Ç–æ—è—â–∏–º–∏ API –∫–ª—é—á–∞–º–∏"""
    
    # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∫–ª—é—á–∏ –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    openai_key = os.getenv("OPENAI_API_KEY")
    anthropic_key = os.getenv("ANTHROPIC_API_KEY")
    
    print("üîë API –∫–ª—é—á–∏:")
    print(f"  OpenAI: {'‚úÖ –ï—Å—Ç—å' if openai_key else '‚ùå –ù–µ—Ç'}")
    print(f"  Anthropic: {'‚úÖ –ï—Å—Ç—å' if anthropic_key else '‚ùå –ù–µ—Ç'}")
    
    if not anthropic_key:
        print("‚ùå Anthropic –∫–ª—é—á –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è —ç—Ç–æ–≥–æ —Ç–µ—Å—Ç–∞")
        return False
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∞–≥–µ–Ω—Ç–∞
        agent = IntelligentAgent(
            api_key=openai_key or "sk-invalid_key_for_testing",
            model="gpt-4o-mini",
            anthropic_api_key=anthropic_key
        )
        
        print("\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...")
        
        response = await agent.process_message(
            message="–ü—Ä–æ—Å—Ç–æ —Å–∫–∞–∂–∏ '–ü—Ä–∏–≤–µ—Ç –æ—Ç —Å–∏—Å—Ç–µ–º—ã fallback!'",
            user_id="test_user"
        )
        
        print(f"\nüìù –û—Ç–≤–µ—Ç: {response.message}")
        print(f"üìä –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {response.confidence}")
        print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤: {agent.provider_stats}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫–æ–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä —Å—Ä–∞–±–æ—Ç–∞–ª
        if agent.provider_stats["openai_calls"] > 0:
            print("‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ OpenAI")
        elif agent.provider_stats["anthropic_calls"] > 0:
            print("‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ Anthropic (fallback)")
        elif agent.provider_stats["claude_sdk_calls"] > 0:
            print("‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ Claude SDK (fallback)")
        else:
            print("‚ùå –ù–∏ –æ–¥–∏–Ω –ø—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª")
            return False
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

async def main():
    print("üöÄ === –ë–´–°–¢–†–´–ô –¢–ï–°–¢ –°–ò–°–¢–ï–ú–´ FALLBACK ===")
    
    success = await test_with_real_keys()
    
    if success:
        print("\nüéâ –°–∏—Å—Ç–µ–º–∞ fallback —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
    else:
        print("\n‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–∏—Å—Ç–µ–º–æ–π fallback")

if __name__ == "__main__":
    asyncio.run(main())