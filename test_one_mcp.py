#!/usr/bin/env python
"""
–¢–µ—Å—Ç –æ–¥–Ω–æ–≥–æ MCP –∑–∞–ø—Ä–æ—Å–∞
"""
import asyncio
import os
import sys
sys.path.append('/home/coder/Desktop/2202/artem.integrator')

async def test_one_mcp():
    print("üß™ –¢–µ—Å—Ç –æ–¥–Ω–æ–≥–æ MCP –∑–∞–ø—Ä–æ—Å–∞")
    
    api_key = os.getenv('OPENAI_API_KEY')
    if not api_key:
        print("‚ùå –ù–µ—Ç OPENAI_API_KEY")
        return
    
    from agent.core.intelligent_agent import IntelligentAgent
    
    agent = IntelligentAgent(api_key=api_key)
    
    message = "–∫–∞–∫–∏–µ —É –º–µ–Ω—è –µ—Å—Ç—å mcp —Å–µ—Ä–≤–µ—Ä–∞"
    print(f"üìù –ó–∞–ø—Ä–æ—Å: '{message}'")
    
    try:
        response = await agent.process_message(
            message=message,
            user_id="test_user"
        )
        
        print(f"‚úÖ –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: {response.tool_used}")
        print(f"üìä –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {response.confidence:.2f}")
        print(f"üí¨ –û—Ç–≤–µ—Ç: {response.message[:100]}...")
        
        if response.tool_response:
            print(f"üìã Tool —É—Å–ø–µ—Ö: {response.tool_response.success}")
            if response.tool_response.error:
                print(f"‚ùå Tool –æ—à–∏–±–∫–∞: {response.tool_response.error}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(test_one_mcp())