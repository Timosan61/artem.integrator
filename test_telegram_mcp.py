#!/usr/bin/env python3
"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Telegram –±–æ—Ç–∞ —Å MCP —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç:
1. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã –≤ Telegram –±–æ—Ç
2. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç MCP —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
3. –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç—ã
4. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
"""

import asyncio
import aiohttp
import json
import time
from datetime import datetime
from typing import Dict, List, Optional, Tuple
from dataclasses import dataclass
from colorama import init, Fore, Style

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è colorama –¥–ª—è —Ü–≤–µ—Ç–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞
init(autoreset=True)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
TEST_CONFIG = {
    # Railway webhook URL
    # "webhook_url": "https://web-production-84d8.up.railway.app/webhook",
    
    # –õ–æ–∫–∞–ª—å–Ω—ã–π webhook –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (—á–µ—Ä–µ–∑ ngrok)
    "webhook_url": "https://16bf5c25554f.ngrok-free.app/webhook",
    
    # –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä)
    "admin_user_id": 229838448,
    "admin_username": "aaatema",
    
    # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∫–æ–º–∞–Ω–¥–∞–º–∏ (—Å–µ–∫—É–Ω–¥—ã)
    "command_delay": 2,
    
    # –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ (—Å–µ–∫—É–Ω–¥—ã)
    "response_timeout": 10
}


@dataclass
class TestCase:
    """–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–ª—É—á–∞—è"""
    name: str
    description: str
    message: str
    expected_keywords: List[str]
    mcp_service: Optional[str] = None
    skip_if_no_mcp: bool = False


@dataclass
class TestResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–∞"""
    test_case: TestCase
    success: bool
    response: Optional[str] = None
    error: Optional[str] = None
    execution_time: float = 0.0


class TelegramMCPTester:
    """–ö–ª–∞—Å—Å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Telegram + MCP"""
    
    def __init__(self, config: Dict):
        self.config = config
        self.session = None
        self.results: List[TestResult] = []
        self.update_id = int(time.time() * 1000)
        
    async def __aenter__(self):
        """–í—Ö–æ–¥ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç - —Å–æ–∑–¥–∞–Ω–∏–µ HTTP —Å–µ—Å—Å–∏–∏"""
        self.session = aiohttp.ClientSession()
        return self
        
    async def __aexit__(self, exc_type, exc_val, exc_tb):
        """–í—ã—Ö–æ–¥ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ - –∑–∞–∫—Ä—ã—Ç–∏–µ —Å–µ—Å—Å–∏–∏"""
        if self.session:
            await self.session.close()
    
    def _create_update(self, text: str) -> Dict:
        """–°–æ–∑–¥–∞–µ—Ç Telegram Update –æ–±—ä–µ–∫—Ç"""
        self.update_id += 1
        return {
            "update_id": self.update_id,
            "message": {
                "message_id": self.update_id,
                "from": {
                    "id": self.config["admin_user_id"],
                    "is_bot": False,
                    "first_name": "Test",
                    "username": self.config["admin_username"]
                },
                "chat": {
                    "id": self.config["admin_user_id"],
                    "first_name": "Test",
                    "username": self.config["admin_username"],
                    "type": "private"
                },
                "date": int(time.time()),
                "text": text
            }
        }
    
    async def send_message(self, text: str) -> Tuple[bool, Optional[str]]:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ webhook
        
        Returns:
            Tuple[bool, Optional[str]]: (—É—Å–ø–µ—Ö, —Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏)
        """
        try:
            update = self._create_update(text)
            
            async with self.session.post(
                self.config["webhook_url"],
                json=update,
                timeout=aiohttp.ClientTimeout(total=self.config["response_timeout"])
            ) as response:
                if response.status == 200:
                    return True, None
                else:
                    error_text = await response.text()
                    return False, f"HTTP {response.status}: {error_text}"
                    
        except asyncio.TimeoutError:
            return False, "Timeout waiting for response"
        except Exception as e:
            return False, str(e)
    
    async def run_test(self, test_case: TestCase) -> TestResult:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –æ–¥–∏–Ω —Ç–µ—Å—Ç–æ–≤—ã–π —Å–ª—É—á–∞–π"""
        print(f"\n{Fore.CYAN}‚ñ∂ –¢–µ—Å—Ç: {test_case.name}{Style.RESET_ALL}")
        print(f"  –û–ø–∏—Å–∞–Ω–∏–µ: {test_case.description}")
        print(f"  –ö–æ–º–∞–Ω–¥–∞: {test_case.message}")
        
        start_time = time.time()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        success, error = await self.send_message(test_case.message)
        
        execution_time = time.time() - start_time
        
        if success:
            # –í —Ä–µ–∞–ª—å–Ω–æ–º —Ç–µ—Å—Ç–µ –∑–¥–µ—Å—å –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –±–æ—Ç–∞
            # –°–µ–π—á–∞—Å –ø—Ä–æ—Å—Ç–æ —Å—á–∏—Ç–∞–µ–º —É—Å–ø–µ—à–Ω—ã–º
            print(f"  {Fore.GREEN}‚úì –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ{Style.RESET_ALL}")
            result = TestResult(
                test_case=test_case,
                success=True,
                execution_time=execution_time
            )
        else:
            print(f"  {Fore.RED}‚úó –û—à–∏–±–∫–∞: {error}{Style.RESET_ALL}")
            result = TestResult(
                test_case=test_case,
                success=False,
                error=error,
                execution_time=execution_time
            )
        
        self.results.append(result)
        
        # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∫–æ–º–∞–Ω–¥–∞–º–∏
        await asyncio.sleep(self.config["command_delay"])
        
        return result
    
    async def run_all_tests(self, test_cases: List[TestCase]):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã"""
        print(f"\n{Fore.YELLOW}üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Telegram + MCP{Style.RESET_ALL}")
        print(f"Webhook URL: {self.config['webhook_url']}")
        print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ—Å—Ç–æ–≤: {len(test_cases)}")
        print("=" * 60)
        
        for test_case in test_cases:
            await self.run_test(test_case)
        
        self.print_summary()
    
    def print_summary(self):
        """–í—ã–≤–æ–¥–∏—Ç –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç"""
        print(f"\n{Fore.YELLOW}üìä –ò—Ç–æ–≥–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è{Style.RESET_ALL}")
        print("=" * 60)
        
        total = len(self.results)
        successful = sum(1 for r in self.results if r.success)
        failed = total - successful
        
        print(f"–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total}")
        print(f"{Fore.GREEN}–£—Å–ø–µ—à–Ω—ã—Ö: {successful}{Style.RESET_ALL}")
        print(f"{Fore.RED}–ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {failed}{Style.RESET_ALL}")
        
        if failed > 0:
            print(f"\n{Fore.RED}–ü—Ä–æ–≤–∞–ª–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã:{Style.RESET_ALL}")
            for result in self.results:
                if not result.success:
                    print(f"  - {result.test_case.name}: {result.error}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ MCP —Å–µ—Ä–≤–∏—Å–∞–º
        print(f"\n{Fore.CYAN}–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ MCP —Å–µ—Ä–≤–∏—Å–∞–º:{Style.RESET_ALL}")
        mcp_stats = {}
        for result in self.results:
            if result.test_case.mcp_service:
                service = result.test_case.mcp_service
                if service not in mcp_stats:
                    mcp_stats[service] = {"total": 0, "success": 0}
                mcp_stats[service]["total"] += 1
                if result.success:
                    mcp_stats[service]["success"] += 1
        
        for service, stats in mcp_stats.items():
            success_rate = (stats["success"] / stats["total"]) * 100
            print(f"  {service}: {stats['success']}/{stats['total']} ({success_rate:.0f}%)")
        
        # –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        avg_time = sum(r.execution_time for r in self.results) / len(self.results)
        print(f"\n–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {avg_time:.2f} —Å–µ–∫")
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
        self.save_report()
    
    def save_report(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç—á–µ—Ç –≤ —Ñ–∞–π–ª"""
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        report_file = f"test_report_{timestamp}.json"
        
        report = {
            "timestamp": datetime.now().isoformat(),
            "config": self.config,
            "summary": {
                "total": len(self.results),
                "successful": sum(1 for r in self.results if r.success),
                "failed": sum(1 for r in self.results if not r.success)
            },
            "results": [
                {
                    "test": r.test_case.name,
                    "success": r.success,
                    "error": r.error,
                    "execution_time": r.execution_time
                }
                for r in self.results
            ]
        }
        
        with open(report_file, 'w', encoding='utf-8') as f:
            json.dump(report, f, ensure_ascii=False, indent=2)
        
        print(f"\nüìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_file}")


# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–ª—É—á–∞–µ–≤
TEST_CASES = [
    # –ë–∞–∑–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã
    TestCase(
        name="Start Command",
        description="–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start",
        message="/start",
        expected_keywords=["–ü—Ä–∏–≤–µ—Ç", "–ø–æ–º–æ—â–Ω–∏–∫"]
    ),
    
    TestCase(
        name="Help Command",
        description="–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help",
        message="/help",
        expected_keywords=["–∫–æ–º–∞–Ω–¥—ã", "–ø–æ–º–æ—â—å"]
    ),
    
    # MCP Supabase —Ç–µ—Å—Ç—ã
    TestCase(
        name="MCP List Projects",
        description="–°–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤ Supabase",
        message="/mcp list projects",
        expected_keywords=["projects", "–ø—Ä–æ–µ–∫—Ç"],
        mcp_service="supabase",
        skip_if_no_mcp=True
    ),
    
    TestCase(
        name="MCP SQL Query",
        description="SQL –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ MCP",
        message="/sql SELECT version()",
        expected_keywords=["PostgreSQL", "version"],
        mcp_service="supabase",
        skip_if_no_mcp=True
    ),
    
    # MCP DigitalOcean —Ç–µ—Å—Ç—ã
    TestCase(
        name="MCP List Apps",
        description="–°–ø–∏—Å–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π DigitalOcean",
        message="/mcp do apps",
        expected_keywords=["apps", "–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"],
        mcp_service="digitalocean",
        skip_if_no_mcp=True
    ),
    
    TestCase(
        name="MCP App Logs",
        description="–õ–æ–≥–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è",
        message="/logs app_123",
        expected_keywords=["logs", "–ª–æ–≥–∏"],
        mcp_service="digitalocean",
        skip_if_no_mcp=True
    ),
    
    # MCP Context7 —Ç–µ—Å—Ç—ã
    TestCase(
        name="MCP Search Docs",
        description="–ü–æ–∏—Å–∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ React",
        message="/docs react hooks",
        expected_keywords=["documentation", "hooks"],
        mcp_service="context7",
        skip_if_no_mcp=True
    ),
    
    TestCase(
        name="MCP Code Examples",
        description="–ü—Ä–∏–º–µ—Ä—ã –∫–æ–¥–∞ Vue",
        message="/mcp context7 examples vue composition api",
        expected_keywords=["examples", "code"],
        mcp_service="context7",
        skip_if_no_mcp=True
    ),
    
    # –û–±—ã—á–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    TestCase(
        name="Regular Chat",
        description="–û–±—ã—á–Ω—ã–π —Ä–∞–∑–≥–æ–≤–æ—Ä",
        message="–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?",
        expected_keywords=["–ü—Ä–∏–≤–µ—Ç", "–ø–æ–º–æ—á—å"]
    ),
    
    TestCase(
        name="Admin Mode Check",
        description="–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ —Ä–µ–∂–∏–º–∞",
        message="/admin status",
        expected_keywords=["admin", "—Ä–µ–∂–∏–º"]
    )
]


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–µ—Ä
    async with TelegramMCPTester(TEST_CONFIG) as tester:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã
        await tester.run_all_tests(TEST_CASES)


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
    asyncio.run(main())