#!/usr/bin/env python3
"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ç–µ—Å—Ç–µ—Ä –±–æ—Ç–∞ —Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º –ª–æ–≥–æ–≤
–ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω –ø–æ–¥ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è (MCP, Docker, Cloudflare)
"""

import asyncio
import aiohttp
import json
import time
import subprocess
import threading
from datetime import datetime
from typing import Dict, List, Optional, Tuple
import os
import re
from colorama import init, Fore, Style
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è colorama
init(autoreset=True)

class BotAutoTester:
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ç–µ—Å—Ç–µ—Ä —Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º –ª–æ–≥–æ–≤"""
    
    def __init__(self):
        # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ URL
        self.base_url = self._detect_webhook_url()
        self.webhook_url = f"{self.base_url}/webhook"
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω—ã –∏–∑ .env
        self.bot_token = os.getenv("TELEGRAM_BOT_TOKEN", "")
        self.chat_id = int(os.getenv("ADMIN_USER_ID", "229838448"))
        self.admin_username = os.getenv("ADMIN_USERNAME", "aaatema")
        self.webhook_secret = os.getenv("WEBHOOK_SECRET_TOKEN", "default-secret-token")
        
        self.update_id = int(time.time() * 1000)
        self.log_file = "bot.log"
        self.log_monitor_thread = None
        self.monitoring = False
        self.log_buffer = []
        
    def _detect_webhook_url(self) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç URL webhook –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä
        try:
            import requests
            response = requests.get("http://localhost:8000/health", timeout=2)
            if response.status_code == 200:
                print(f"{Fore.GREEN}‚úÖ –û–±–Ω–∞—Ä—É–∂–µ–Ω –ª–æ–∫–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä")
                return "http://localhost:8000"
        except:
            pass
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Cloudflare Tunnel —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è
        tunnel_url = os.getenv("TUNNEL_URL")
        if tunnel_url:
            print(f"{Fore.GREEN}‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Cloudflare Tunnel: {tunnel_url}")
            return tunnel_url
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º ngrok
        try:
            import requests
            response = requests.get("http://localhost:4040/api/tunnels", timeout=2)
            if response.status_code == 200:
                data = response.json()
                if data.get("tunnels"):
                    url = data["tunnels"][0]["public_url"]
                    print(f"{Fore.GREEN}‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è ngrok: {url}")
                    return url
        except:
            pass
            
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ–º localhost
        print(f"{Fore.YELLOW}‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è localhost –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
        return "http://localhost:8000"
        
    def start_log_monitoring(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ª–æ–≥–æ–≤ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        self.monitoring = True
        self.log_monitor_thread = threading.Thread(target=self._monitor_logs)
        self.log_monitor_thread.daemon = True
        self.log_monitor_thread.start()
        
    def stop_log_monitoring(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ª–æ–≥–æ–≤"""
        self.monitoring = False
        if self.log_monitor_thread:
            self.log_monitor_thread.join(timeout=2)
    
    def _monitor_logs(self):
        """–°–ª–µ–¥–∏—Ç –∑–∞ –ª–æ–≥–∞–º–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º tail -f –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –Ω–æ–≤—ã—Ö —Å—Ç—Ä–æ–∫
            process = subprocess.Popen(
                ['tail', '-f', self.log_file],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                text=True
            )
            
            while self.monitoring:
                line = process.stdout.readline()
                if line:
                    self.log_buffer.append(line.strip())
                    # –í—ã–≤–æ–¥–∏–º –≤–∞–∂–Ω—ã–µ –ª–æ–≥–∏
                    if any(key in line for key in ['üì•', 'üì§', '‚úÖ', '‚ùå', 'ERROR', 'Sending', 'MCP', 'Docker']):
                        self._print_log_line(line.strip())
                        
        except Exception as e:
            print(f"{Fore.RED}‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ª–æ–≥–æ–≤: {e}")
    
    def _print_log_line(self, line: str):
        """–ö—Ä–∞—Å–∏–≤–æ –≤—ã–≤–æ–¥–∏—Ç —Å—Ç—Ä–æ–∫—É –ª–æ–≥–∞"""
        if 'ERROR' in line or '‚ùå' in line:
            print(f"{Fore.RED}{line}")
        elif '‚úÖ' in line:
            print(f"{Fore.GREEN}{line}")
        elif 'üì•' in line or 'üì§' in line:
            print(f"{Fore.BLUE}{line}")
        elif 'Sending' in line:
            print(f"{Fore.YELLOW}{line}")
        elif 'MCP' in line:
            print(f"{Fore.MAGENTA}{line}")
        elif 'Docker' in line:
            print(f"{Fore.CYAN}{line}")
        else:
            print(line)
    
    def _create_update(self, text: str, is_admin: bool = True) -> Dict:
        """–°–æ–∑–¥–∞–µ—Ç Telegram Update –æ–±—ä–µ–∫—Ç"""
        self.update_id += 1
        user_id = self.chat_id if is_admin else 987654321
        username = self.admin_username if is_admin else "test_user"
        
        return {
            "update_id": self.update_id,
            "message": {
                "message_id": self.update_id,
                "from": {
                    "id": user_id,
                    "is_bot": False,
                    "first_name": "Test",
                    "username": username,
                    "language_code": "ru"
                },
                "chat": {
                    "id": user_id,
                    "first_name": "Test",
                    "username": username,
                    "type": "private"
                },
                "date": int(time.time()),
                "text": text
            }
        }
    
    async def send_to_webhook(self, text: str, is_admin: bool = True) -> Tuple[bool, str]:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ webhook"""
        update = self._create_update(text, is_admin)
        
        headers = {
            "Content-Type": "application/json",
            "X-Telegram-Bot-Api-Secret-Token": self.webhook_secret
        }
        
        async with aiohttp.ClientSession() as session:
            try:
                async with session.post(
                    self.webhook_url,
                    json=update,
                    headers=headers,
                    timeout=aiohttp.ClientTimeout(total=10)
                ) as response:
                    result = await response.json()
                    return response.status == 200, str(result)
            except Exception as e:
                return False, str(e)
    
    async def check_bot_response(self, wait_time: int = 3) -> Optional[Dict]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ —á–µ—Ä–µ–∑ Telegram API"""
        await asyncio.sleep(wait_time)  # –ñ–¥–µ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏
        
        # –í —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –ø—Ä–æ—Å—Ç–æ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–≥–∏
        print(f"{Fore.YELLOW}‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ –ª–æ–≥–∏ (Telegram API —Ç—Ä–µ–±—É–µ—Ç —Ä–µ–∞–ª—å–Ω–æ–≥–æ –±–æ—Ç–∞)")
        
        # –ò—â–µ–º –≤ –ª–æ–≥–∞—Ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
        for line in reversed(self.log_buffer[-20:]):
            if "Response sent successfully" in line or "‚úÖ Response sent" in line:
                return {"text": "–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω (–∏–∑ –ª–æ–≥–æ–≤)", "date": int(time.time())}
                
        return None
    
    def analyze_logs_for_errors(self) -> List[str]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±—É—Ñ–µ—Ä –ª–æ–≥–æ–≤ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫"""
        errors = []
        for line in self.log_buffer[-50:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 50 —Å—Ç—Ä–æ–∫
            if any(error in line for error in ['ERROR', 'Failed', 'Exception', 'Traceback']):
                errors.append(line)
        return errors
    
    async def run_test(self, command: str, description: str, is_admin: bool = True):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –æ–¥–∏–Ω —Ç–µ—Å—Ç"""
        print(f"\n{Fore.CYAN}{'='*60}")
        print(f"{Fore.CYAN}üß™ –¢–µ—Å—Ç: {description}")
        print(f"{Fore.CYAN}üìù –ö–æ–º–∞–Ω–¥–∞: {command}")
        print(f"{Fore.CYAN}üë§ –û—Ç –∏–º–µ–Ω–∏: {'–ê–¥–º–∏–Ω' if is_admin else '–û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}")
        print(f"{Fore.CYAN}{'='*60}")
        
        # –û—á–∏—â–∞–µ–º –±—É—Ñ–µ—Ä –ª–æ–≥–æ–≤
        self.log_buffer.clear()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É
        print(f"\n{Fore.YELLOW}üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ webhook...")
        success, result = await self.send_to_webhook(command, is_admin)
        
        if success:
            print(f"{Fore.GREEN}‚úÖ Webhook –ø—Ä–∏–Ω—è–ª –∑–∞–ø—Ä–æ—Å: {result}")
        else:
            print(f"{Fore.RED}‚ùå –û—à–∏–±–∫–∞ webhook: {result}")
            return
        
        # –ñ–¥–µ–º –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç
        print(f"\n{Fore.YELLOW}‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –±–æ—Ç–∞...")
        bot_response = await self.check_bot_response()
        
        if bot_response:
            print(f"{Fore.GREEN}‚úÖ –ë–æ—Ç –æ—Ç–≤–µ—Ç–∏–ª:")
            print(f"{Fore.WHITE}   –¢–µ–∫—Å—Ç: {bot_response.get('text', '–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞')}")
        else:
            print(f"{Fore.YELLOW}‚ö†Ô∏è –û—Ç–≤–µ—Ç –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω –≤ –ª–æ–≥–∞—Ö")
            
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –≤ –ª–æ–≥–∞—Ö
        errors = self.analyze_logs_for_errors()
        if errors:
            print(f"\n{Fore.RED}üîç –ù–∞–π–¥–µ–Ω—ã –æ—à–∏–±–∫–∏ –≤ –ª–æ–≥–∞—Ö:")
            for error in errors[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 –æ—à–∏–±–∫–∏
                print(f"{Fore.RED}   - {error}")
    
    async def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã"""
        print(f"{Fore.MAGENTA}üöÄ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞")
        print(f"{Fore.MAGENTA}üìç Webhook URL: {self.webhook_url}")
        print(f"{Fore.MAGENTA}üë§ Admin ID: {self.chat_id}")
        print(f"{Fore.MAGENTA}üîë Secret Token: {self.webhook_secret[:10]}...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞
        print(f"\n{Fore.YELLOW}üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞...")
        try:
            import requests
            response = requests.get(f"{self.base_url}/health", timeout=5)
            if response.status_code == 200:
                print(f"{Fore.GREEN}‚úÖ –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω")
                health_data = response.json()
                print(f"{Fore.WHITE}   –°—Ç–∞—Ç—É—Å: {health_data}")
            else:
                print(f"{Fore.RED}‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status_code}")
        except Exception as e:
            print(f"{Fore.RED}‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ª–æ–≥–æ–≤
        print(f"\n{Fore.YELLOW}üìä –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ª–æ–≥–æ–≤...")
        self.start_log_monitoring()
        await asyncio.sleep(1)  # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∑–∞–ø—É—Å–∫
        
        # –¢–µ—Å—Ç—ã –¥–ª—è –∞–¥–º–∏–Ω–∞
        admin_tests = [
            ("/start", "–ö–æ–º–∞–Ω–¥–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è (–∞–¥–º–∏–Ω)"),
            ("/help", "–ö–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â–∏ (–∞–¥–º–∏–Ω)"),
            ("–ü—Ä–∏–≤–µ—Ç, –±–æ—Ç!", "–û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"),
            ("/clear", "–û—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏"),
            ("/mcp status", "MCP —Å—Ç–∞—Ç—É—Å"),
            ("/mcp health", "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è MCP —Å–µ—Ä–≤–µ—Ä–æ–≤"),
            ("/db SELECT version()", "SQL –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ MCP"),
            ("/docs react hooks", "–ü–æ–∏—Å–∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏"),
        ]
        
        print(f"\n{Fore.MAGENTA}üìã –¢–µ—Å—Ç—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        for command, description in admin_tests:
            await self.run_test(command, description, is_admin=True)
            await asyncio.sleep(2)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
        
        # –¢–µ—Å—Ç—ã –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_tests = [
            ("/start", "–ö–æ–º–∞–Ω–¥–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å)"),
            ("/help", "–ö–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â–∏ (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å)"),
            ("/mcp_enable", "–ó–∞–ø—Ä–æ—Å –¥–æ—Å—Ç—É–ø–∞ –∫ MCP"),
            ("–ö–∞–∫ –¥–µ–ª–∞?", "–û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"),
        ]
        
        print(f"\n{Fore.MAGENTA}üìã –¢–µ—Å—Ç—ã –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        for command, description in user_tests:
            await self.run_test(command, description, is_admin=False)
            await asyncio.sleep(2)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        print(f"\n{Fore.YELLOW}üìä –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ª–æ–≥–æ–≤...")
        self.stop_log_monitoring()
        
        # –§–∏–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        print(f"\n{Fore.MAGENTA}{'='*60}")
        print(f"{Fore.MAGENTA}üìã –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
        print(f"{Fore.MAGENTA}{'='*60}")
        
        all_errors = self.analyze_logs_for_errors()
        if all_errors:
            print(f"{Fore.RED}‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {len(all_errors)} –æ—à–∏–±–æ–∫")
            unique_errors = list(set(all_errors))[:5]  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –æ—à–∏–±–∫–∏
            for i, error in enumerate(unique_errors, 1):
                print(f"{Fore.RED}{i}. {error}")
        else:
            print(f"{Fore.GREEN}‚úÖ –û—à–∏–±–æ–∫ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")
            
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–∑ –ª–æ–≥–æ–≤
        mcp_count = sum(1 for line in self.log_buffer if 'MCP' in line)
        docker_count = sum(1 for line in self.log_buffer if 'Docker' in line)
        
        print(f"\n{Fore.CYAN}üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"{Fore.CYAN}   - MCP —É–ø–æ–º–∏–Ω–∞–Ω–∏–π: {mcp_count}")
        print(f"{Fore.CYAN}   - Docker —É–ø–æ–º–∏–Ω–∞–Ω–∏–π: {docker_count}")
        print(f"{Fore.CYAN}   - –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫ –≤ –ª–æ–≥–∞—Ö: {len(self.log_buffer)}")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print(f"{Fore.YELLOW}üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ .env
    if not os.path.exists(".env"):
        print(f"{Fore.RED}‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print(f"{Fore.YELLOW}–°–æ–∑–¥–∞–π—Ç–µ .env —Ñ–∞–π–ª —Å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–º–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏")
        return
        
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    required_vars = ["TELEGRAM_BOT_TOKEN", "ADMIN_USER_ID"]
    missing_vars = [var for var in required_vars if not os.getenv(var)]
    
    if missing_vars:
        print(f"{Fore.RED}‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {', '.join(missing_vars)}")
        return
        
    tester = BotAutoTester()
    await tester.run_all_tests()


if __name__ == "__main__":
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞–∫–µ—Ç—ã –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    try:
        import colorama
        import aiohttp
        import dotenv
    except ImportError:
        print("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–∞–∫–µ—Ç–æ–≤...")
        subprocess.run([sys.executable, "-m", "pip", "install", "colorama", "aiohttp", "python-dotenv", "requests"])
        
    asyncio.run(main())