#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Å–∏–º—É–ª—è—Ü–∏–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ webhook
"""

import json
import os
import sys
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

def simulate_voice_message():
    """–°–∏–º—É–ª—è—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ webhook
    from webhook import has_attachments, voice_service, VOICE_ENABLED, AI_ENABLED
    
    print("=== VOICE MESSAGE SIMULATION ===")
    print(f"üîë VOICE_ENABLED: {VOICE_ENABLED}")
    print(f"üîë AI_ENABLED: {AI_ENABLED}")
    print(f"üîë voice_service: {voice_service}")
    print(f"üîë voice_service type: {type(voice_service)}")
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –≤ Telegram
    voice_message = {
        "message_id": 12345,
        "from": {
            "id": 123456789,
            "is_bot": False,
            "first_name": "–¢–µ—Å—Ç",
            "username": "test_user",
            "language_code": "ru"
        },
        "chat": {
            "id": 123456789,
            "first_name": "–¢–µ—Å—Ç",
            "username": "test_user",
            "type": "private"
        },
        "date": 1642000000,
        "voice": {
            "duration": 3,
            "mime_type": "audio/ogg",
            "file_id": "AwACAgIAAxkBAAICE2KTestVoiceFileId",
            "file_unique_id": "AgADEhNiVoiceTest",
            "file_size": 15234
        }
    }
    
    print(f"\nüì® –°–∏–º—É–ª—è—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è:")
    print(json.dumps(voice_message, ensure_ascii=False, indent=2))
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º has_attachments
    print(f"\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ has_attachments:")
    attachments, attachments_details = has_attachments(voice_message)
    print(f"üìé attachments: {attachments}")
    print(f"üìã attachments_details: {attachments_details}")
    print(f"üé§ 'voice' in attachments: {'voice' in attachments}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏–µ
    condition_result = 'voice' in attachments and voice_service
    print(f"\n‚úÖ –£—Å–ª–æ–≤–∏–µ 'voice' in attachments and voice_service: {condition_result}")
    
    if condition_result:
        print("üéâ –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –î–û–õ–ñ–ù–û –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è!")
        # –ù–∞–π–¥–µ–º voice –¥–∞–Ω–Ω—ã–µ
        voice_data = None
        for detail in attachments_details:
            if detail['type'] == 'voice':
                voice_data = detail
                break
        print(f"üé§ Voice data: {voice_data}")
    else:
        print("‚ùå –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ù–ï –±—É–¥–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è!")
        if 'voice' not in attachments:
            print("   - 'voice' –ù–ï –Ω–∞–π–¥–µ–Ω –≤ attachments")
        if not voice_service:
            print("   - voice_service –ù–ï –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    print(f"\nüîß –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏:")
    try:
        from voice import VoiceService
        print(f"‚úÖ VoiceService –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è —É—Å–ø–µ—à–Ω–æ")
        
        telegram_token = os.getenv('TELEGRAM_BOT_TOKEN')
        openai_key = os.getenv('OPENAI_API_KEY')
        
        if telegram_token and openai_key:
            test_service = VoiceService(telegram_token, openai_key)
            print(f"‚úÖ VoiceService —Å–æ–∑–¥–∞–µ—Ç—Å—è —É—Å–ø–µ—à–Ω–æ")
            info = test_service.get_service_info()
            print(f"üìã Service info: {info}")
        else:
            print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç API –∫–ª—é—á–∏")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ VoiceService: {e}")

if __name__ == "__main__":
    simulate_voice_message()