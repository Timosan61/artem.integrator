#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ MCP pipeline
–≠–º—É–ª–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
"""

import asyncio
import sys
import os
import logging

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω—é –ø—Ä–æ–µ–∫—Ç–∞
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from voice.voice_service import VoiceService
from bot.services.claude_code_service import claude_code_service

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def test_voice_mcp():
    """–¢–µ—Å—Ç –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ MCP pipeline"""
    
    print("üé§ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ MCP pipeline")
    print("=" * 50)
    
    # –≠–º—É–ª–∏—Ä—É–µ–º –≥–æ–ª–æ—Å–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    voice_data = {
        'file_id': 'test_voice_file_123',
        'duration': 15,
        'mime_type': 'audio/ogg'
    }
    
    # –≠–º—É–ª–∏—Ä—É–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –¥–ª—è —Ç–µ—Å—Ç–∞
    test_voice_texts = [
        "–ø–æ—Å–º–æ—Ç—Ä–∏ –∫–∞–∫–∏–µ —É –º–µ–Ω—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ DigitalOcean",
        "–∫–∞–∫–∏–µ —É –º–µ–Ω—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö",
        "–ø–æ–∫–∞–∂–∏ –¥–µ–ø–ª–æ–π–º–µ–Ω—Ç—ã",
        "–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ sample-aspnetapp"
    ]
    
    for test_text in test_voice_texts:
        print(f"\nüìã –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å: '{test_text}'")
        
        # –ü—Ä—è–º–æ–π —Ç–µ—Å—Ç Claude Code SDK —Å –≥–æ–ª–æ—Å–æ–≤—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º
        mcp_command = f"/voice {test_text}"
        
        try:
            result = await claude_code_service.execute_mcp_command(
                command=mcp_command,
                user_id="test_user_123"
            )
            
            if result["success"]:
                print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ")
                print(f"üìù –û—Ç–≤–µ—Ç: {result['response'][:200]}...")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞: {result.get('error', 'Unknown error')}")
                
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
    
    print("\n" + "=" * 50)
    print("‚úÖ –¢–µ—Å—Ç –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ MCP pipeline –∑–∞–≤–µ—Ä—à–µ–Ω")

async def test_direct_voice_processing():
    """–¢–µ—Å—Ç –ø—Ä—è–º–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥"""
    
    print("\nüéØ –¢–µ—Å—Ç –ø—Ä—è–º–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ ClaudeCodeService –Ω–∞–ø—Ä—è–º—É—é
    test_cases = [
        "/voice –∫–∞–∫–∏–µ —É –º–µ–Ω—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è",
        "/voice –ø–æ–∫–∞–∂–∏ –º–æ–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö",
        "/voice —Å–ø–∏—Å–æ–∫ –¥–µ–ø–ª–æ–π–º–µ–Ω—Ç–æ–≤",
        "/voice –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ sample-aspnetapp"
    ]
    
    for command in test_cases:
        print(f"\nüîß –¢–µ—Å—Ç: {command}")
        
        try:
            result = await claude_code_service.execute_mcp_command(
                command=command,
                user_id="test_user_456"
            )
            
            if result["success"]:
                print(f"‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω ({len(result['response'])} —Å–∏–º–≤–æ–ª–æ–≤)")
                print(f"üìä –§–æ—Ä–º–∞—Ç: {type(result['response'])}")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞: {result.get('error')}")
                
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")

if __name__ == "__main__":
    async def main():
        print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ MCP")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤
        print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤...")
        
        claude_test = await claude_code_service.test_connection()
        print(f"ClaudeCodeService: {'‚úÖ' if claude_test['success'] else '‚ùå'}")
        print(f"  Enabled: {claude_test['enabled']}")
        print(f"  API Key: {claude_test['api_key_set']}")
        
        # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
        await test_direct_voice_processing()
        await test_voice_mcp()
        
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")
    
    asyncio.run(main())