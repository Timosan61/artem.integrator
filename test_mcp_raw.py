#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –ø—Ä—è–º–æ–≥–æ –≤—ã–∑–æ–≤–∞ MCP —Å–µ—Ä–≤–µ—Ä–∞ –±–µ–∑ SDK
"""
import subprocess
import json
import os
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

def call_digitalocean_mcp():
    """–í—ã–∑–æ–≤ DigitalOcean MCP –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ npx"""
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω
    token = os.getenv("DIGITALOCEAN_API_TOKEN")
    if not token:
        print("‚ùå DIGITALOCEAN_API_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")
        return
    
    print(f"‚úÖ –¢–æ–∫–µ–Ω –Ω–∞–π–¥–µ–Ω: {token[:10]}...")
    
    # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ MCP —Å–µ—Ä–≤–µ—Ä–∞ –∏ –≤—ã–∑–æ–≤–∞ —Ñ—É–Ω–∫—Ü–∏–∏
    # MCP —Å–µ—Ä–≤–µ—Ä—ã —Ä–∞–±–æ—Ç–∞—é—Ç —á–µ—Ä–µ–∑ JSON-RPC
    mcp_request = {
        "jsonrpc": "2.0",
        "method": "tools/call",
        "params": {
            "name": "mcp__digitalocean__list_apps",
            "arguments": {"query": {}}
        },
        "id": 1
    }
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º MCP —Å–µ—Ä–≤–µ—Ä
    env = os.environ.copy()
    env["DIGITALOCEAN_API_TOKEN"] = token
    
    print("\nüöÄ –ó–∞–ø—É—Å–∫–∞–µ–º DigitalOcean MCP —Å–µ—Ä–≤–µ—Ä...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–∞–∫–µ—Ç–∞
        check_cmd = ["npx", "-y", "@digitalocean/mcp", "--version"]
        result = subprocess.run(check_cmd, capture_output=True, text=True)
        print(f"üì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–∫–µ—Ç–∞: {result.stdout.strip() if result.returncode == 0 else result.stderr}")
        
        # –ü—Ä–æ–±—É–µ–º –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –Ω–∞–ø—Ä—è–º—É—é
        # MCP —Å–µ—Ä–≤–µ—Ä—ã –æ–±—ã—á–Ω–æ –ø—Ä–∏–Ω–∏–º–∞—é—Ç –∫–æ–º–∞–Ω–¥—ã —á–µ—Ä–µ–∑ stdin
        cmd = ["npx", "-y", "@digitalocean/mcp"]
        
        print(f"\nüì® –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å: {json.dumps(mcp_request, indent=2)}")
        
        process = subprocess.Popen(
            cmd,
            stdin=subprocess.PIPE,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            text=True,
            env=env
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º JSON-RPC –∑–∞–ø—Ä–æ—Å
        stdout, stderr = process.communicate(input=json.dumps(mcp_request))
        
        print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç:")
        print(f"STDOUT: {stdout}")
        print(f"STDERR: {stderr}")
        print(f"Return code: {process.returncode}")
        
        # –ü—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –æ—Ç–≤–µ—Ç
        if stdout:
            try:
                response = json.loads(stdout)
                print(f"\n‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω: {json.dumps(response, indent=2)}")
            except json.JSONDecodeError:
                print(f"\n‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON –æ—Ç–≤–µ—Ç")
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    call_digitalocean_mcp()