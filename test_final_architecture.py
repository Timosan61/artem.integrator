#!/usr/bin/env python
"""
–¢–µ—Å—Ç –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã: —É–±—Ä–∞–Ω MCPTool, –ø—Ä—è–º–æ–π –≤—ã–∑–æ–≤ Claude Code Service
"""
import asyncio
import os
from agent.core.intelligent_agent import IntelligentAgent

async def test_final_architecture():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É –±–µ–∑ MCPTool"""
    print("üéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã")
    print("üìã –ò–∑–º–µ–Ω–µ–Ω–∏—è:")
    print("   - –£–±—Ä–∞–Ω MCPTool –∫–ª–∞—Å—Å")
    print("   - –£–±—Ä–∞–Ω ToolRegistry")
    print("   - –ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤ claude_code_service")
    print("   - claude_code_direct –≤–º–µ—Å—Ç–æ execute_mcp_command")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ API –∫–ª—é—á
    api_key = os.getenv('OPENAI_API_KEY')
    if not api_key:
        print("‚ùå –ù–µ—Ç OPENAI_API_KEY –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        return
    
    # –°–æ–∑–¥–∞–µ–º –∞–≥–µ–Ω—Ç–∞
    print("\nüì¶ –°–æ–∑–¥–∞–Ω–∏–µ Simple Agent...")
    agent = IntelligentAgent(api_key=api_key)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –∑–∞–ø—Ä–æ—Å–æ–≤
    test_cases = [
        {
            "message": "–∫–∞–∫–∏–µ —É –º–µ–Ω—è –µ—Å—Ç—å mcp —Å–µ—Ä–≤–µ—Ä–∞",
            "expected_tool": "claude_code_direct",
            "description": "MCP –∑–∞–ø—Ä–æ—Å (–æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ—Å—Ç)"
        },
        {
            "message": "–ø–æ–∫–∞–∂–∏ –º–æ–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è",
            "expected_tool": "claude_code_direct", 
            "description": "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è DigitalOcean"
        },
        {
            "message": "–ø—Ä–∏–≤–µ—Ç, –∫–∞–∫ –¥–µ–ª–∞?",
            "expected_tool": None,
            "description": "–û–±—ã—á–Ω—ã–π —á–∞—Ç"
        },
        {
            "message": "–Ω–∞—Ä–∏—Å—É–π –∫–æ—Ç–∞",
            "expected_tool": "generate_image",
            "description": "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"
        }
    ]
    
    print(f"\nüß™ –ó–∞–ø—É—Å–∫ {len(test_cases)} —Ç–µ—Å—Ç–æ–≤:")
    
    for i, test_case in enumerate(test_cases, 1):
        message = test_case["message"]
        expected_tool = test_case["expected_tool"]
        description = test_case["description"]
        
        print(f"\n{i}. {description}")
        print(f"   üìù –ó–∞–ø—Ä–æ—Å: '{message}'")
        
        try:
            response = await agent.process_message(
                message=message,
                user_id="test_user_final"
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            actual_tool = response.tool_used
            tool_match = "‚úÖ" if actual_tool == expected_tool else "‚ùå"
            
            print(f"   {tool_match} –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: {actual_tool} (–æ–∂–∏–¥–∞–ª—Å—è: {expected_tool})")
            print(f"   üìä –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {response.confidence:.2f}")
            print(f"   üí¨ –û—Ç–≤–µ—Ç: {response.message[:80]}...")
            
            if response.tool_response:
                print(f"   üìã –£—Å–ø–µ—Ö tool: {response.tool_response.success}")
                if response.tool_response.data:
                    print(f"   üíæ –î–∞–Ω–Ω—ã–µ: {str(response.tool_response.data)[:60]}...")
            
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
    
    print("\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

if __name__ == "__main__":
    asyncio.run(test_final_architecture())