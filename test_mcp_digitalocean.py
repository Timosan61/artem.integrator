#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Ä–µ–∞–ª—å–Ω–æ–≥–æ MCP –∑–∞–ø—Ä–æ—Å–∞ –∫ DigitalOcean —á–µ—Ä–µ–∑ Claude Code SDK
"""

import asyncio
import logging
import os
import sys
from pathlib import Path
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout),
        logging.FileHandler(f'mcp_test_{datetime.now().strftime("%Y%m%d_%H%M%S")}.log')
    ]
)
logger = logging.getLogger(__name__)

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ bot –º–æ–¥—É–ª—é
sys.path.insert(0, str(Path(__file__).parent))

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
from dotenv import load_dotenv
load_dotenv()

async def test_digitalocean_mcp():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ MCP –∑–∞–ø—Ä–æ—Å–∞ –∫ DigitalOcean"""
    
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ MCP –∑–∞–ø—Ä–æ—Å–∞ –∫ DigitalOcean...")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    do_token = os.getenv("DIGITALOCEAN_TOKEN")
    if not do_token:
        print("‚ùå DIGITALOCEAN_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env")
        return
    else:
        print(f"‚úÖ DigitalOcean token –Ω–∞–π–¥–µ–Ω: {do_token[:10]}...")
    
    try:
        from bot.services.claude_code_service import ClaudeCodeService, CLAUDE_CODE_SDK_AVAILABLE
        
        print(f"\nüì¶ Claude Code SDK –¥–æ—Å—Ç—É–ø–µ–Ω: {CLAUDE_CODE_SDK_AVAILABLE}")
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å
        service = ClaudeCodeService()
        print(f"‚úÖ ClaudeCodeService —Å–æ–∑–¥–∞–Ω")
        print(f"   Enabled: {service.enabled}")
        
        if not service.enabled:
            print("‚ùå –°–µ—Ä–≤–∏—Å –æ—Ç–∫–ª—é—á–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é MCP –∏ Anthropic.")
            return
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã
        test_commands = [
            {
                "command": "/mcp apps",
                "description": "–°–ø–∏—Å–æ–∫ DigitalOcean –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π"
            },
            {
                "command": "/mcp do list_apps",
                "description": "–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–ø–∏—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π"  
            },
            {
                "command": "/mcp do regions",
                "description": "–°–ø–∏—Å–æ–∫ —Ä–µ–≥–∏–æ–Ω–æ–≤ DigitalOcean"
            }
        ]
        
        for test in test_commands:
            print(f"\nüß™ –¢–µ—Å—Ç: {test['description']}")
            print(f"üìù –ö–æ–º–∞–Ω–¥–∞: {test['command']}")
            print("-" * 40)
            
            start_time = asyncio.get_event_loop().time()
            
            try:
                # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É
                result = await service.execute_mcp_command(test['command'])
                
                end_time = asyncio.get_event_loop().time()
                duration = end_time - start_time
                
                print(f"‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {duration:.2f} —Å–µ–∫")
                print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {result.get('success', False)}")
                
                if result.get('success'):
                    print(f"üìÑ –û—Ç–≤–µ—Ç: {result.get('response', '–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞')[:200]}...")
                    if result.get('data'):
                        print(f"üìä –î–∞–Ω–Ω—ã–µ: {str(result.get('data'))[:200]}...")
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
                    
            except Exception as e:
                print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
                import traceback
                traceback.print_exc()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        import traceback
        traceback.print_exc()
    
    print("\n" + "=" * 60)
    print("üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤...")
    
    # –ß–∏—Ç–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏
    log_files = sorted(Path('.').glob('mcp_test_*.log'))
    if log_files:
        latest_log = log_files[-1]
        print(f"üìÑ –õ–æ–≥–∏ –∏–∑ {latest_log}:")
        print("-" * 40)
        
        with open(latest_log) as f:
            lines = f.readlines()
            # –§–∏–ª—å—Ç—Ä—É–µ–º –≤–∞–∂–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
            important_lines = [
                line for line in lines
                if any(keyword in line for keyword in [
                    'MCP', 'SDK', 'DigitalOcean', 'ERROR', 'WARNING',
                    '–ò—Å–ø–æ–ª—å–∑—É–µ–º', '–ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è', 'tool', 'message'
                ])
            ]
            
            for line in important_lines[-20:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 20 –≤–∞–∂–Ω—ã—Ö —Å—Ç—Ä–æ–∫
                print(line.rstrip())

if __name__ == "__main__":
    asyncio.run(test_digitalocean_mcp())