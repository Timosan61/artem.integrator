#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã –ø—Ä–æ–º–ø—Ç–æ–≤ –∏–∑ YAML —Ñ–∞–π–ª–æ–≤
"""
import asyncio
import logging
from bot.services.claude_code_service import ClaudeCodeService

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

async def test_yaml_prompts():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–æ–≤ –∏–∑ YAML"""
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã YAML –ø—Ä–æ–º–ø—Ç–æ–≤")
    print("-" * 60)
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
    service = ClaudeCodeService()
    
    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
    print("\n1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ YAML —Ñ–∞–π–ª–æ–≤:")
    print(f"   - voice_prompts –∑–∞–≥—Ä—É–∂–µ–Ω: {'‚úÖ' if service.voice_prompts else '‚ùå'}")
    print(f"   - sdk_prompts –∑–∞–≥—Ä—É–∂–µ–Ω: {'‚úÖ' if service.sdk_prompts else '‚ùå'}")
    
    if service.voice_prompts:
        scenarios = service.voice_prompts.get('voice_commands', {}).get('scenarios', [])
        print(f"   - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤: {len(scenarios)}")
        print(f"   - –°—Ü–µ–Ω–∞—Ä–∏–∏: {[s.get('name', 'Unknown') for s in scenarios]}")
    
    if service.sdk_prompts:
        mappings = service.sdk_prompts.get('command_mappings', {})
        print(f"   - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞–ø–ø–∏–Ω–≥–æ–≤ –∫–æ–º–∞–Ω–¥: {len(mappings)}")
        print(f"   - –ö–æ–º–∞–Ω–¥—ã: {list(mappings.keys())[:5]}...")
    
    # 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
    print("\n2Ô∏è‚É£ –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç:")
    system_prompt = service._get_system_prompt()
    print(f"   - –î–ª–∏–Ω–∞ –ø—Ä–æ–º–ø—Ç–∞: {len(system_prompt)} —Å–∏–º–≤–æ–ª–æ–≤")
    print(f"   - –ü–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤: {system_prompt[:100]}...")
    
    # 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–æ–ª–æ—Å–æ–≤—ã–µ –ø—Ä–æ–º–ø—Ç—ã
    print("\n3Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤:")
    
    test_voices = [
        "–ø–æ–∫–∞–∂–∏ –º–æ–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è",
        "–∫–∞–∫–∏–µ —É –º–µ–Ω—è –µ—Å—Ç—å –¥—Ä–æ–ø–ª–µ—Ç—ã",
        "—Å–ø–∏—Å–æ–∫ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö",
        "–Ω–µ–ø–æ–Ω—è—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞"
    ]
    
    for voice_text in test_voices:
        print(f"\n   –ì–æ–ª–æ—Å: '{voice_text}'")
        prompt = service._format_voice_mcp_prompt(voice_text)
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤ –ø—Ä–æ–º–ø—Ç–∞
        print(f"   –ü—Ä–æ–º–ø—Ç (–ø–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤): {prompt[:200]}...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –±—É–¥–µ—Ç –≤—ã–±—Ä–∞–Ω–æ
        if "mcp__digitalocean__list_apps" in prompt:
            print("   ‚úÖ –ë—É–¥–µ—Ç –≤—ã–∑–≤–∞–Ω list_apps")
        elif "mcp__digitalocean__list_droplets" in prompt:
            print("   ‚úÖ –ë—É–¥–µ—Ç –≤—ã–∑–≤–∞–Ω list_droplets")
        elif "mcp__digitalocean__list_databases_cluster" in prompt:
            print("   ‚úÖ –ë—É–¥–µ—Ç –≤—ã–∑–≤–∞–Ω list_databases")
        elif "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é" in prompt:
            print("   ‚ö†Ô∏è –§—É–Ω–∫—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        else:
            print("   ‚ùì –ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ")
    
    # 4. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã
    print("\n4Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥:")
    
    test_commands = [
        "/mcp apps",
        "/mcp droplets",
        "/mcp databases",
        "/db SELECT * FROM users"
    ]
    
    for cmd in test_commands:
        print(f"\n   –ö–æ–º–∞–Ω–¥–∞: '{cmd}'")
        prompt = service._format_mcp_prompt(cmd)
        tools = service._get_allowed_tools(cmd)
        print(f"   –ü—Ä–æ–º–ø—Ç: {prompt[:100]}...")
        print(f"   –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã: {tools[:3]}...")
    
    # 5. –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–æ—Ä—è—á—É—é –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫—É
    print("\n5Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–æ—Ä—è—á–µ–π –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏:")
    print("   –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–º–ø—Ç—ã...")
    service.reload_prompts()
    print("   ‚úÖ –ü—Ä–æ–º–ø—Ç—ã –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω—ã")
    
    print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print("-" * 60)

async def test_real_mcp_call():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π –≤—ã–∑–æ–≤ MCP —Å –Ω–æ–≤—ã–º–∏ –ø—Ä–æ–º–ø—Ç–∞–º–∏"""
    
    print("\n6Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ MCP –≤—ã–∑–æ–≤–∞:")
    
    service = ClaudeCodeService()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–æ–ª–æ—Å–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É –ø—Ä–æ –¥—Ä–æ–ø–ª–µ—Ç—ã
    voice_command = "/voice –ø–æ–∫–∞–∂–∏ –º–æ–∏ –¥—Ä–æ–ø–ª–µ—Ç—ã"
    print(f"   –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É: '{voice_command}'")
    
    try:
        result = await service.execute_mcp_command(voice_command, "test_user")
        print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
        
        if result.get('success'):
            if "—Å–æ–∂–∞–ª–µ–Ω–∏—é" in result.get('mcp_response', ''):
                print("   ‚ÑπÔ∏è –ü–æ–ª—É—á–µ–Ω fallback –æ—Ç–≤–µ—Ç (—Ñ—É–Ω–∫—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞)")
            else:
                print("   ‚úÖ –ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {result.get('error', 'Unknown')}")
    except Exception as e:
        print(f"   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")

if __name__ == "__main__":
    asyncio.run(test_yaml_prompts())
    
    # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: —Ç–µ—Å—Ç–∏—Ä—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π MCP –≤—ã–∑–æ–≤
    # asyncio.run(test_real_mcp_call())