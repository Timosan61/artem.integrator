"""
Agent –±–æ—Ç–∞ - –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏

–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–æ–≤—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É, –Ω–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ä—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
"""

import logging
from typing import Optional, Dict, Any
from datetime import datetime

from .core.agent import AgentFactory
from .core.interfaces import Message, User, MessageType, UserRole
from .core.config import config
from .agent_legacy import myassistant as LegacyAssistant


logger = logging.getLogger(__name__)


class myassistant:
    """
    –ö–ª–∞—Å—Å-–æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–æ–≤—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É –ø–æ–¥ –∫–∞–ø–æ—Ç–æ–º, –Ω–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ä—ã–π API
    """
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–∞"""
        try:
            # –ü—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–æ–≤—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É
            self.agent = AgentFactory.get_agent()
            self.use_new_architecture = True
            logger.info("‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–æ–≤–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –∞–≥–µ–Ω—Ç–∞")
        except Exception as e:
            # Fallback –Ω–∞ —Å—Ç–∞—Ä—É—é —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É: {e}")
            logger.info("üì¶ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è legacy —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è")
            self.legacy_agent = LegacyAssistant()
            self.use_new_architecture = False
        
        # –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        self.openai_client = getattr(self, 'legacy_agent', None) or self
        self.zep_client = getattr(self, 'legacy_agent', None) or self
        self.instruction = config.data_dir / 'instruction.json' if self.use_new_architecture else {}
        self.user_sessions = {}
    
    async def add_to_zep_memory(self, user_id: int, user_name: str, user_message: str, ai_response: str):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–≤–µ—Ç –≤ –ø–∞–º—è—Ç—å Zep"""
        if not self.use_new_architecture:
            return await self.legacy_agent.add_to_zep_memory(user_id, user_name, user_message, ai_response)
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É
        try:
            # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç—ã Message –∏ User
            user = User(
                id=user_id,
                username=None,
                first_name=user_name,
                last_name=None,
                role=UserRole.USER
            )
            
            message = Message(
                id=0,
                user=user,
                chat_id=user_id,
                text=user_message,
                type=MessageType.TEXT,
                timestamp=datetime.now()
            )
            
            from .core.interfaces import Response
            response = Response(text=ai_response)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —á–µ—Ä–µ–∑ –Ω–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –ø–∞–º—è—Ç–∏
            await self.agent.memory_manager.add_message(user_id, message, response)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ø–∞–º—è—Ç—å: {e}")
    
    async def get_zep_memory_context(self, user_id: int, limit: int = 10) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –∏–∑ –ø–∞–º—è—Ç–∏ Zep"""
        if not self.use_new_architecture:
            return await self.legacy_agent.get_zep_memory_context(user_id, limit)
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ –Ω–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä
            context_list = await self.agent.memory_manager.get_context(user_id, limit)
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤ —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç
            context_parts = []
            for msg in context_list:
                role = msg.get('role', 'user')
                content = msg.get('content', '')
                if role == 'user':
                    context_parts.append(f"User: {content}")
                else:
                    context_parts.append(f"Assistant: {content}")
            
            return "\n".join(context_parts)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {e}")
            return ""
    
    def detect_social_media_intent(self, text: str) -> dict:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –Ω–∞–º–µ—Ä–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö –º–µ–¥–∏–∞"""
        if not self.use_new_architecture:
            return self.legacy_agent.detect_social_media_intent(text)
        
        # –î–ª—è –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        # (–¥–µ—Ç–µ–∫—Ü–∏—è –Ω–∞–º–µ—Ä–µ–Ω–∏–π —Ç–µ–ø–µ—Ä—å –≤ IntentDetector)
        text_lower = text.lower()
        platforms = []
        
        if 'youtube' in text_lower or '—é—Ç—É–±' in text_lower:
            platforms.append('youtube')
        if 'instagram' in text_lower or '–∏–Ω—Å—Ç–∞' in text_lower:
            platforms.append('instagram')
        if 'tiktok' in text_lower or '—Ç–∏–∫—Ç–æ–∫' in text_lower:
            platforms.append('tiktok')
        
        return {
            'has_social_media_intent': len(platforms) > 0,
            'platforms': platforms,
            'actions': [],
            'confidence': 1.0 if platforms else 0.0
        }
    
    async def generate_response(self, user_message: str, user_id: int, user_name: str, 
                              is_admin: bool = False, social_media_response: Optional[str] = None) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if not self.use_new_architecture:
            return await self.legacy_agent.generate_response(
                user_message, user_id, user_name, is_admin, social_media_response
            )
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –≥–æ—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –æ—Ç Social Media —Å–µ—Ä–≤–∏—Å–∞
        if social_media_response:
            return social_media_response
        
        try:
            # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –¥–ª—è –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
            user = User(
                id=user_id,
                username=None,
                first_name=user_name,
                last_name=None,
                role=UserRole.ADMIN if is_admin else UserRole.USER
            )
            
            message = Message(
                id=0,
                user=user,
                chat_id=user_id,
                text=user_message,
                type=MessageType.TEXT,
                timestamp=datetime.now()
            )
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ –Ω–æ–≤—ã–π –∞–≥–µ–Ω—Ç
            response = await self.agent.process_message(message)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–∞–º—è—Ç—å (—É–∂–µ —Å–¥–µ–ª–∞–Ω–æ –≤ process_message)
            
            return response.text
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: {e}")
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑."
    
    def _load_instruction(self) -> Dict[str, Any]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏"""
        if not self.use_new_architecture:
            return self.legacy_agent._load_instruction()
        
        # –î–ª—è –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        return {}
    
    def _create_system_message(self, user_name: str, is_admin: bool, intent: dict) -> str:
        """–°–æ–∑–¥–∞–µ—Ç —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è OpenAI"""
        if not self.use_new_architecture:
            return self.legacy_agent._create_system_message(user_name, is_admin, intent)
        
        # –î–ª—è –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã —ç—Ç–æ –¥–µ–ª–∞–µ—Ç—Å—è –≤ ResponseGenerator
        return ""
    
    def _get_fallback_response(self, user_message: str, intent: dict) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–≤–µ—Ç –∫–æ–≥–¥–∞ OpenAI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"""
        if not self.use_new_architecture:
            return self.legacy_agent._get_fallback_response(user_message, intent)
        
        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    
    async def ensure_user_exists(self, user_id: int, user_name: str) -> None:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Zep –∏ —Å–æ–∑–¥–∞–µ—Ç –µ—Å–ª–∏ –Ω—É–∂–Ω–æ"""
        if not self.use_new_architecture:
            return await self.legacy_agent.ensure_user_exists(user_id, user_name)
        
        # –í –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ —ç—Ç–æ –¥–µ–ª–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤ MemoryManager
        pass
    
    async def clear_user_memory(self, user_id: int) -> bool:
        """–û—á–∏—â–∞–µ—Ç –ø–∞–º—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if not self.use_new_architecture:
            return await self.legacy_agent.clear_user_memory(user_id)
        
        try:
            return await self.agent.clear_user_memory(user_id)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ø–∞–º—è—Ç–∏: {e}")
            return False


# –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ä–æ–µ –∏–º—è –∫–ª–∞—Å—Å–∞
MyAssistant = myassistant