"""
Middleware –¥–ª—è webhook —Å–µ—Ä–≤–µ—Ä–∞
"""

import time
import logging
from typing import Callable
from fastapi import Request, Response
from fastapi.responses import JSONResponse
from starlette.middleware.base import BaseHTTPMiddleware

from ..core.config import config

logger = logging.getLogger(__name__)


class SecurityMiddleware(BaseHTTPMiddleware):
    """Middleware –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    
    async def dispatch(self, request: Request, call_next: Callable) -> Response:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ secret token –¥–ª—è webhook
        if request.url.path == "/webhook":
            secret_token = request.headers.get("X-Telegram-Bot-Api-Secret-Token")
            expected_token = config.webhook.secret_token
            
            # –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            logger.info(f"üîê Webhook security check:")
            logger.info(f"   Headers: {dict(request.headers)}")
            logger.info(f"   Received token: {secret_token}")
            logger.info(f"   Expected token: {expected_token}")
            
            # –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            if False and secret_token != expected_token:
                logger.warning(f"‚ùå Invalid secret token from {request.client.host if request.client else 'unknown'}")
                return JSONResponse(
                    status_code=200,  # Telegram —Ç—Ä–µ–±—É–µ—Ç 200 OK
                    content={"ok": False, "error": "Invalid secret token"}
                )
        
        response = await call_next(request)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        response.headers["X-Content-Type-Options"] = "nosniff"
        response.headers["X-Frame-Options"] = "DENY"
        response.headers["X-XSS-Protection"] = "1; mode=block"
        
        return response


class LoggingMiddleware(BaseHTTPMiddleware):
    """Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤"""
    
    async def dispatch(self, request: Request, call_next: Callable) -> Response:
        start_time = time.time()
        
        # –õ–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥—è—â–∏–π –∑–∞–ø—Ä–æ—Å
        logger.debug(f"üîµ {request.method} {request.url.path}")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å
        response = await call_next(request)
        
        # –°—á–∏—Ç–∞–µ–º –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        process_time = time.time() - start_time
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        status_emoji = "üü¢" if response.status_code < 400 else "üî¥"
        logger.info(
            f"{status_emoji} {request.method} {request.url.path} "
            f"-> {response.status_code} ({process_time:.3f}s)"
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –≤—Ä–µ–º–µ–Ω–µ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏
        response.headers["X-Process-Time"] = str(process_time)
        
        return response


class ErrorHandlerMiddleware(BaseHTTPMiddleware):
    """Middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫"""
    
    async def dispatch(self, request: Request, call_next: Callable) -> Response:
        try:
            return await call_next(request)
        except Exception as e:
            logger.error(f"‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
            
            # –í production —Å–∫—Ä—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –æ—à–∏–±–æ–∫
            if config.environment.value == "production":
                return JSONResponse(
                    status_code=500,
                    content={"error": "Internal server error"}
                )
            else:
                # –í debug —Ä–µ–∂–∏–º–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                import traceback
                return JSONResponse(
                    status_code=500,
                    content={
                        "error": str(e),
                        "type": type(e).__name__,
                        "traceback": traceback.format_exc()
                    }
                )


class WebhookMiddleware:
    """–û—Å–Ω–æ–≤–Ω–æ–π middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook"""
    
    def __init__(self):
        self.request_counter = 0
        self.last_requests = []
    
    async def process_webhook(self, request: Request) -> dict:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç webhook –∑–∞–ø—Ä–æ—Å
        
        Args:
            request: FastAPI Request –æ–±—ä–µ–∫—Ç
            
        Returns:
            dict: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏
        """
        self.request_counter += 1
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        try:
            data = await request.json()
        except:
            return {"ok": False, "error": "Invalid JSON"}
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        if config.debug:
            self.last_requests.append({
                "id": self.request_counter,
                "timestamp": time.time(),
                "data": data
            })
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏
            if len(self.last_requests) > 10:
                self.last_requests.pop(0)
        
        return {"ok": True, "data": data}