"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ webhook –∑–∞–ø—Ä–æ—Å–æ–≤
"""

import logging
from typing import Dict, Any, Optional
from datetime import datetime

from ..core.interfaces import Message, User, MessageType, UserRole
from ..core.agent import AgentFactory
from ..core.config import config
# –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã —Å–µ—Ä–≤–∏—Å–æ–≤
try:
    from ..services.voice_service import voice_service
except ImportError:
    voice_service = None

try:
    from ..services.social_media_service import social_media_service
except ImportError:
    social_media_service = None

try:
    from ..services.youtube_transcript_service import youtube_transcript_service
except ImportError:
    youtube_transcript_service = None

try:
    from ..services.claude_code_service import claude_code_service
except ImportError:
    claude_code_service = None

from ..auth import is_admin, get_user_mode

logger = logging.getLogger(__name__)


class WebhookHandler:
    """–û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ webhook –∑–∞–ø—Ä–æ—Å–æ–≤"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞"""
        self.agent = AgentFactory.get_agent()
        self.update_counter = 0
        self.last_updates = []
    
    async def handle_update(self, update: Dict[str, Any]) -> Dict[str, Any]:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–π update –æ—Ç Telegram
        
        Args:
            update: Update –æ—Ç Telegram API
            
        Returns:
            Dict[str, Any]: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏
        """
        logger.info(f"üì• Received update: {update}")
        
        self.update_counter += 1
        update_id = update.get('update_id', self.update_counter)
        
        logger.info(f"üì® Processing update #{update_id}, total: {self.update_counter}")
        
        # –í—Å–µ–≥–¥–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ (–Ω–µ —Ç–æ–ª—å–∫–æ –≤ debug —Ä–µ–∂–∏–º–µ)
        self._save_update_for_debug(update)
        logger.info(f"üíæ Saved to debug. Total updates in memory: {len(self.last_updates)}")
        
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø update
            if 'message' in update:
                return await self._handle_message(update['message'])
            elif 'callback_query' in update:
                return await self._handle_callback_query(update['callback_query'])
            elif 'business_message' in update:
                return await self._handle_business_message(update['business_message'])
            elif 'business_connection' in update:
                return await self._handle_business_connection(update['business_connection'])
            else:
                logger.warning(f"‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø update: {list(update.keys())}")
                return {"ok": True, "description": "Unknown update type"}
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ update {update_id}: {e}", exc_info=True)
            return {"ok": False, "error": str(e)}
    
    async def _handle_message(self, telegram_message: Dict[str, Any]) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        try:
            logger.info(f"üì© Processing message: {telegram_message}")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            user_data = telegram_message.get('from', {})
            chat_id = telegram_message.get('chat', {}).get('id')
            text = telegram_message.get('text')
            voice = telegram_message.get('voice')
            
            logger.info(f"üë§ User: {user_data.get('username', 'Unknown')} ({user_data.get('id', 'Unknown')})")
            logger.info(f"üí¨ Text: {text}")
            logger.info(f"üé§ Voice: {bool(voice)}")
            
            # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = User(
                id=user_data.get('id'),
                username=user_data.get('username'),
                first_name=user_data.get('first_name'),
                last_name=user_data.get('last_name'),
                role=UserRole.ADMIN if is_admin(user_data.get('id')) else UserRole.USER
            )
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è
            if voice:
                message_type = MessageType.VOICE
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≥–æ–ª–æ—Å —á–µ—Ä–µ–∑ Voice Service
                if voice_service and config.voice.enabled:
                    text = await self._process_voice(voice, user.id)
                    if not text:
                        return {"ok": True, "description": "Voice processing failed"}
                else:
                    return {"ok": True, "description": "Voice service disabled"}
            elif text:
                message_type = MessageType.TEXT
            else:
                message_type = MessageType.OTHER
            
            # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            message = Message(
                id=telegram_message.get('message_id'),
                user=user,
                chat_id=chat_id,
                text=text,
                type=message_type,
                timestamp=datetime.fromtimestamp(telegram_message.get('date', 0)),
                metadata={"telegram_message": telegram_message}
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
            if text and text.startswith('/'):
                special_response = await self._handle_special_command(message)
                if special_response:
                    return special_response
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º Social Media –∏–Ω—Ç–µ–Ω—Ç
            if text and social_media_service:
                social_response = await self._handle_social_media(message)
                if social_response:
                    return social_response
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ AI –∞–≥–µ–Ω—Ç–∞
            response = await self.agent.process_message(message)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
            try:
                from ..telegram_bot import bot
                logger.info(f"üì§ Sending response to {chat_id}: {response.text[:100]}...")
                result = bot.send_message(chat_id, response.text)
                logger.info(f"‚úÖ Response sent successfully. Message ID: {result.message_id if hasattr(result, 'message_id') else 'Unknown'}")
                return {"ok": True, "response_sent": True, "message_id": result.message_id if hasattr(result, 'message_id') else None}
            except ImportError as e:
                logger.error(f"‚ùå Failed to import telegram bot: {e}", exc_info=True)
                # Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º requests –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
                import requests
                url = f"https://api.telegram.org/bot{config.telegram.token}/sendMessage"
                data = {"chat_id": chat_id, "text": response.text}
                try:
                    resp = requests.post(url, json=data)
                    if resp.ok:
                        logger.info(f"‚úÖ Response sent via API")
                        return {"ok": True, "response_sent": True}
                    else:
                        logger.error(f"‚ùå API error: {resp.text}")
                        return {"ok": True, "response_sent": False, "error": resp.text}
                except Exception as api_error:
                    logger.error(f"‚ùå Failed to send via API: {api_error}")
                    return {"ok": True, "response_sent": False, "error": str(api_error)}
            except Exception as e:
                logger.error(f"‚ùå Failed to send response: {e}", exc_info=True)
                return {"ok": True, "response_sent": False, "error": str(e)}
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}", exc_info=True)
            return {"ok": False, "error": str(e)}
    
    async def _handle_callback_query(self, callback_query: Dict[str, Any]) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback query"""
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É callback queries
        return {"ok": True, "description": "Callback query handled"}
    
    async def _handle_business_message(self, business_message: Dict[str, Any]) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç Business API —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–æ —Å business_connection_id
        result = await self._handle_message(business_message)
        
        # –î–æ–±–∞–≤–ª—è–µ–º business_connection_id –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        if result.get('ok'):
            result['business_connection_id'] = business_message.get('business_connection_id')
        
        return result
    
    async def _handle_business_connection(self, connection: Dict[str, Any]) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç Business API connection"""
        logger.info(f"üì± Business connection update: {connection}")
        
        connection_id = connection.get('id')
        is_enabled = connection.get('is_enabled', False)
        user_data = connection.get('user', {})
        
        if is_enabled:
            logger.info(f"‚úÖ Business connection —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {connection_id}")
        else:
            logger.info(f"‚ùå Business connection –æ—Ç–∫–ª—é—á–µ–Ω–æ: {connection_id}")
        
        return {"ok": True, "description": f"Business connection {'enabled' if is_enabled else 'disabled'}"}
    
    async def _process_voice(self, voice_data: Dict[str, Any], user_id: int) -> Optional[str]:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        try:
            file_id = voice_data.get('file_id')
            if not file_id:
                return None
            
            # –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ Voice Service
            result = await voice_service.process_voice_message(file_id, user_id)
            
            if result and result.get('success'):
                return result.get('text')
            
            return None
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–∞: {e}")
            return None
    
    async def _handle_special_command(self, message: Message) -> Optional[Dict[str, Any]]:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã"""
        command = message.text.split()[0].lower()
        
        # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –≤—Å–µ—Ö
        if command == '/start':
            from ..telegram_bot import bot
            welcome_text = self._get_welcome_message(message.user)
            try:
                # –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º HTML —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                bot.send_message(message.chat_id, "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
                logger.info(f"‚úÖ Welcome message sent to {message.chat_id}")
            except Exception as e:
                logger.error(f"‚ùå Failed to send welcome message: {e}", exc_info=True)
            return {"ok": True, "command": "start"}
        
        elif command == '/help':
            from ..telegram_bot import bot
            help_text = self._get_help_message(message.user)
            try:
                bot.send_message(message.chat_id, help_text, parse_mode='HTML')
                logger.info(f"‚úÖ Help message sent to {message.chat_id}")
            except Exception as e:
                logger.error(f"‚ùå Failed to send help message: {e}", exc_info=True)
            return {"ok": True, "command": "help"}
        
        # –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã
        if message.user.role == UserRole.ADMIN:
            if command == '/clear':
                success = await self.agent.clear_user_memory(message.user.id)
                from ..telegram_bot import bot
                try:
                    if success:
                        bot.send_message(message.chat_id, "‚úÖ –ü–∞–º—è—Ç—å –æ—á–∏—â–µ–Ω–∞")
                    else:
                        bot.send_message(message.chat_id, "‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ø–∞–º—è—Ç–∏")
                    logger.info(f"‚úÖ Clear memory response sent to {message.chat_id}")
                except Exception as e:
                    logger.error(f"‚ùå Failed to send clear memory response: {e}", exc_info=True)
                return {"ok": True, "command": "clear"}
            
            # MCP –∫–æ–º–∞–Ω–¥—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
            elif claude_code_service and (
                command.startswith('/mcp') or 
                command == '/db' or 
                command == '/docs' or
                message.text.startswith('/mcp ') or
                message.text.startswith('/db ') or
                message.text.startswith('/docs ')
            ):
                logger.info(f"üîå Processing MCP command: {message.text}")
                from ..telegram_bot import bot
                
                try:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
                    bot.send_message(message.chat_id, "‚è≥ –í—ã–ø–æ–ª–Ω—è—é MCP –∫–æ–º–∞–Ω–¥—É...")
                    
                    # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É —á–µ—Ä–µ–∑ Claude Code
                    result = await claude_code_service.execute_mcp_command(
                        message.text, 
                        str(message.user.id)
                    )
                    
                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
                    if result.get("success"):
                        response_text = result.get("response", "–ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
                        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è
                        if len(response_text) > 4000:
                            response_text = response_text[:3997] + "..."
                    else:
                        response_text = f"‚ùå –û—à–∏–±–∫–∞: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    bot.send_message(message.chat_id, response_text, parse_mode='Markdown')
                    logger.info(f"‚úÖ MCP response sent to {message.chat_id}")
                    
                except Exception as e:
                    logger.error(f"‚ùå Failed to execute MCP command: {e}", exc_info=True)
                    try:
                        bot.send_message(
                            message.chat_id, 
                            f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è MCP –∫–æ–º–∞–Ω–¥—ã: {str(e)}"
                        )
                    except:
                        pass
                
                return {"ok": True, "command": "mcp", "mcp_command": message.text}
        
        return None
    
    async def _handle_social_media(self, message: Message) -> Optional[Dict[str, Any]]:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç Social Media –∑–∞–ø—Ä–æ—Å—ã"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ç–µ–Ω—Ç —á–µ—Ä–µ–∑ –¥–µ—Ç–µ–∫—Ç–æ—Ä
        from ..services.intent_detector import IntentDetector
        detector = IntentDetector()
        intent = await detector.detect(message)
        
        if intent['type'] in ['youtube_url', 'social_media'] and message.user.role == UserRole.ADMIN:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ Social Media Service
            result = await social_media_service.process_message(
                message.text,
                message.user.id,
                message.user.full_name
            )
            
            if result and result.get('success'):
                from ..telegram_bot import bot
                try:
                    bot.send_message(message.chat_id, result.get('response'), parse_mode='HTML')
                    logger.info(f"‚úÖ Social media response sent to {message.chat_id}")
                except Exception as e:
                    logger.error(f"‚ùå Failed to send social media response: {e}", exc_info=True)
                return {"ok": True, "social_media": True}
        
        return None
    
    def _get_welcome_message(self, user: User) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        if user.role == UserRole.ADMIN:
            from ..auth import format_admin_welcome_message
            return format_admin_welcome_message(user.id, user.username)
        else:
            from ..auth import format_user_welcome_message
            return format_user_welcome_message(user.full_name, user.id)
    
    def _get_help_message(self, user: User) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç help —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        if user.role == UserRole.ADMIN:
            return """
<b>üìã –ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:</b>

/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
/clear - –û—á–∏—Å—Ç–∏—Ç—å –ø–∞–º—è—Ç—å –±–æ—Ç–∞
/youtube &lt;url&gt; - –ê–Ω–∞–ª–∏–∑ YouTube –≤–∏–¥–µ–æ
/status - –°—Ç–∞—Ç—É—Å –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
/test - –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º

<b>üé§ –ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è:</b>
–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏

<b>üí¨ –û–±—ã—á–Ω—ã–π —á–∞—Ç:</b>
–ü—Ä–æ—Å—Ç–æ –ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å AI
"""
        else:
            return """
<b>üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>

/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
/start - –ù–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞

<b>üí¨ –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:</b>
–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –æ—Ç–≤–µ—á—É!

<b>üé§ –ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è:</b>
–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è - —è –∏—Ö —Ä–∞—Å—à–∏—Ñ—Ä—É—é
"""
    
    def _save_update_for_debug(self, update: Dict[str, Any]):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç update –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"""
        self.last_updates.append({
            "id": self.update_counter,
            "timestamp": datetime.now().isoformat(),
            "update": update
        })
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä
        if len(self.last_updates) > 10:
            self.last_updates.pop(0)


# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
webhook_handler = WebhookHandler()