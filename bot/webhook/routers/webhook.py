"""
Webhook management endpoints
"""

import logging
from fastapi import APIRouter, Request, HTTPException
from typing import Optional

from ...core.config import config
from ..handlers import webhook_handler
from ..services import WebhookService

router = APIRouter()
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å
webhook_service = WebhookService()


@router.post("")
async def webhook_endpoint(request: Request):
    """–û—Å–Ω–æ–≤–Ω–æ–π webhook endpoint –¥–ª—è –ø—Ä–∏–µ–º–∞ updates –æ—Ç Telegram"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        update = await request.json()
        
        # –õ–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥—è—â–∏–π update
        logger.info(f"üì• Received update: {update}")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º update
        result = await webhook_handler.handle_update(update)
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        logger.info(f"üì§ Response: {result}")
        
        # Telegram —Ç—Ä–µ–±—É–µ—Ç –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å 200 OK
        return result
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ webhook: {e}", exc_info=True)
        # –í—Å–µ —Ä–∞–≤–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 200 OK –¥–ª—è Telegram
        return {"ok": False, "error": str(e)}


@router.get("/info")
async def get_webhook_info():
    """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º webhook"""
    return await webhook_service.get_webhook_info()


@router.get("/set")
async def set_webhook_browser():
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å webhook (GET –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–∞)"""
    return await webhook_service.setup_webhook()


@router.post("/set")
async def set_webhook(
    url: Optional[str] = None,
    secret_token: Optional[str] = None
):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å webhook —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏"""
    return await webhook_service.setup_webhook(
        custom_url=url,
        custom_secret=secret_token
    )


@router.delete("")
async def delete_webhook():
    """–£–¥–∞–ª–∏—Ç—å webhook"""
    return await webhook_service.delete_webhook()


@router.post("/update-settings")
async def update_webhook_settings(
    allowed_updates: Optional[list] = None,
    max_connections: Optional[int] = None,
    drop_pending_updates: bool = False
):
    """–û–±–Ω–æ–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook"""
    current_info = await webhook_service.get_webhook_info()
    
    if not current_info.get('webhook_url'):
        raise HTTPException(status_code=400, detail="Webhook not set")
    
    # –ü–µ—Ä–µ—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook —Å –Ω–æ–≤—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    return await webhook_service.setup_webhook(
        allowed_updates=allowed_updates,
        max_connections=max_connections,
        drop_pending_updates=drop_pending_updates
    )