"""
Debug endpoints –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
"""

import os
from fastapi import APIRouter, HTTPException
from typing import Optional
from datetime import datetime

from ...core.config import config
from ..handlers import webhook_handler
from ..services import ServiceManager, DebugService

router = APIRouter()

# –í–∫–ª—é—á–∞–µ–º —Ç–æ–ª—å–∫–æ –≤ debug —Ä–µ–∂–∏–º–µ
# –í—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
# if not config.debug:
#     router = APIRouter()  # –ü—É—Å—Ç–æ–π —Ä–æ—É—Ç–µ—Ä –≤ production


@router.get("/last-updates")
async def get_last_updates():
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ updates"""
    return {
        "total_updates": webhook_handler.update_counter,
        "last_updates": webhook_handler.last_updates,
        "timestamp": datetime.now().isoformat()
    }


@router.get("/service-status")
async def get_service_status():
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"""
    service_manager = ServiceManager()
    return service_manager.get_detailed_status()


@router.get("/config")
async def get_config():
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é (–±–µ–∑ —Å–µ–∫—Ä–µ—Ç–æ–≤)"""
    return config.get_safe_config()


@router.get("/logs/recent")
async def get_recent_logs(lines: int = 50):
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –∏–∑ –ª–æ–≥ —Ñ–∞–π–ª–∞"""
    debug_service = DebugService()
    return debug_service.get_recent_logs(lines)


@router.get("/memory/{user_id}")
async def get_user_memory(user_id: int):
    """–ü–æ–ª—É—á–∏—Ç—å –ø–∞–º—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    from ...core.agent import AgentFactory
    agent = AgentFactory.get_agent()
    
    try:
        context = await agent.memory_manager.get_context(user_id)
        summary = await agent.memory_manager.get_session_summary(user_id)
        
        return {
            "user_id": user_id,
            "context_size": len(context),
            "context": context,
            "summary": summary,
            "timestamp": datetime.now().isoformat()
        }
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))


@router.get("/agent-status")
async def get_agent_status():
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å AI –∞–≥–µ–Ω—Ç–∞"""
    from ...core.agent import AgentFactory
    agent = AgentFactory.get_agent()
    
    return await agent.get_agent_status()


@router.get("/test-mode-status")
async def get_test_mode_status():
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞"""
    debug_service = DebugService()
    return debug_service.get_test_mode_status()


@router.post("/test-mode/{action}")
async def toggle_test_mode(action: str):
    """–í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º"""
    if action not in ["enable", "disable"]:
        raise HTTPException(status_code=400, detail="Action must be 'enable' or 'disable'")
    
    debug_service = DebugService()
    result = debug_service.set_test_mode(action == "enable")
    
    return result


@router.get("/environment")
async def get_environment():
    """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–∫—Ä—É–∂–µ–Ω–∏–∏"""
    return {
        "environment": config.environment.value,
        "debug": config.debug,
        "python_version": os.sys.version,
        "working_directory": os.getcwd(),
        "env_vars": {
            key: "***" if any(secret in key.lower() for secret in ["key", "token", "secret", "password"]) else value
            for key, value in os.environ.items()
            if key.startswith("BOT_") or key.startswith("TELEGRAM_") or key.startswith("OPENAI_")
        }
    }


@router.post("/clear-cache")
async def clear_cache():
    """–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –∫–µ—à–∏"""
    from ...core.utils import CacheUtils
    CacheUtils.clear_all()
    
    return {"status": "Cache cleared", "timestamp": datetime.now().isoformat()}


@router.post("/test-send-message")
async def test_send_message(chat_id: int, text: str):
    """–¢–µ—Å—Ç–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ –±–æ—Ç–∞"""
    import logging
    logger = logging.getLogger(__name__)
    
    try:
        from ...telegram_bot import bot
        logger.info(f"üì§ Attempting to send message to {chat_id}: {text}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
        logger.info(f"ü§ñ Bot token exists: {bool(bot.token)}")
        logger.info(f"ü§ñ Bot token (masked): {bot.token[:10]}...{bot.token[-5:] if bot.token else 'None'}")
        
        # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
        result = bot.send_message(chat_id, text)
        
        logger.info(f"‚úÖ Message sent successfully: {result}")
        return {
            "success": True,
            "message_id": result.message_id if hasattr(result, 'message_id') else None,
            "chat_id": chat_id,
            "text": text,
            "timestamp": datetime.now().isoformat()
        }
        
    except Exception as e:
        logger.error(f"‚ùå Failed to send message: {e}", exc_info=True)
        return {
            "success": False,
            "error": str(e),
            "error_type": type(e).__name__,
            "chat_id": chat_id,
            "text": text,
            "timestamp": datetime.now().isoformat()
        }


@router.get("/mcp-status")
async def mcp_status():
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö MCP —Å–µ—Ä–≤–µ—Ä–æ–≤"""
    from ..handlers import webhook_handler
    
    if not webhook_handler.mcp_manager:
        return {
            "error": "MCP Manager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω",
            "mcp_enabled": config.mcp.enabled
        }
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–æ–≤
    server_status = webhook_handler.mcp_manager.get_server_status()
    
    # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
    metrics = webhook_handler.mcp_manager.get_metrics()
    
    # –°—Ç–∞—Ç—É—Å MCP Agent
    mcp_agent_status = {}
    if webhook_handler.mcp_agent:
        mcp_agent_status = webhook_handler.mcp_agent.get_mcp_status()
    
    return {
        "mcp_enabled": config.mcp.enabled,
        "servers": server_status,
        "metrics": metrics,
        "mcp_agent": mcp_agent_status,
        "timestamp": datetime.now().isoformat()
    }


@router.post("/mcp-ping")
async def mcp_ping():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤—Å–µ—Ö MCP —Å–µ—Ä–≤–µ—Ä–æ–≤"""
    from ..handlers import webhook_handler
    
    if not webhook_handler.mcp_manager:
        return {
            "error": "MCP Manager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"
        }
    
    # –ü–∏–Ω–≥—É–µ–º –≤—Å–µ —Å–µ—Ä–≤–µ—Ä—ã
    ping_results = await webhook_handler.mcp_manager.ping_all_servers()
    
    return {
        "ping_results": ping_results,
        "timestamp": datetime.now().isoformat()
    }


@router.post("/mcp-test")
async def mcp_test(
    service: str,
    function: str,
    parameters: dict = {}
):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é MCP —Ñ—É–Ω–∫—Ü–∏—é"""
    from ..handlers import webhook_handler
    
    if not webhook_handler.mcp_manager:
        return {
            "error": "MCP Manager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"
        }
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —Ñ—É–Ω–∫—Ü–∏–∏
    function_name = f"{service}_{function}"
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é
    result = await webhook_handler.mcp_manager.execute_function(
        function_name=function_name,
        parameters=parameters,
        user_id="debug_test"
    )
    
    return {
        "function": function_name,
        "parameters": parameters,
        "result": {
            "success": result.success,
            "data": result.data,
            "error": result.error,
            "execution_time": result.execution_time,
            "server": result.server
        },
        "timestamp": datetime.now().isoformat()
    }


@router.post("/mcp-clear-cache")
async def mcp_clear_cache():
    """–û—á–∏—Å—Ç–∏—Ç—å –∫–µ—à MCP —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
    from ..handlers import webhook_handler
    
    if not webhook_handler.mcp_manager:
        return {
            "error": "MCP Manager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"
        }
    
    webhook_handler.mcp_manager.clear_cache()
    
    return {
        "success": True,
        "message": "MCP –∫–µ—à –æ—á–∏—â–µ–Ω",
        "timestamp": datetime.now().isoformat()
    }


@router.post("/mcp-reload-config")
async def mcp_reload_config():
    """–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é MCP"""
    from ..handlers import webhook_handler
    
    if webhook_handler.mcp_agent:
        webhook_handler.mcp_agent.reload_mcp_config()
        return {
            "success": True,
            "message": "MCP –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω–∞",
            "timestamp": datetime.now().isoformat()
        }
    else:
        return {
            "error": "MCP Agent –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"
        }


@router.get("/voice-status")  
async def voice_status():
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å Voice Service"""
    from ...voice import voice_service
    
    return {
        "voice_enabled": config.voice.enabled,
        "voice_service_initialized": voice_service is not None,
        "voice_service_status": voice_service.get_status() if voice_service else None,
        "timestamp": datetime.now().isoformat()
    }


@router.get("/current-prompt")
async def get_current_prompt():
    """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –ø—Ä–æ–º–ø—Ç–µ –±–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    import json
    
    instruction_file = config.data_dir / "instruction.json"
    
    if not instruction_file.exists():
        return {
            "error": "–§–∞–π–ª –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω",
            "instruction_file": str(instruction_file),
            "exists": False,
            "timestamp": datetime.now().isoformat()
        }
    
    try:
        with open(instruction_file, 'r', encoding='utf-8') as f:
            instruction_data = json.load(f)
        
        return {
            "instruction_file": str(instruction_file),
            "exists": True,
            "last_updated": instruction_data.get("last_updated", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"),
            "system_instruction_length": len(instruction_data.get("system_instruction", "")),
            "welcome_message_length": len(instruction_data.get("welcome_message", "")),
            "has_system_instruction": bool(instruction_data.get("system_instruction")),
            "has_welcome_message": bool(instruction_data.get("welcome_message")),
            "timestamp": datetime.now().isoformat()
        }
    except Exception as e:
        return {
            "error": f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {str(e)}",
            "instruction_file": str(instruction_file),
            "exists": True,
            "timestamp": datetime.now().isoformat()
        }


@router.get("/webhook-config")
async def webhook_config():
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ webhook"""
    from ..services import WebhookService
    
    try:
        webhook_service = WebhookService()
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π webhook info –æ—Ç Telegram
        webhook_info = await webhook_service.get_webhook_info()
        
        # –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        env_vars = {
            "WEBHOOK_URL": os.getenv('WEBHOOK_URL'),
            "BASE_URL": os.getenv('BASE_URL'),
            "RAILWAY_PUBLIC_DOMAIN": os.getenv('RAILWAY_PUBLIC_DOMAIN'),
            "TELEGRAM_WEBHOOK_SECRET": "***" if os.getenv('TELEGRAM_WEBHOOK_SECRET') else None,
            "AUTO_SETUP_WEBHOOK": os.getenv('AUTO_SETUP_WEBHOOK', 'true')
        }
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ config
        webhook_config_info = {
            "base_url": config.webhook.base_url,
            "auto_setup": config.webhook.auto_setup,
            "secret_token": "***" if config.webhook.secret_token else None,
            "allowed_updates": config.webhook.allowed_updates,
            "max_connections": config.webhook.max_connections
        }
        
        # –í—ã—á–∏—Å–ª—è–µ–º—ã–π webhook URL
        computed_webhook_url = f"{config.webhook.base_url}/webhook" if config.webhook.base_url else "INVALID"
        
        return {
            "timestamp": datetime.now().isoformat(),
            "environment_variables": env_vars,
            "webhook_config": webhook_config_info,
            "computed_webhook_url": computed_webhook_url,
            "telegram_webhook_info": webhook_info,
            "validation": {
                "base_url_valid": bool(config.webhook.base_url and config.webhook.base_url != ""),
                "webhook_url_valid": computed_webhook_url != "INVALID" and computed_webhook_url != "/webhook",
                "telegram_webhook_set": webhook_info.get("webhook_url") != "‚ùå Not set" if isinstance(webhook_info, dict) else False
            }
        }
        
    except Exception as e:
        return {
            "error": str(e),
            "timestamp": datetime.now().isoformat()
        }