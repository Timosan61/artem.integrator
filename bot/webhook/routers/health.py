"""
Health check endpoints
"""

from fastapi import APIRouter
from datetime import datetime

from ...core.config import config
from ...telegram_bot import bot
from ..services import ServiceManager

router = APIRouter()


@router.get("/")
async def health_check():
    """–û—Å–Ω–æ–≤–Ω–æ–π health check endpoint"""
    try:
        bot_info = bot.get_me()
        service_manager = ServiceManager()
        
        return {
            "status": "üü¢ ONLINE",
            "service": "Artyom Integrator Webhook",
            "bot": f"@{bot_info.username}",
            "bot_id": bot_info.id,
            "mode": "WEBHOOK",
            "timestamp": datetime.now().isoformat(),
            "environment": config.environment.value,
            "services": service_manager.get_services_status(),
            "endpoints": {
                "webhook_info": "/webhook/info",
                "set_webhook": "/webhook/set",
                "delete_webhook": "/webhook (DELETE method)",
                "debug": "/debug/*" if config.debug else None,
                "admin": "/admin/*" if (config.admin.user_ids or config.admin.usernames) else None
            }
        }
    except Exception as e:
        return {
            "status": "üî¥ ERROR",
            "error": str(e),
            "timestamp": datetime.now().isoformat()
        }


@router.get("/health")
async def railway_health():
    """–£–ø—Ä–æ—â—ë–Ω–Ω—ã–π healthcheck –¥–ª—è Railway"""
    try:
        # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - —Ç–æ–ª—å–∫–æ Telegram –±–æ—Ç
        bot.get_me()
        
        return {
            "status": "healthy",
            "service": "Artyom Integrator",
            "timestamp": datetime.now().isoformat()
        }
        
    except Exception as e:
        return {
            "status": "unhealthy",
            "error": str(e),
            "timestamp": datetime.now().isoformat()
        }


@router.get("/health/detailed")
async def detailed_health():
    """–î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–¥–æ—Ä–æ–≤—å–µ —Å–µ—Ä–≤–∏—Å–∞"""
    try:
        service_manager = ServiceManager()
        
        health_data = {
            "status": "healthy",
            "timestamp": datetime.now().isoformat(),
            "uptime": service_manager.get_uptime(),
            "services": {}
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —Å–µ—Ä–≤–∏—Å —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        services_status = service_manager.get_services_status()
        for service_name, status in services_status.items():
            health_data["services"][service_name] = {
                "status": status,
                "healthy": status in ["‚úÖ ENABLED", "‚úÖ AVAILABLE", "‚úÖ CONNECTED"]
            }
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–∏–π —Å—Ç–∞—Ç—É—Å
        critical_services = ["telegram", "agent"]  # –ö—Ä–∏—Ç–∏—á–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã
        critical_healthy = all(
            health_data["services"][service]["healthy"] 
            for service in critical_services 
            if service in health_data["services"]
        )
        
        if critical_healthy:
            health_data["status"] = "healthy"
        elif any(s["healthy"] for s in health_data["services"].values()):
            health_data["status"] = "degraded"
        else:
            health_data["status"] = "unhealthy"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        health_data["diagnostics"] = _get_health_diagnostics(service_manager)
        
        return health_data
        
    except Exception as e:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        return {
            "status": "error",
            "error": str(e),
            "timestamp": datetime.now().isoformat(),
            "error_type": type(e).__name__
        }


def _get_health_diagnostics(service_manager: ServiceManager) -> dict:
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é"""
    try:
        return {
            "telegram_bot_info": _get_telegram_info(),
            "config_status": _get_config_status(),
            "python_info": {
                "version": f"{config.environment.value}",
                "debug": config.debug
            }
        }
    except Exception as e:
        return {"error": str(e)}


def _get_telegram_info() -> dict:
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ Telegram –±–æ—Ç–µ"""
    try:
        bot_info = bot.get_me()
        return {
            "bot_username": bot_info.username,
            "bot_id": bot_info.id,
            "can_join_groups": bot_info.can_join_groups,
            "can_read_all_group_messages": bot_info.can_read_all_group_messages,
            "supports_inline_queries": bot_info.supports_inline_queries
        }
    except Exception as e:
        return {"error": str(e)}


def _get_config_status() -> dict:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π"""
    return {
        "openai_enabled": config.openai.enabled,
        "anthropic_enabled": config.anthropic.enabled,
        "voice_enabled": config.voice.enabled,
        "mcp_enabled": config.mcp.enabled,
        "zep_enabled": config.zep.enabled,
        "environment": config.environment.value,
        "webhook_base_url": config.webhook.base_url is not None
    }


@router.get("/ready")
async def readiness_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–∞"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram
        bot.get_me()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã
        service_manager = ServiceManager()
        critical_services = ["telegram", "agent"]
        
        for service in critical_services:
            if not service_manager.is_service_healthy(service):
                return {
                    "ready": False,
                    "reason": f"Service {service} is not healthy"
                }
        
        return {"ready": True}
        
    except Exception as e:
        return {
            "ready": False,
            "reason": str(e)
        }


@router.get("/live")
async def liveness_check():
    """–ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ —Å–µ—Ä–≤–∏—Å –∂–∏–≤"""
    return {"alive": True, "timestamp": datetime.now().isoformat()}