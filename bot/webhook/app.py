"""
–°–æ–∑–¥–∞–Ω–∏–µ –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
"""

import logging
from typing import Optional
from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware

from ..core import config
from .middleware import SecurityMiddleware, LoggingMiddleware, ErrorHandlerMiddleware
from .routers import health, webhook, debug, admin, test

logger = logging.getLogger(__name__)


def create_app(title: Optional[str] = None, description: Optional[str] = None) -> FastAPI:
    """
    –°–æ–∑–¥–∞–µ—Ç –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä—É–µ—Ç FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    
    Args:
        title: –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        description: –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        
    Returns:
        FastAPI: –°–∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    """
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    app = FastAPI(
        title=title or "ü§ñ Artyom Integrator Bot",
        description=description or "Webhook server –¥–ª—è Telegram –±–æ—Ç–∞",
        version="2.0.0",
        docs_url="/docs" if config.debug else None,
        redoc_url="/redoc" if config.debug else None
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º middleware
    app.add_middleware(ErrorHandlerMiddleware)
    app.add_middleware(LoggingMiddleware)
    app.add_middleware(SecurityMiddleware)
    
    # CORS –¥–ª—è debug —Ä–µ–∂–∏–º–∞
    if config.debug:
        app.add_middleware(
            CORSMiddleware,
            allow_origins=["*"],
            allow_credentials=True,
            allow_methods=["*"],
            allow_headers=["*"],
        )
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä—ã
    app.include_router(health.router, tags=["Health"])
    app.include_router(webhook.router, prefix="/webhook", tags=["Webhook"])
    app.include_router(debug.router, prefix="/debug", tags=["Debug"])
    app.include_router(admin.router, prefix="/admin", tags=["Admin"])
    app.include_router(test.router, prefix="/test", tags=["Test"])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä—à—Ä—É—Ç—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    from .setup_routes import register_setup_routes
    register_setup_routes(app)
    
    # –°–æ–±—ã—Ç–∏—è –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
    @app.on_event("startup")
    async def startup_event():
        logger.info("üöÄ Webhook server starting...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–∏ Cloudflare Tunnel
        if config.cloudflare_tunnel_token:
            logger.info("üåê –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Cloudflare Tunnel")
            from ..services.cloudflare_tunnel import cloudflare_tunnel
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook —á–µ—Ä–µ–∑ Cloudflare
            success = await cloudflare_tunnel.setup_webhook(
                config.telegram_bot_token,
                config.webhook_secret_token
            )
            if success:
                logger.info("‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —á–µ—Ä–µ–∑ Cloudflare Tunnel")
            else:
                logger.error("‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook —á–µ—Ä–µ–∑ Cloudflare")
        
        # Fallback –Ω–∞ –æ–±—ã—á–Ω—É—é —É—Å—Ç–∞–Ω–æ–≤–∫—É webhook
        elif hasattr(config, 'webhook') and hasattr(config.webhook, 'auto_setup') and config.webhook.auto_setup:
            from .services import WebhookService
            webhook_service = WebhookService()
            result = await webhook_service.setup_webhook()
            if result['success']:
                logger.info("‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook: {result['error']}")
    
    @app.on_event("shutdown")
    async def shutdown_event():
        logger.info("üëã Webhook server shutting down...")
    
    return app