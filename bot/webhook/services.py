"""
–°–µ—Ä–≤–∏—Å—ã –¥–ª—è webhook —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
"""

import os
import json
import time
import logging
from typing import Dict, Any, Optional, List
from datetime import datetime, timedelta
import requests

from ..core.config import config
from ..telegram_bot import bot
from ..core.agent import AgentFactory

logger = logging.getLogger(__name__)


class WebhookService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è webhook"""
    
    def __init__(self):
        self.bot = bot
        self.base_url = config.webhook.base_url
    
    async def get_webhook_info(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º webhook"""
        try:
            info = self.bot.get_webhook_info()
            return {
                "webhook_url": info.url or "‚ùå Not set",
                "pending_updates": info.pending_update_count,
                "last_error": info.last_error_message,
                "last_error_date": info.last_error_date,
                "has_custom_certificate": info.has_custom_certificate,
                "allowed_updates": info.allowed_updates or ["all"],
                "max_connections": info.max_connections,
                "ip_address": info.ip_address
            }
        except Exception as e:
            logger.error(f"Error getting webhook info: {e}")
            return {"error": str(e)}
    
    async def setup_webhook(
        self,
        custom_url: Optional[str] = None,
        custom_secret: Optional[str] = None,
        allowed_updates: Optional[List[str]] = None,
        max_connections: Optional[int] = None,
        drop_pending_updates: bool = False
    ) -> Dict[str, Any]:
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç webhook"""
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º URL
            webhook_url = custom_url or f"{self.base_url}/webhook"
            secret_token = custom_secret or config.webhook.secret_token
            
            # –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
            logger.info(f"üîß Setting up webhook...")
            logger.info(f"   base_url: '{self.base_url}'")
            logger.info(f"   custom_url: '{custom_url}'")
            logger.info(f"   final webhook_url: '{webhook_url}'")
            logger.info(f"   secret_token: {'***' if secret_token else 'None'}")
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è URL
            if not webhook_url or webhook_url == "/webhook":
                error_msg = f"Invalid webhook URL: '{webhook_url}'. Check BASE_URL, RAILWAY_PUBLIC_DOMAIN or WEBHOOK_URL environment variables."
                logger.error(f"‚ùå {error_msg}")
                return {
                    "success": False,
                    "error": error_msg
                }
            
            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã webhook
            params = {
                "url": webhook_url,
                "secret_token": secret_token,
                "allowed_updates": allowed_updates or config.webhook.allowed_updates,
                "drop_pending_updates": drop_pending_updates
            }
            
            if max_connections:
                params["max_connections"] = max_connections
            
            logger.info(f"üöÄ Calling Telegram setWebhook with params: {dict(params, secret_token='***' if params.get('secret_token') else None)}")
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook
            result = self.bot.set_webhook(**params)
            
            if result:
                logger.info(f"‚úÖ Webhook set successfully: {webhook_url}")
                return {
                    "success": True,
                    "webhook_url": webhook_url,
                    "message": "Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ"
                }
            else:
                logger.error(f"‚ùå Telegram API returned False for setWebhook")
                return {
                    "success": False,
                    "error": "Telegram API returned False for setWebhook"
                }
                
        except Exception as e:
            logger.error(f"Error setting webhook: {e}")
            return {
                "success": False,
                "error": str(e)
            }
    
    async def delete_webhook(self) -> Dict[str, Any]:
        """–£–¥–∞–ª—è–µ—Ç webhook"""
        try:
            result = self.bot.delete_webhook()
            if result:
                logger.info("‚úÖ Webhook deleted successfully")
                return {
                    "success": True,
                    "message": "Webhook —É–¥–∞–ª–µ–Ω"
                }
            else:
                return {
                    "success": False,
                    "error": "Failed to delete webhook"
                }
        except Exception as e:
            logger.error(f"Error deleting webhook: {e}")
            return {
                "success": False,
                "error": str(e)
            }


class ServiceManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞–º–∏"""
    
    def __init__(self):
        self.start_time = datetime.now()
        self._services_cache = {}
        self._cache_ttl = 60  # —Å–µ–∫—É–Ω–¥
        self._last_cache_update = 0
    
    def get_services_status(self) -> Dict[str, str]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
        if time.time() - self._last_cache_update < self._cache_ttl:
            return self._services_cache
        
        status = {
            "telegram": self._check_telegram(),
            "agent": self._check_agent(),
            "openai": self._check_openai(),
            "anthropic": self._check_anthropic(),
            "zep": self._check_zep(),
            "voice": self._check_voice(),
            "social_media": self._check_social_media(),
            "mcp": self._check_mcp()
        }
        
        self._services_cache = status
        self._last_cache_update = time.time()
        
        return status
    
    def get_detailed_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"""
        return {
            "timestamp": datetime.now().isoformat(),
            "uptime": self.get_uptime(),
            "services": {
                name: {
                    "status": status,
                    "healthy": self.is_service_healthy(name)
                }
                for name, status in self.get_services_status().items()
            }
        }
    
    def get_uptime(self) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–∏—Å–∞"""
        delta = datetime.now() - self.start_time
        days = delta.days
        hours, remainder = divmod(delta.seconds, 3600)
        minutes, seconds = divmod(remainder, 60)
        
        parts = []
        if days:
            parts.append(f"{days}d")
        if hours:
            parts.append(f"{hours}h")
        if minutes:
            parts.append(f"{minutes}m")
        if seconds or not parts:
            parts.append(f"{seconds}s")
        
        return " ".join(parts)
    
    def is_service_healthy(self, service_name: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–¥–æ—Ä–æ–≤—å–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞"""
        status = self.get_services_status().get(service_name, "‚ùå UNKNOWN")
        return status in ["‚úÖ ENABLED", "‚úÖ AVAILABLE", "‚úÖ CONNECTED"]
    
    def _check_telegram(self) -> str:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram"""
        try:
            bot.get_me()
            return "‚úÖ CONNECTED"
        except:
            return "‚ùå DISCONNECTED"
    
    def _check_agent(self) -> str:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç AI –∞–≥–µ–Ω—Ç–∞"""
        try:
            agent = AgentFactory.get_agent()
            return "‚úÖ AVAILABLE" if agent else "‚ùå UNAVAILABLE"
        except:
            return "‚ùå ERROR"
    
    def _check_openai(self) -> str:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç OpenAI"""
        return "‚úÖ ENABLED" if config.openai.enabled else "‚ùå DISABLED"
    
    def _check_anthropic(self) -> str:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç Anthropic"""
        return "‚úÖ ENABLED" if config.anthropic.enabled else "‚ùå DISABLED"
    
    def _check_zep(self) -> str:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç Zep"""
        return "‚úÖ ENABLED" if config.zep.enabled else "‚ùå DISABLED"
    
    def _check_voice(self) -> str:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç Voice Service"""
        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            if not config.voice.enabled:
                return "‚ùå DISABLED"
            
            # –ü—ã—Ç–∞–µ–º—Å—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥—É–ª—å
            from voice.voice_service import VoiceService
            logger.debug("Voice service module imported successfully")
            return "‚úÖ ENABLED"
        except ImportError as e:
            logger.warning(f"Voice service import error: {e}")
            return "‚ö†Ô∏è IMPORT ERROR"
        except Exception as e:
            logger.error(f"Voice service check error: {e}")
            return "‚ùå ERROR"
    
    def _check_social_media(self) -> str:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç Social Media Service"""
        try:
            from ..services.social_media_service import social_media_service
            return "‚úÖ ENABLED" if social_media_service else "‚ùå DISABLED"
        except ImportError as e:
            logger.debug(f"Social media service import error: {e}")
            return "‚ùå NOT AVAILABLE"
        except Exception as e:
            logger.warning(f"Social media service check error: {e}")
            return "‚ùå ERROR"
    
    def _check_mcp(self) -> str:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç MCP"""
        return "‚úÖ ENABLED" if config.mcp.enabled else "‚ùå DISABLED"


class DebugService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"""
    
    def __init__(self):
        self.test_mode = False
    
    def get_recent_logs(self, lines: int = 50) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –∏–∑ –ª–æ–≥ —Ñ–∞–π–ª–∞"""
        log_path = "logs/bot.log"
        
        try:
            if not os.path.exists(log_path):
                return {
                    "error": "Log file not found",
                    "log_path": log_path
                }
            
            with open(log_path, 'r', encoding='utf-8') as f:
                all_lines = f.readlines()
                recent_lines = all_lines[-lines:]
                
            return {
                "total_lines": len(all_lines),
                "requested_lines": lines,
                "returned_lines": len(recent_lines),
                "logs": [line.strip() for line in recent_lines],
                "log_file_size": os.path.getsize(log_path)
            }
            
        except Exception as e:
            return {
                "error": str(e),
                "log_path": log_path
            }
    
    def get_test_mode_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞"""
        return {
            "test_mode_enabled": self.test_mode,
            "environment": config.environment.value,
            "debug": config.debug,
            "timestamp": datetime.now().isoformat()
        }
    
    def set_test_mode(self, enabled: bool) -> Dict[str, Any]:
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º"""
        self.test_mode = enabled
        logger.info(f"Test mode {'enabled' if enabled else 'disabled'}")
        
        return {
            "test_mode_enabled": self.test_mode,
            "message": f"Test mode {'–≤–∫–ª—é—á–µ–Ω' if enabled else '–≤—ã–∫–ª—é—á–µ–Ω'}",
            "timestamp": datetime.now().isoformat()
        }


class AdminService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π"""
    
    def __init__(self):
        self.agent = AgentFactory.get_agent()
    
    async def reload_instructions(self) -> Dict[str, Any]:
        """–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –≤ —Å–∞–º–æ–º –∞–≥–µ–Ω—Ç–µ
            if hasattr(self.agent, 'reload_instructions'):
                self.agent.reload_instructions()
                logger.info("üìù –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ –∞–≥–µ–Ω—Ç–µ")
            
            # –¢–∞–∫–∂–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –≤ ResponseGenerator –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            from ..services.response_generator import HybridResponseGenerator
            if isinstance(self.agent.response_generator, HybridResponseGenerator):
                self.agent.response_generator._load_instructions()
                logger.info("üìù –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ HybridResponseGenerator")
                
            return {
                "success": True,
                "message": "Instructions reloaded successfully",
                "timestamp": datetime.now().isoformat()
            }
        except Exception as e:
            logger.error(f"Error reloading instructions: {e}")
            return {
                "success": False,
                "error": str(e)
            }
    
    async def clear_user_memory(self, user_id: int) -> Dict[str, Any]:
        """–û—á–∏—â–∞–µ—Ç –ø–∞–º—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            success = await self.agent.clear_user_memory(user_id)
            return {
                "success": success,
                "user_id": user_id,
                "message": "Memory cleared" if success else "Failed to clear memory",
                "timestamp": datetime.now().isoformat()
            }
        except Exception as e:
            logger.error(f"Error clearing memory for user {user_id}: {e}")
            return {
                "success": False,
                "error": str(e)
            }
    
    async def get_bot_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞"""
        service_manager = ServiceManager()
        
        return {
            "uptime": service_manager.get_uptime(),
            "start_time": service_manager.start_time.isoformat(),
            "services": service_manager.get_detailed_status(),
            "config": {
                "environment": config.environment.value,
                "debug": config.debug,
                "webhook_url": config.webhook.base_url
            },
            "timestamp": datetime.now().isoformat()
        }
    
    async def broadcast_message(
        self,
        message: str,
        user_ids: Optional[List[int]] = None,
        parse_mode: str = "HTML"
    ) -> Dict[str, Any]:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
        if not user_ids:
            return {
                "success": False,
                "error": "No user IDs provided"
            }
        
        sent = 0
        failed = 0
        errors = []
        
        for user_id in user_ids:
            try:
                bot.send_message(user_id, message, parse_mode=parse_mode)
                sent += 1
            except Exception as e:
                failed += 1
                errors.append({"user_id": user_id, "error": str(e)})
        
        return {
            "success": sent > 0,
            "sent": sent,
            "failed": failed,
            "errors": errors[:10],  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫
            "timestamp": datetime.now().isoformat()
        }
    
    async def update_runtime_config(self, updates: Dict[str, Any]) -> Dict[str, Any]:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        # –ù–æ —ç—Ç–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ, –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—Å—è –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
        
        return {
            "success": False,
            "error": "Runtime config update not implemented yet"
        }
    
    async def get_users_list(self, limit: int = 100, offset: int = 0) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        # –ó–¥–µ—Å—å –Ω—É–∂–Ω–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ Zep
        return {
            "users": [],
            "total": 0,
            "limit": limit,
            "offset": offset,
            "message": "User list not implemented yet"
        }
    
    async def manage_service(self, service_name: str, action: str) -> Dict[str, Any]:
        """–£–ø—Ä–∞–≤–ª—è–µ—Ç —Å–µ—Ä–≤–∏—Å–∞–º–∏"""
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞–º–∏
        return {
            "success": False,
            "error": f"Service management for {service_name} not implemented yet"
        }


class TestService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    def create_test_update(
        self,
        chat_id: int,
        text: str,
        user_id: int,
        username: Optional[str] = None,
        message_type: str = "text"
    ) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π update"""
        timestamp = int(time.time())
        
        return {
            "update_id": int(time.time() * 1000000),
            "message": {
                "message_id": int(time.time() * 1000),
                "from": {
                    "id": user_id,
                    "is_bot": False,
                    "first_name": f"Test User {user_id}",
                    "username": username or f"test_user_{user_id}"
                },
                "chat": {
                    "id": chat_id,
                    "first_name": f"Test User {user_id}",
                    "username": username or f"test_user_{user_id}",
                    "type": "private"
                },
                "date": timestamp,
                "text": text if message_type == "text" else None
            }
        }
    
    def create_test_voice_update(
        self,
        chat_id: int,
        file_id: str,
        user_id: int,
        duration: int = 5
    ) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π voice update"""
        base_update = self.create_test_update(chat_id, "", user_id)
        base_update["message"]["voice"] = {
            "duration": duration,
            "mime_type": "audio/ogg",
            "file_id": file_id,
            "file_unique_id": f"voice_{int(time.time())}",
            "file_size": duration * 1000
        }
        return base_update
    
    def create_test_business_update(
        self,
        chat_id: int,
        text: str,
        business_connection_id: str,
        user_id: int
    ) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π business update"""
        timestamp = int(time.time())
        
        return {
            "update_id": int(time.time() * 1000000),
            "business_message": {
                "message_id": int(time.time() * 1000),
                "business_connection_id": business_connection_id,
                "from": {
                    "id": user_id,
                    "is_bot": False,
                    "first_name": f"Business User {user_id}",
                    "username": f"business_user_{user_id}"
                },
                "chat": {
                    "id": chat_id,
                    "type": "private"
                },
                "date": timestamp,
                "text": text
            }
        }
    
    async def test_social_media(
        self,
        platform: str,
        url: str,
        user_id: int,
        action: str
    ) -> Dict[str, Any]:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç Social Media —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å"""
        try:
            from ..services.social_media_service import social_media_service
            
            if not social_media_service:
                return {
                    "success": False,
                    "error": "Social Media service not available"
                }
            
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            test_message = f"/{platform} {url}"
            
            result = await social_media_service.process_message(
                test_message,
                user_id,
                f"Test User {user_id}"
            )
            
            return {
                "success": result.get("success", False),
                "platform": platform,
                "url": url,
                "result": result
            }
            
        except Exception as e:
            return {
                "success": False,
                "error": str(e)
            }
    
    async def test_mcp(
        self,
        service: str,
        method: str,
        params: dict,
        user_id: int
    ) -> Dict[str, Any]:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç MCP —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å"""
        try:
            if not config.mcp.enabled:
                return {
                    "success": False,
                    "error": "MCP not enabled"
                }
            
            # MCP —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–ø–µ—Ä—å —á–µ—Ä–µ–∑ Claude Code SDK
            return {
                "success": False,
                "error": "MCP testing through Claude Code SDK not implemented yet"
            }
            
        except Exception as e:
            return {
                "success": False,
                "error": str(e)
            }