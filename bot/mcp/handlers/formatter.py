"""
–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ MCP —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è Telegram
"""

from typing import Dict, Any, List, Optional
from datetime import datetime

from ..core.interfaces import MCPFunction, MCPFunctionType


class MCPFormatter:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç MCP —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Telegram
    """
    
    def format_status(self, status: Dict[str, Any]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç—É—Å MCP —Å–µ—Ä–≤–µ—Ä–æ–≤"""
        lines = ["üìä <b>MCP Status</b>\n"]
        
        # –°–µ—Ä–≤–µ—Ä—ã
        servers = status.get("servers", {})
        if servers:
            lines.append("<b>üîå –°–µ—Ä–≤–µ—Ä—ã:</b>")
            for name, info in servers.items():
                status_emoji = {
                    "connected": "‚úÖ",
                    "disconnected": "‚ùå",
                    "error": "‚ö†Ô∏è",
                    "initializing": "‚è≥"
                }.get(info["status"], "‚ùì")
                
                lines.append(f"{status_emoji} {info['display_name']}")
                if info.get("last_error"):
                    lines.append(f"   ‚îî‚îÄ –û—à–∏–±–∫–∞: {info['last_error']}")
            lines.append("")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–µ—à–∞
        cache_stats = status.get("cache_stats", {})
        if cache_stats:
            lines.append("<b>üíæ –ö–µ—à:</b>")
            lines.append(f"‚Ä¢ –†–∞–∑–º–µ—Ä: {cache_stats.get('size', 0)}/{cache_stats.get('max_size', 0)}")
            lines.append(f"‚Ä¢ Hit rate: {cache_stats.get('hit_rate', 0):.1%}")
            lines.append("")
        
        # –ú–µ—Ç—Ä–∏–∫–∏
        metrics = status.get("metrics_summary", {})
        if metrics:
            lines.append("<b>üìà –ú–µ—Ç—Ä–∏–∫–∏:</b>")
            lines.append(f"‚Ä¢ –í—Å–µ–≥–æ –≤—ã–∑–æ–≤–æ–≤: {metrics.get('total_calls', 0)}")
            lines.append(f"‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö: {metrics.get('successful_calls', 0)}")
            lines.append(f"‚Ä¢ Success rate: {metrics.get('success_rate', 0):.1%}")
            
            # –¢–æ–ø —Ñ—É–Ω–∫—Ü–∏–π
            top_functions = metrics.get("top_functions", [])
            if top_functions:
                lines.append("\n<b>üî• –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:</b>")
                for func in top_functions[:3]:
                    lines.append(f"‚Ä¢ {func['function']}: {func['calls']} –≤—ã–∑–æ–≤–æ–≤")
        
        return "\n".join(lines)
    
    def format_help(self) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø—Ä–∞–≤–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"""
        return """<b>üìö MCP –ö–æ–º–∞–Ω–¥—ã</b>

<b>üîß –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
‚Ä¢ /mcp status - —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤
‚Ä¢ /mcp help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
‚Ä¢ /mcp functions [server] - —Å–ø–∏—Å–æ–∫ —Ñ—É–Ω–∫—Ü–∏–π

<b>üíæ Supabase:</b>
‚Ä¢ /mcp projects - —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤
‚Ä¢ /db <SQL> - –≤—ã–ø–æ–ª–Ω–∏—Ç—å SQL –∑–∞–ø—Ä–æ—Å
‚Ä¢ /mcp tables <project_id> - —Å–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü

<b>üåä DigitalOcean:</b>
‚Ä¢ /mcp apps - —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
‚Ä¢ /mcp deploy <app_id> - –¥–µ–ø–ª–æ–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è

<b>üìñ Context7:</b>
‚Ä¢ /docs <–±–∏–±–ª–∏–æ—Ç–µ–∫–∞> [—Ç–µ–º–∞] - –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è
‚Ä¢ /docs react hooks - –ø—Ä–∏–º–µ—Ä

<b>üí° –ü—Ä–∏–º–µ—Ä—ã:</b>
‚Ä¢ <code>/db SELECT * FROM users LIMIT 10</code>
‚Ä¢ <code>/docs supabase authentication</code>
‚Ä¢ <code>/mcp status</code>"""
    
    def format_sql_result(self, data: Dict[str, Any]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç SQL –∑–∞–ø—Ä–æ—Å–∞"""
        rows = data.get("rows", [])
        row_count = data.get("rowCount", 0)
        fields = data.get("fields", [])
        
        if not rows:
            return "üìä <b>–†–µ–∑—É–ª—å—Ç–∞—Ç SQL:</b>\n\n–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö (0 —Å—Ç—Ä–æ–∫)"
        
        lines = [f"üìä <b>–†–µ–∑—É–ª—å—Ç–∞—Ç SQL:</b> {row_count} —Å—Ç—Ä–æ–∫\n"]
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤—ã–≤–æ–¥
        display_rows = rows[:10]
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–∞–∫ —Ç–∞–±–ª–∏—Ü—É
        if fields:
            # –ó–∞–≥–æ–ª–æ–≤–∫–∏
            headers = [f["name"] for f in fields]
            lines.append("<code>" + " | ".join(headers) + "</code>")
            lines.append("<code>" + "-" * (len(" | ".join(headers))) + "</code>")
        
        # –î–∞–Ω–Ω—ã–µ
        for row in display_rows:
            if isinstance(row, dict):
                values = [str(row.get(h, "")) for h in headers]
            else:
                values = [str(v) for v in row]
            lines.append("<code>" + " | ".join(values) + "</code>")
        
        if len(rows) > 10:
            lines.append(f"\n<i>... –∏ –µ—â–µ {len(rows) - 10} —Å—Ç—Ä–æ–∫</i>")
        
        return "\n".join(lines)
    
    def format_projects_list(self, projects: List[Dict[str, Any]]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤"""
        if not projects:
            return "üìÅ <b>Supabase –ø—Ä–æ–µ–∫—Ç—ã:</b>\n\n–ù–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤"
        
        lines = ["üìÅ <b>Supabase –ø—Ä–æ–µ–∫—Ç—ã:</b>\n"]
        
        for project in projects:
            lines.append(f"<b>{project.get('name', '–ë–µ–∑ –∏–º–µ–Ω–∏')}</b>")
            lines.append(f"‚Ä¢ ID: <code>{project.get('id')}</code>")
            lines.append(f"‚Ä¢ –†–µ–≥–∏–æ–Ω: {project.get('region', '–Ω/–¥')}")
            
            created_at = project.get('created_at')
            if created_at:
                lines.append(f"‚Ä¢ –°–æ–∑–¥–∞–Ω: {self._format_date(created_at)}")
            lines.append("")
        
        return "\n".join(lines)
    
    def format_apps_list(self, data: Any) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π"""
        # –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç API DigitalOcean
        if isinstance(data, dict):
            apps = data.get("apps", [])
        else:
            apps = data if isinstance(data, list) else []
        
        if not apps:
            return "üì± <b>DigitalOcean –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:</b>\n\n–ù–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π"
        
        lines = ["üì± <b>DigitalOcean –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:</b>\n"]
        
        for app in apps:
            lines.append(f"<b>{app.get('spec', {}).get('name', '–ë–µ–∑ –∏–º–µ–Ω–∏')}</b>")
            lines.append(f"‚Ä¢ ID: <code>{app.get('id')}</code>")
            lines.append(f"‚Ä¢ –°—Ç–∞—Ç—É—Å: {app.get('status', '–Ω/–¥')}")
            lines.append(f"‚Ä¢ URL: {app.get('live_url', '–Ω/–¥')}")
            lines.append("")
        
        return "\n".join(lines)
    
    def format_docs_result(self, library: str, data: Any) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏"""
        lines = [f"üìñ <b>–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è {library}</b>\n"]
        
        # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥ —Ä–µ–∞–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É Context7
        if isinstance(data, str):
            # –ï—Å–ª–∏ –≤–µ—Ä–Ω—É–ª—Å—è –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç
            lines.append(data[:1000])  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
            if len(data) > 1000:
                lines.append("\n<i>... –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –æ–±—Ä–µ–∑–∞–Ω–∞</i>")
        elif isinstance(data, dict):
            # –ï—Å–ª–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            title = data.get("title", library)
            content = data.get("content", "")
            url = data.get("url", "")
            
            lines.append(f"<b>{title}</b>")
            if url:
                lines.append(f"üîó {url}")
            lines.append("")
            lines.append(content[:1000])
            if len(content) > 1000:
                lines.append("\n<i>... –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –æ–±—Ä–µ–∑–∞–Ω–∞</i>")
        
        return "\n".join(lines)
    
    def format_functions_list(
        self, 
        functions: List[MCPFunction], 
        server_name: Optional[str] = None
    ) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ —Ñ—É–Ω–∫—Ü–∏–π"""
        if not functions:
            return "üìã <b>MCP –§—É–Ω–∫—Ü–∏–∏:</b>\n\n–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π"
        
        title = f"üìã <b>MCP –§—É–Ω–∫—Ü–∏–∏{f' ({server_name})' if server_name else ''}:</b>\n"
        lines = [title]
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Å–µ—Ä–≤–µ—Ä–∞–º
        by_server = {}
        for func in functions:
            server = func.server
            if server not in by_server:
                by_server[server] = []
            by_server[server].append(func)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø–æ —Å–µ—Ä–≤–µ—Ä–∞–º
        for server, server_functions in by_server.items():
            lines.append(f"<b>{server.upper()}</b>")
            
            for func in server_functions:
                type_emoji = {
                    MCPFunctionType.READ: "üëÅ",
                    MCPFunctionType.WRITE: "‚úèÔ∏è",
                    MCPFunctionType.ADMIN: "üîê",
                    MCPFunctionType.SEARCH: "üîç"
                }.get(func.function_type, "üìå")
                
                lines.append(f"{type_emoji} <code>{func.name}</code>")
                lines.append(f"   ‚îî‚îÄ {func.description}")
            
            lines.append("")
        
        return "\n".join(lines)
    
    def format_error(self, error: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ"""
        return f"‚ùå <b>–û—à–∏–±–∫–∞ MCP:</b>\n\n{error}"
    
    def _format_date(self, date_str: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞—Ç—É"""
        try:
            dt = datetime.fromisoformat(date_str.replace('Z', '+00:00'))
            return dt.strftime("%d.%m.%Y %H:%M")
        except:
            return date_str