"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ MCP –∑–∞–ø—Ä–æ—Å–æ–≤
"""

import logging
from typing import Dict, Any, Optional, List
import json

from ...core.interfaces import Message, Response, User
from ..core.manager import MCPManager
from ..core.interfaces import MCPResult, MCPFunction
from .formatter import MCPFormatter

logger = logging.getLogger(__name__)


class MCPHandler:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ MCP –∑–∞–ø—Ä–æ—Å–æ–≤
    
    –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞:
    - –ü–∞—Ä—Å–∏–Ω–≥ MCP –∫–æ–º–∞–Ω–¥
    - –í—ã–∑–æ–≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π
    - –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    - –û–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫
    """
    
    def __init__(self, mcp_manager: MCPManager):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
        
        Args:
            mcp_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä MCP —Å–µ—Ä–≤–µ—Ä–æ–≤
        """
        self.mcp_manager = mcp_manager
        self.formatter = MCPFormatter()
        
    async def handle_message(
        self, 
        message: Message, 
        mcp_intent: Dict[str, Any]
    ) -> Response:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç MCP —Å–æ–æ–±—â–µ–Ω–∏–µ
        
        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            mcp_intent: –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π MCP –∏–Ω—Ç–µ–Ω—Ç
            
        Returns:
            Response: –û—Ç–≤–µ—Ç —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
        """
        intent_type = mcp_intent.get("type")
        
        try:
            if intent_type == "command":
                return await self._handle_command(message, mcp_intent)
            elif intent_type == "sql":
                return await self._handle_sql(message, mcp_intent)
            elif intent_type == "docs":
                return await self._handle_docs(message, mcp_intent)
            elif intent_type == "natural":
                return await self._handle_natural(message, mcp_intent)
            else:
                return Response(
                    text="‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø MCP –∑–∞–ø—Ä–æ—Å–∞",
                    metadata={"error": "Unknown intent type"}
                )
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ MCP: {e}", exc_info=True)
            return Response(
                text=self.formatter.format_error(str(e)),
                metadata={"error": str(e)}
            )
    
    async def _handle_command(
        self, 
        message: Message, 
        intent: Dict[str, Any]
    ) -> Response:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç MCP –∫–æ–º–∞–Ω–¥—É"""
        command = intent.get("command", "").lower()
        args = intent.get("args", "")
        
        if command == "status":
            return await self._get_status()
        elif command == "help":
            return self._get_help()
        elif command == "projects":
            return await self._list_projects()
        elif command == "apps":
            return await self._list_apps()
        elif command == "functions":
            return await self._list_functions(args)
        else:
            return Response(
                text=f"‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è MCP –∫–æ–º–∞–Ω–¥–∞: {command}",
                metadata={"error": "Unknown command"}
            )
    
    async def _handle_sql(
        self, 
        message: Message, 
        intent: Dict[str, Any]
    ) -> Response:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç SQL –∑–∞–ø—Ä–æ—Å"""
        query = intent.get("query", "").strip()
        
        if not query:
            return Response(
                text="‚ùå SQL –∑–∞–ø—Ä–æ—Å –Ω–µ —É–∫–∞–∑–∞–Ω\n\n–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/db SELECT * FROM table`",
                metadata={"error": "Empty query"}
            )
        
        # –ü–æ–ª—É—á–∞–µ–º ID –ø—Ä–æ–µ–∫—Ç–∞ (–º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–º)
        # –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –ø—Ä–æ–µ–∫—Ç
        projects_result = await self.mcp_manager.execute_function(
            "supabase", "list_projects", {}
        )
        
        if not projects_result.success or not projects_result.data:
            return Response(
                text="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤",
                metadata={"error": "No projects"}
            )
        
        project_id = projects_result.data[0]["id"]
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º SQL
        result = await self.mcp_manager.execute_function(
            "supabase",
            "execute_sql",
            {"project_id": project_id, "query": query}
        )
        
        if result.success:
            formatted = self.formatter.format_sql_result(result.data)
            return Response(
                text=formatted,
                metadata={
                    "mcp_server": "supabase",
                    "mcp_function": "execute_sql",
                    "cached": result.cached
                }
            )
        else:
            return Response(
                text=self.formatter.format_error(result.error),
                metadata={"error": result.error}
            )
    
    async def _handle_docs(
        self, 
        message: Message, 
        intent: Dict[str, Any]
    ) -> Response:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏"""
        library = intent.get("library", "")
        topic = intent.get("topic")
        
        if not library:
            return Response(
                text="‚ùå –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞\n\n–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/docs react hooks`",
                metadata={"error": "No library"}
            )
        
        # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫—É
        result = await self.mcp_manager.execute_function(
            "context7",
            "resolve-library-id",
            {"libraryName": library}
        )
        
        if not result.success:
            return Response(
                text=f"‚ùå –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ '{library}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
                metadata={"error": "Library not found"}
            )
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é
        library_id = result.data.get("id")  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞
        
        docs_result = await self.mcp_manager.execute_function(
            "context7",
            "get-library-docs",
            {
                "context7CompatibleLibraryID": library_id,
                "topic": topic
            }
        )
        
        if docs_result.success:
            formatted = self.formatter.format_docs_result(
                library, docs_result.data
            )
            return Response(
                text=formatted,
                metadata={
                    "mcp_server": "context7",
                    "mcp_function": "get-library-docs",
                    "library": library,
                    "topic": topic
                }
            )
        else:
            return Response(
                text=self.formatter.format_error(docs_result.error),
                metadata={"error": docs_result.error}
            )
    
    async def _handle_natural(
        self, 
        message: Message, 
        intent: Dict[str, Any]
    ) -> Response:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —è–∑—ã–∫ —Å MCP –∏–Ω—Ç–µ–Ω—Ç–æ–º"""
        server = intent.get("server")
        query = intent.get("query")
        
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å AI –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
        # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É
        return Response(
            text=f"ü§ñ –û–±–Ω–∞—Ä—É–∂–µ–Ω –∑–∞–ø—Ä–æ—Å –∫ {server}\n\n"
                 f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                 f"‚Ä¢ `/mcp help` - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥\n"
                 f"‚Ä¢ `/db <–∑–∞–ø—Ä–æ—Å>` - –≤—ã–ø–æ–ª–Ω–∏—Ç—å SQL\n"
                 f"‚Ä¢ `/docs <–±–∏–±–ª–∏–æ—Ç–µ–∫–∞>` - –Ω–∞–π—Ç–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é",
            metadata={"mcp_intent": intent}
        )
    
    async def _get_status(self) -> Response:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å MCP —Å–µ—Ä–≤–µ—Ä–æ–≤"""
        status = self.mcp_manager.get_status()
        formatted = self.formatter.format_status(status)
        
        return Response(
            text=formatted,
            metadata={"mcp_status": status}
        )
    
    def _get_help(self) -> Response:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É –ø–æ MCP –∫–æ–º–∞–Ω–¥–∞–º"""
        help_text = self.formatter.format_help()
        
        return Response(
            text=help_text,
            metadata={"mcp_help": True}
        )
    
    async def _list_projects(self) -> Response:
        """–°–ø–∏—Å–æ–∫ Supabase –ø—Ä–æ–µ–∫—Ç–æ–≤"""
        result = await self.mcp_manager.execute_function(
            "supabase", "list_projects", {}
        )
        
        if result.success:
            formatted = self.formatter.format_projects_list(result.data)
            return Response(
                text=formatted,
                metadata={
                    "mcp_server": "supabase",
                    "mcp_function": "list_projects"
                }
            )
        else:
            return Response(
                text=self.formatter.format_error(result.error),
                metadata={"error": result.error}
            )
    
    async def _list_apps(self) -> Response:
        """–°–ø–∏—Å–æ–∫ DigitalOcean –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π"""
        result = await self.mcp_manager.execute_function(
            "digitalocean",
            "list_apps",
            {"query": {"page": 1, "per_page": 10}}
        )
        
        if result.success:
            formatted = self.formatter.format_apps_list(result.data)
            return Response(
                text=formatted,
                metadata={
                    "mcp_server": "digitalocean",
                    "mcp_function": "list_apps"
                }
            )
        else:
            return Response(
                text=self.formatter.format_error(result.error),
                metadata={"error": result.error}
            )
    
    async def _list_functions(self, server_name: str = None) -> Response:
        """–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö MCP —Ñ—É–Ω–∫—Ü–∏–π"""
        functions = await self.mcp_manager.get_available_functions(server_name)
        formatted = self.formatter.format_functions_list(functions, server_name)
        
        return Response(
            text=formatted,
            metadata={
                "mcp_functions": len(functions),
                "server": server_name
            }
        )