"""
Context7 MCP Server
"""

import logging
from typing import Dict, Any, List
from datetime import datetime

from ..core.interfaces import (
    MCPServer, MCPServerConfig, MCPFunction, 
    MCPResult, MCPServerStatus, MCPFunctionType
)

logger = logging.getLogger(__name__)


class Context7MCPServer(MCPServer):
    """
    MCP —Å–µ—Ä–≤–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Context7
    
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç:
    - –ü–æ–∏—Å–∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫
    - –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–æ–≤ –∫–æ–¥–∞
    - –ü–æ–∏—Å–∫ –ø–æ API —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–∞–º
    """
    
    def __init__(self, config: MCPServerConfig):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Context7 —Å–µ—Ä–≤–µ—Ä–∞"""
        super().__init__(config)
        self._functions = self._define_functions()
        
    def _define_functions(self) -> List[MCPFunction]:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ Context7"""
        return [
            MCPFunction(
                name="resolve-library-id",
                description="–ù–∞–π—Ç–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫—É –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏ –ø–æ–ª—É—á–∏—Ç—å –µ—ë ID",
                parameters={
                    "type": "object",
                    "properties": {
                        "libraryName": {
                            "type": "string",
                            "description": "–ù–∞–∑–≤–∞–Ω–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞"
                        }
                    },
                    "required": ["libraryName"]
                },
                server="context7",
                function_type=MCPFunctionType.SEARCH,
                permissions=["read"]
            ),
            MCPFunction(
                name="get-library-docs",
                description="–ü–æ–ª—É—á–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –±–∏–±–ª–∏–æ—Ç–µ–∫–∏",
                parameters={
                    "type": "object",
                    "properties": {
                        "context7CompatibleLibraryID": {
                            "type": "string",
                            "description": "ID –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –∏–∑ resolve-library-id"
                        },
                        "tokens": {
                            "type": "number",
                            "description": "–ú–∞–∫—Å–∏–º—É–º —Ç–æ–∫–µ–Ω–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏",
                            "default": 10000
                        },
                        "topic": {
                            "type": "string",
                            "description": "–¢–µ–º–∞ –¥–ª—è —Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∫–∏"
                        }
                    },
                    "required": ["context7CompatibleLibraryID"]
                },
                server="context7",
                function_type=MCPFunctionType.READ,
                permissions=["read"]
            )
        ]
    
    async def connect(self) -> bool:
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Context7 —Å–µ—Ä–≤–µ—Ä—É"""
        try:
            self.status = MCPServerStatus.CONNECTED
            self.connected_at = datetime.now()
            logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ Context7")
            return True
        except Exception as e:
            self.status = MCPServerStatus.ERROR
            self.last_error = str(e)
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Context7: {e}")
            return False
    
    async def disconnect(self) -> bool:
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç Context7 —Å–µ—Ä–≤–µ—Ä–∞"""
        self.status = MCPServerStatus.DISCONNECTED
        logger.info("üîå –û—Ç–∫–ª—é—á–µ–Ω –æ—Ç Context7")
        return True
    
    async def execute_function(
        self, 
        function_name: str, 
        parameters: Dict[str, Any]
    ) -> MCPResult:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ Context7"""
        return MCPResult(
            success=True,
            data={"message": f"Context7 function {function_name} executed"},
            server="context7",
            function=function_name
        )
    
    async def get_available_functions(self) -> List[MCPFunction]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π"""
        return self._functions
    
    async def health_check(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–µ—Ä–∞"""
        return self.is_connected()