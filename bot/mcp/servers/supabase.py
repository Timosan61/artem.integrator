"""
Supabase MCP Server
"""

import logging
from typing import Dict, Any, List, Optional
from datetime import datetime
import json

from ..core.interfaces import (
    MCPServer, MCPServerConfig, MCPFunction, 
    MCPResult, MCPServerStatus, MCPFunctionType
)
from ..core.exceptions import MCPServerError, MCPAuthError, MCPFunctionError

logger = logging.getLogger(__name__)


class SupabaseMCPServer(MCPServer):
    """
    MCP —Å–µ—Ä–≤–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Supabase
    
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç:
    - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞–º–∏
    - –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SQL –∑–∞–ø—Ä–æ—Å–æ–≤
    - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏—è–º–∏
    - –†–∞–±–æ—Ç–∞ —Å Edge Functions
    """
    
    def __init__(self, config: MCPServerConfig):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase —Å–µ—Ä–≤–µ—Ä–∞"""
        super().__init__(config)
        self.base_url = config.api_url or "https://api.supabase.com"
        self.api_key = config.api_key
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        self._functions = self._define_functions()
        
    def _define_functions(self) -> List[MCPFunction]:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ Supabase"""
        return [
            MCPFunction(
                name="list_projects",
                description="–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ Supabase –ø—Ä–æ–µ–∫—Ç–æ–≤",
                parameters={
                    "type": "object",
                    "properties": {},
                    "required": []
                },
                server="supabase",
                function_type=MCPFunctionType.READ,
                permissions=["read"]
            ),
            MCPFunction(
                name="get_project",
                description="–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–µ–∫—Ç–µ",
                parameters={
                    "type": "object",
                    "properties": {
                        "id": {
                            "type": "string",
                            "description": "ID –ø—Ä–æ–µ–∫—Ç–∞"
                        }
                    },
                    "required": ["id"]
                },
                server="supabase",
                function_type=MCPFunctionType.READ,
                permissions=["read"]
            ),
            MCPFunction(
                name="execute_sql",
                description="–í—ã–ø–æ–ª–Ω–∏—Ç—å SQL –∑–∞–ø—Ä–æ—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö",
                parameters={
                    "type": "object",
                    "properties": {
                        "project_id": {
                            "type": "string",
                            "description": "ID –ø—Ä–æ–µ–∫—Ç–∞"
                        },
                        "query": {
                            "type": "string",
                            "description": "SQL –∑–∞–ø—Ä–æ—Å"
                        }
                    },
                    "required": ["project_id", "query"]
                },
                server="supabase",
                function_type=MCPFunctionType.WRITE,
                permissions=["write"],
                cache_enabled=False
            ),
            MCPFunction(
                name="list_tables",
                description="–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö",
                parameters={
                    "type": "object",
                    "properties": {
                        "project_id": {
                            "type": "string",
                            "description": "ID –ø—Ä–æ–µ–∫—Ç–∞"
                        },
                        "schemas": {
                            "type": "array",
                            "items": {"type": "string"},
                            "description": "–°–ø–∏—Å–æ–∫ —Å—Ö–µ–º –¥–ª—è –ø–æ–∏—Å–∫–∞",
                            "default": ["public"]
                        }
                    },
                    "required": ["project_id"]
                },
                server="supabase",
                function_type=MCPFunctionType.READ,
                permissions=["read"]
            ),
            MCPFunction(
                name="apply_migration",
                description="–ü—Ä–∏–º–µ–Ω–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö",
                parameters={
                    "type": "object",
                    "properties": {
                        "project_id": {
                            "type": "string",
                            "description": "ID –ø—Ä–æ–µ–∫—Ç–∞"
                        },
                        "name": {
                            "type": "string",
                            "description": "–ò–º—è –º–∏–≥—Ä–∞—Ü–∏–∏ –≤ snake_case"
                        },
                        "query": {
                            "type": "string",
                            "description": "SQL –∑–∞–ø—Ä–æ—Å –º–∏–≥—Ä–∞—Ü–∏–∏"
                        }
                    },
                    "required": ["project_id", "name", "query"]
                },
                server="supabase",
                function_type=MCPFunctionType.ADMIN,
                permissions=["admin"],
                cache_enabled=False
            ),
            MCPFunction(
                name="list_edge_functions",
                description="–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ Edge Functions",
                parameters={
                    "type": "object",
                    "properties": {
                        "project_id": {
                            "type": "string",
                            "description": "ID –ø—Ä–æ–µ–∫—Ç–∞"
                        }
                    },
                    "required": ["project_id"]
                },
                server="supabase",
                function_type=MCPFunctionType.READ,
                permissions=["read"]
            ),
            MCPFunction(
                name="search_docs",
                description="–ü–æ–∏—Å–∫ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ Supabase",
                parameters={
                    "type": "object",
                    "properties": {
                        "graphql_query": {
                            "type": "string",
                            "description": "GraphQL –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞"
                        }
                    },
                    "required": ["graphql_query"]
                },
                server="supabase",
                function_type=MCPFunctionType.SEARCH,
                permissions=["read"]
            )
        ]
    
    async def connect(self) -> bool:
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase —Å–µ—Ä–≤–µ—Ä—É"""
        if not self.api_key:
            logger.error("‚ùå Supabase API key –Ω–µ —É–∫–∞–∑–∞–Ω")
            self.status = MCPServerStatus.ERROR
            self.last_error = "API key not provided"
            return False
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–æ—Å—Ç—ã–º –∑–∞–ø—Ä–æ—Å–æ–º
            # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å –±—ã –±—ã–ª –≤—ã–∑–æ–≤ –∫ Supabase API
            self.status = MCPServerStatus.CONNECTED
            self.connected_at = datetime.now()
            logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ Supabase")
            return True
            
        except Exception as e:
            self.status = MCPServerStatus.ERROR
            self.last_error = str(e)
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase: {e}")
            return False
    
    async def disconnect(self) -> bool:
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç Supabase —Å–µ—Ä–≤–µ—Ä–∞"""
        self.status = MCPServerStatus.DISCONNECTED
        logger.info("üîå –û—Ç–∫–ª—é—á–µ–Ω –æ—Ç Supabase")
        return True
    
    async def execute_function(
        self, 
        function_name: str, 
        parameters: Dict[str, Any]
    ) -> MCPResult:
        """
        –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ Supabase
        
        Args:
            function_name: –ò–º—è —Ñ—É–Ω–∫—Ü–∏–∏
            parameters: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ—É–Ω–∫—Ü–∏–∏
            
        Returns:
            MCPResult: –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        """
        try:
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–µ–∞–ª—å–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –≤—ã–∑–æ–≤–æ–≤ –∫ Supabase API
            # –°–µ–π—á–∞—Å –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
            
            if function_name == "list_projects":
                return MCPResult(
                    success=True,
                    data=[
                        {
                            "id": "project-1",
                            "name": "My App",
                            "organization_id": "org-1",
                            "region": "us-east-1",
                            "created_at": "2024-01-01T00:00:00Z"
                        }
                    ],
                    server="supabase",
                    function="list_projects"
                )
            
            elif function_name == "execute_sql":
                query = parameters.get("query", "")
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–∞
                if any(word in query.upper() for word in ["DROP", "TRUNCATE", "DELETE"]):
                    return MCPResult(
                        success=False,
                        error="–û–ø–∞—Å–Ω—ã–π SQL –∑–∞–ø—Ä–æ—Å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω",
                        server="supabase",
                        function="execute_sql"
                    )
                
                return MCPResult(
                    success=True,
                    data={
                        "rows": [],
                        "rowCount": 0,
                        "fields": []
                    },
                    server="supabase",
                    function="execute_sql"
                )
            
            else:
                return MCPResult(
                    success=False,
                    error=f"–§—É–Ω–∫—Ü–∏—è {function_name} –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞",
                    server="supabase",
                    function=function_name
                )
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è Supabase —Ñ—É–Ω–∫—Ü–∏–∏ {function_name}: {e}")
            return MCPResult(
                success=False,
                error=str(e),
                server="supabase",
                function=function_name
            )
    
    async def get_available_functions(self) -> List[MCPFunction]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π"""
        return self._functions
    
    async def health_check(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–µ—Ä–∞"""
        try:
            # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –º–æ–∂–µ–º –ª–∏ –º—ã –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤
            result = await self.execute_function("list_projects", {})
            return result.success
        except Exception:
            return False