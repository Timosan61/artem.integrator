"""
MCP Manager - –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è MCP —Å–µ—Ä–≤–µ—Ä–∞–º–∏
"""

import asyncio
import logging
from typing import Dict, Any, Optional, List, Tuple
from datetime import datetime, timedelta
from collections import defaultdict
import json

from .interfaces import (
    MCPServer, MCPServerConfig, MCPFunction, 
    MCPResult, MCPServerStatus, MCPFunctionType
)
from .exceptions import (
    MCPError, MCPServerError, MCPConnectionError,
    MCPFunctionError, MCPTimeoutError
)
from .cache import MCPCache
from ..servers import get_server_class

logger = logging.getLogger(__name__)


class MCPManager:
    """
    –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è MCP —Å–µ—Ä–≤–µ—Ä–æ–≤
    
    –§—É–Ω–∫—Ü–∏–∏:
    - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º —Å–µ—Ä–≤–µ—Ä–æ–≤
    - –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
    - –ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –º–µ—Ç—Ä–∏–∫–∏
    - –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏
    """
    
    def __init__(self, config: Optional[Dict[str, Any]] = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        
        Args:
            config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è MCP (–∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –∏–∑ —Ñ–∞–π–ª–∞ –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–∞)
        """
        self.config = config or self._load_config()
        self.servers: Dict[str, MCPServer] = {}
        self.cache = MCPCache()
        self.metrics = defaultdict(lambda: {
            "total_calls": 0,
            "successful_calls": 0,
            "failed_calls": 0,
            "total_time": 0.0,
            "last_call": None,
            "errors": []
        })
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–µ—Ä–æ–≤
        self._initialize_servers()
        
        # –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á
        self._background_tasks = []
        self._start_background_tasks()
        
        logger.info(f"üîå MCP Manager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å {len(self.servers)} —Å–µ—Ä–≤–µ—Ä–∞–º–∏")
    
    def _load_config(self) -> Dict[str, Any]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            with open('data/mcp_config.json', 'r', encoding='utf-8') as f:
                return json.load(f)
        except FileNotFoundError:
            logger.warning("‚ö†Ô∏è MCP –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—É—é")
            return self._get_default_config()
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ MCP –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            return self._get_default_config()
    
    def _get_default_config(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–µ—Ñ–æ–ª—Ç–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"""
        return {
            "mcp_enabled": True,
            "cache_ttl": 300,
            "health_check_interval": 60,
            "servers": {}
        }
    
    def _initialize_servers(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç MCP —Å–µ—Ä–≤–µ—Ä—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        servers_config = self.config.get("servers", {})
        
        for server_name, server_data in servers_config.items():
            if not server_data.get("enabled", False):
                logger.info(f"‚è≠Ô∏è –°–µ—Ä–≤–µ—Ä {server_name} –æ—Ç–∫–ª—é—á–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
                continue
            
            try:
                # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å–µ—Ä–≤–µ—Ä–∞
                config = MCPServerConfig(
                    name=server_name,
                    display_name=server_data.get("display_name", server_name),
                    description=server_data.get("description", ""),
                    enabled=True,
                    api_url=server_data.get("api_url"),
                    api_key=server_data.get("api_key"),
                    permissions=server_data.get("permissions", []),
                    timeout=server_data.get("timeout", 30),
                    retry_count=server_data.get("retry_count", 3),
                    cache_ttl=server_data.get("cache_ttl", 300)
                )
                
                # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∞—Å—Å —Å–µ—Ä–≤–µ—Ä–∞ –∏ —Å–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä
                server_class = get_server_class(server_name)
                if server_class:
                    self.servers[server_name] = server_class(config)
                    logger.info(f"‚úÖ –°–µ—Ä–≤–µ—Ä {server_name} –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                else:
                    logger.warning(f"‚ö†Ô∏è –ö–ª–∞—Å—Å —Å–µ—Ä–≤–µ—Ä–∞ {server_name} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞ {server_name}: {e}")
    
    def _start_background_tasks(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏"""
        # Health check task
        if self.config.get("health_check_interval", 60) > 0:
            task = asyncio.create_task(self._health_check_loop())
            self._background_tasks.append(task)
    
    async def _health_check_loop(self):
        """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–µ—Ä–æ–≤"""
        interval = self.config.get("health_check_interval", 60)
        
        while True:
            try:
                await asyncio.sleep(interval)
                await self.health_check_all()
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ health check —Ü–∏–∫–ª–µ: {e}")
    
    async def connect_server(self, server_name: str) -> bool:
        """
        –ü–æ–¥–∫–ª—é—á–∞–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Å–µ—Ä–≤–µ—Ä
        
        Args:
            server_name: –ò–º—è —Å–µ—Ä–≤–µ—Ä–∞
            
        Returns:
            bool: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        """
        if server_name not in self.servers:
            logger.error(f"‚ùå –°–µ—Ä–≤–µ—Ä {server_name} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        
        server = self.servers[server_name]
        try:
            success = await server.connect()
            if success:
                logger.info(f"‚úÖ –°–µ—Ä–≤–µ—Ä {server_name} –ø–æ–¥–∫–ª—é—á–µ–Ω")
            else:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å —Å–µ—Ä–≤–µ—Ä {server_name}")
            return success
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞ {server_name}: {e}")
            return False
    
    async def connect_all(self) -> Dict[str, bool]:
        """
        –ü–æ–¥–∫–ª—é—á–∞–µ—Ç –≤—Å–µ –≤–∫–ª—é—á–µ–Ω–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä—ã
        
        Returns:
            Dict[str, bool]: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        """
        results = {}
        connect_tasks = []
        
        for server_name in self.servers:
            task = self.connect_server(server_name)
            connect_tasks.append((server_name, task))
        
        for server_name, task in connect_tasks:
            results[server_name] = await task
        
        return results
    
    async def execute_function(
        self,
        server_name: str,
        function_name: str,
        parameters: Dict[str, Any],
        use_cache: bool = True
    ) -> MCPResult:
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –Ω–∞ MCP —Å–µ—Ä–≤–µ—Ä–µ
        
        Args:
            server_name: –ò–º—è —Å–µ—Ä–≤–µ—Ä–∞
            function_name: –ò–º—è —Ñ—É–Ω–∫—Ü–∏–∏
            parameters: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ—É–Ω–∫—Ü–∏–∏
            use_cache: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–µ—à
            
        Returns:
            MCPResult: –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        """
        start_time = datetime.now()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–µ—Ä–≤–µ—Ä–∞
        if server_name not in self.servers:
            return MCPResult(
                success=False,
                error=f"–°–µ—Ä–≤–µ—Ä {server_name} –Ω–µ –Ω–∞–π–¥–µ–Ω",
                server=server_name,
                function=function_name
            )
        
        server = self.servers[server_name]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        if not server.is_connected():
            logger.warning(f"‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä {server_name} –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å")
            connected = await self.connect_server(server_name)
            if not connected:
                return MCPResult(
                    success=False,
                    error=f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É {server_name}",
                    server=server_name,
                    function=function_name
                )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
        if use_cache:
            cache_key = self.cache.get_key(server_name, function_name, parameters)
            cached_result = self.cache.get(cache_key)
            if cached_result:
                logger.debug(f"üì¶ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –∫–µ—à –¥–ª—è {server_name}:{function_name}")
                cached_result.cached = True
                return cached_result
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é
        try:
            result = await asyncio.wait_for(
                server.execute_function(function_name, parameters),
                timeout=server.config.timeout
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
            execution_time = (datetime.now() - start_time).total_seconds()
            self._update_metrics(server_name, function_name, True, execution_time)
            
            # –ö–µ—à–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if use_cache and result.success:
                self.cache.set(
                    self.cache.get_key(server_name, function_name, parameters),
                    result,
                    ttl=server.config.cache_ttl
                )
            
            return result
            
        except asyncio.TimeoutError:
            error_msg = f"–¢–∞–π–º–∞—É—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è ({server.config.timeout}—Å)"
            self._update_metrics(server_name, function_name, False, 
                               (datetime.now() - start_time).total_seconds(), error_msg)
            return MCPResult(
                success=False,
                error=error_msg,
                server=server_name,
                function=function_name
            )
        except Exception as e:
            error_msg = str(e)
            self._update_metrics(server_name, function_name, False,
                               (datetime.now() - start_time).total_seconds(), error_msg)
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è {server_name}:{function_name}: {e}")
            return MCPResult(
                success=False,
                error=error_msg,
                server=server_name,
                function=function_name
            )
    
    def _update_metrics(
        self, 
        server_name: str, 
        function_name: str, 
        success: bool, 
        execution_time: float,
        error: Optional[str] = None
    ):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –º–µ—Ç—Ä–∏–∫–∏"""
        key = f"{server_name}:{function_name}"
        metrics = self.metrics[key]
        
        metrics["total_calls"] += 1
        if success:
            metrics["successful_calls"] += 1
        else:
            metrics["failed_calls"] += 1
            if error:
                metrics["errors"].append({
                    "timestamp": datetime.now().isoformat(),
                    "error": error
                })
                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫
                if len(metrics["errors"]) > 10:
                    metrics["errors"] = metrics["errors"][-10:]
        
        metrics["total_time"] += execution_time
        metrics["last_call"] = datetime.now().isoformat()
    
    async def get_available_functions(
        self, 
        server_name: Optional[str] = None
    ) -> List[MCPFunction]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
        
        Args:
            server_name: –ò–º—è —Å–µ—Ä–≤–µ—Ä–∞ (–µ—Å–ª–∏ None - –¥–ª—è –≤—Å–µ—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤)
            
        Returns:
            List[MCPFunction]: –°–ø–∏—Å–æ–∫ —Ñ—É–Ω–∫—Ü–∏–π
        """
        functions = []
        
        if server_name:
            if server_name in self.servers:
                server = self.servers[server_name]
                if server.is_connected():
                    try:
                        server_functions = await server.get_available_functions()
                        functions.extend(server_functions)
                    except Exception as e:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π {server_name}: {e}")
        else:
            # –ü–æ–ª—É—á–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ —Å–æ –≤—Å–µ—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤
            tasks = []
            for name, server in self.servers.items():
                if server.is_connected():
                    task = server.get_available_functions()
                    tasks.append((name, task))
            
            for name, task in tasks:
                try:
                    server_functions = await task
                    functions.extend(server_functions)
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π {name}: {e}")
        
        return functions
    
    async def health_check_all(self) -> Dict[str, bool]:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–¥–æ—Ä–æ–≤—å–µ –≤—Å–µ—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤
        
        Returns:
            Dict[str, bool]: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏
        """
        results = {}
        
        for server_name, server in self.servers.items():
            try:
                if server.is_connected():
                    results[server_name] = await server.health_check()
                else:
                    results[server_name] = False
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ health check {server_name}: {e}")
                results[server_name] = False
        
        return results
    
    def get_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤ –∏ –º–µ—Ç—Ä–∏–∫–∏"""
        status = {
            "servers": {},
            "cache_stats": self.cache.get_stats(),
            "metrics_summary": self._get_metrics_summary()
        }
        
        for server_name, server in self.servers.items():
            status["servers"][server_name] = server.get_status_info()
        
        return status
    
    def _get_metrics_summary(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–≤–æ–¥–∫—É –º–µ—Ç—Ä–∏–∫"""
        total_calls = sum(m["total_calls"] for m in self.metrics.values())
        successful_calls = sum(m["successful_calls"] for m in self.metrics.values())
        failed_calls = sum(m["failed_calls"] for m in self.metrics.values())
        
        return {
            "total_calls": total_calls,
            "successful_calls": successful_calls,
            "failed_calls": failed_calls,
            "success_rate": successful_calls / total_calls if total_calls > 0 else 0,
            "top_functions": self._get_top_functions(5),
            "recent_errors": self._get_recent_errors(5)
        }
    
    def _get_top_functions(self, limit: int) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–æ–ø –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π"""
        sorted_metrics = sorted(
            self.metrics.items(),
            key=lambda x: x[1]["total_calls"],
            reverse=True
        )[:limit]
        
        return [
            {
                "function": key,
                "calls": value["total_calls"],
                "success_rate": value["successful_calls"] / value["total_calls"] 
                                if value["total_calls"] > 0 else 0,
                "avg_time": value["total_time"] / value["total_calls"]
                           if value["total_calls"] > 0 else 0
            }
            for key, value in sorted_metrics
        ]
    
    def _get_recent_errors(self, limit: int) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ—à–∏–±–∫–∏"""
        all_errors = []
        
        for function, metrics in self.metrics.items():
            for error in metrics["errors"]:
                all_errors.append({
                    "function": function,
                    "timestamp": error["timestamp"],
                    "error": error["error"]
                })
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –∏ –±–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ
        all_errors.sort(key=lambda x: x["timestamp"], reverse=True)
        return all_errors[:limit]
    
    async def shutdown(self):
        """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
        logger.info("üîå –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã MCP Manager...")
        
        # –û—Ç–º–µ–Ω—è–µ–º —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
        for task in self._background_tasks:
            task.cancel()
        
        # –û—Ç–∫–ª—é—á–∞–µ–º –≤—Å–µ —Å–µ—Ä–≤–µ—Ä—ã
        disconnect_tasks = []
        for server_name, server in self.servers.items():
            if server.is_connected():
                task = server.disconnect()
                disconnect_tasks.append((server_name, task))
        
        for server_name, task in disconnect_tasks:
            try:
                await task
                logger.info(f"‚úÖ –°–µ—Ä–≤–µ—Ä {server_name} –æ—Ç–∫–ª—é—á–µ–Ω")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞ {server_name}: {e}")
        
        logger.info("‚úÖ MCP Manager –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É")