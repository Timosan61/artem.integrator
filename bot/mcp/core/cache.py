"""
–ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è MCP
"""

import hashlib
import json
from datetime import datetime, timedelta
from typing import Dict, Any, Optional, Tuple
import logging

logger = logging.getLogger(__name__)


class MCPCache:
    """
    –ö–µ—à –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ MCP —Ñ—É–Ω–∫—Ü–∏–π
    
    –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
    - TTL –¥–ª—è –∫–∞–∂–¥–æ–π –∑–∞–ø–∏—Å–∏
    - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∑–∞–ø–∏—Å–µ–π
    - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    """
    
    def __init__(self, max_size: int = 1000):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–µ—à–∞
        
        Args:
            max_size: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∫–µ—à–∞
        """
        self.cache: Dict[str, Tuple[Any, datetime]] = {}
        self.max_size = max_size
        self.stats = {
            "hits": 0,
            "misses": 0,
            "evictions": 0,
            "total_requests": 0
        }
        
    def get_key(self, server: str, function: str, parameters: Dict[str, Any]) -> str:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª—é—á –¥–ª—è –∫–µ—à–∞
        
        Args:
            server: –ò–º—è —Å–µ—Ä–≤–µ—Ä–∞
            function: –ò–º—è —Ñ—É–Ω–∫—Ü–∏–∏
            parameters: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ—É–Ω–∫—Ü–∏–∏
            
        Returns:
            str: –ö–ª—é—á –∫–µ—à–∞
        """
        # –°–æ–∑–¥–∞–µ–º —Å—Ç–∞–±–∏–ª—å–Ω—ã–π –∫–ª—é—á –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        param_str = json.dumps(parameters, sort_keys=True)
        key_str = f"{server}:{function}:{param_str}"
        
        # –•–µ—à–∏—Ä—É–µ–º –¥–ª—è –∫–æ–º–ø–∞–∫—Ç–Ω–æ—Å—Ç–∏
        return hashlib.md5(key_str.encode()).hexdigest()
    
    def get(self, key: str) -> Optional[Any]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –∫–µ—à–∞
        
        Args:
            key: –ö–ª—é—á –∫–µ—à–∞
            
        Returns:
            Optional[Any]: –ó–Ω–∞—á–µ–Ω–∏–µ –∏–ª–∏ None
        """
        self.stats["total_requests"] += 1
        
        if key in self.cache:
            value, expires_at = self.cache[key]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è
            if datetime.now() < expires_at:
                self.stats["hits"] += 1
                logger.debug(f"üì¶ Cache hit: {key}")
                return value
            else:
                # –£–¥–∞–ª—è–µ–º —É—Å—Ç–∞—Ä–µ–≤—à—É—é –∑–∞–ø–∏—Å—å
                del self.cache[key]
                logger.debug(f"üóëÔ∏è Cache expired: {key}")
        
        self.stats["misses"] += 1
        return None
    
    def set(self, key: str, value: Any, ttl: int = 300):
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –∫–µ—à–µ
        
        Args:
            key: –ö–ª—é—á –∫–µ—à–∞
            value: –ó–Ω–∞—á–µ–Ω–∏–µ
            ttl: –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –∫–µ—à–∞
        if len(self.cache) >= self.max_size:
            self._evict_oldest()
        
        expires_at = datetime.now() + timedelta(seconds=ttl)
        self.cache[key] = (value, expires_at)
        logger.debug(f"üíæ Cache set: {key}, TTL: {ttl}s")
    
    def delete(self, key: str) -> bool:
        """
        –£–¥–∞–ª—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –∫–µ—à–∞
        
        Args:
            key: –ö–ª—é—á –∫–µ—à–∞
            
        Returns:
            bool: –ë—ã–ª–æ –ª–∏ —É–¥–∞–ª–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ
        """
        if key in self.cache:
            del self.cache[key]
            logger.debug(f"üóëÔ∏è Cache delete: {key}")
            return True
        return False
    
    def clear(self):
        """–û—á–∏—â–∞–µ—Ç –≤–µ—Å—å –∫–µ—à"""
        self.cache.clear()
        logger.info("üóëÔ∏è Cache cleared")
    
    def _evict_oldest(self):
        """–£–¥–∞–ª—è–µ—Ç —Å–∞–º—É—é —Å—Ç–∞—Ä—É—é –∑–∞–ø–∏—Å—å"""
        if not self.cache:
            return
        
        # –ù–∞—Ö–æ–¥–∏–º –∑–∞–ø–∏—Å—å —Å —Å–∞–º—ã–º —Ä–∞–Ω–Ω–∏–º —Å—Ä–æ–∫–æ–º –∏—Å—Ç–µ—á–µ–Ω–∏—è
        oldest_key = min(self.cache.keys(), key=lambda k: self.cache[k][1])
        del self.cache[oldest_key]
        self.stats["evictions"] += 1
        logger.debug(f"üóëÔ∏è Cache eviction: {oldest_key}")
    
    def cleanup_expired(self):
        """–£–¥–∞–ª—è–µ—Ç –≤—Å–µ —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –∑–∞–ø–∏—Å–∏"""
        now = datetime.now()
        expired_keys = [
            key for key, (_, expires_at) in self.cache.items()
            if expires_at <= now
        ]
        
        for key in expired_keys:
            del self.cache[key]
        
        if expired_keys:
            logger.info(f"üóëÔ∏è Cleaned up {len(expired_keys)} expired cache entries")
    
    def get_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–µ—à–∞"""
        total_requests = self.stats["total_requests"]
        hit_rate = self.stats["hits"] / total_requests if total_requests > 0 else 0
        
        return {
            "size": len(self.cache),
            "max_size": self.max_size,
            "hits": self.stats["hits"],
            "misses": self.stats["misses"],
            "evictions": self.stats["evictions"],
            "total_requests": total_requests,
            "hit_rate": hit_rate,
            "usage_percent": len(self.cache) / self.max_size * 100
        }