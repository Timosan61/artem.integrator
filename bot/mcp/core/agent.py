"""
MCP Agent - –ê–≥–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å MCP —á–µ—Ä–µ–∑ AI
"""

import json
import logging
from typing import Optional, Dict, Any, List, Tuple, Union
from datetime import datetime
import asyncio

from ...core.interfaces import Message, Response, User, UserRole
from ...core.agent import BaseAgent
from ...core.config import config
from ..handlers import MCPHandler
from .manager import MCPManager
from .interfaces import MCPFunction

logger = logging.getLogger(__name__)


class MCPAgent(BaseAgent):
    """
    –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∞–≥–µ–Ω—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π MCP
    
    –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
    - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ MCP –∏–Ω—Ç–µ–Ω—Ç–∞
    - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
    - –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ MCP
    - Fallback –Ω–∞ –æ–±—ã—á–Ω—ã–π –∞–≥–µ–Ω—Ç
    """
    
    def __init__(self, base_agent: Optional[BaseAgent] = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MCP –∞–≥–µ–Ω—Ç–∞
        
        Args:
            base_agent: –ë–∞–∑–æ–≤—ã–π –∞–≥–µ–Ω—Ç –¥–ª—è fallback
        """
        self.base_agent = base_agent
        self.mcp_enabled = config.mcp.enabled
        self.mcp_manager = None
        self.mcp_handler = None
        
        if self.mcp_enabled:
            try:
                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º MCP –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
                self.mcp_manager = MCPManager()
                self.mcp_handler = MCPHandler(self.mcp_manager)
                
                # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–µ—Ä–≤–µ—Ä—ã –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
                asyncio.create_task(self._connect_servers())
                
                logger.info("‚úÖ MCP Agent –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ MCP: {e}")
                self.mcp_enabled = False
    
    async def _connect_servers(self):
        """–ü–æ–¥–∫–ª—é—á–∞–µ—Ç MCP —Å–µ—Ä–≤–µ—Ä—ã"""
        if self.mcp_manager:
            results = await self.mcp_manager.connect_all()
            connected = sum(1 for success in results.values() if success)
            logger.info(f"üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–æ MCP —Å–µ—Ä–≤–µ—Ä–æ–≤: {connected}/{len(results)}")
    
    async def process_message(self, message: Message) -> Response:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π MCP
        
        Args:
            message: –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            
        Returns:
            Response: –û—Ç–≤–µ—Ç –∞–≥–µ–Ω—Ç–∞
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ MCP
        if not self._has_mcp_access(message.user):
            # –ü–µ—Ä–µ–¥–∞–µ–º –æ–±—ã—á–Ω–æ–º—É –∞–≥–µ–Ω—Ç—É
            if self.base_agent:
                return await self.base_agent.process_message(message)
            else:
                return Response(
                    text="MCP –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º",
                    metadata={"mcp_access_denied": True}
                )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º MCP –∏–Ω—Ç–µ–Ω—Ç
        is_mcp, mcp_intent = await self._detect_mcp_intent(message)
        
        if is_mcp and self.mcp_enabled and self.mcp_handler:
            try:
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ MCP
                response = await self.mcp_handler.handle_message(message, mcp_intent)
                return response
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ MCP: {e}")
                # Fallback –Ω–∞ –æ–±—ã—á–Ω—ã–π –∞–≥–µ–Ω—Ç
                if self.base_agent:
                    return await self.base_agent.process_message(message)
                else:
                    return Response(
                        text=f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è MCP –∫–æ–º–∞–Ω–¥—ã: {str(e)}",
                        metadata={"error": str(e)}
                    )
        
        # –û–±—ã—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
        if self.base_agent:
            return await self.base_agent.process_message(message)
        else:
            return Response(
                text="–ë–∞–∑–æ–≤—ã–π –∞–≥–µ–Ω—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω",
                metadata={"error": "No base agent"}
            )
    
    def _has_mcp_access(self, user: User) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ MCP"""
        return user.role == UserRole.ADMIN
    
    async def _detect_mcp_intent(self, message: Message) -> Tuple[bool, Optional[Dict[str, Any]]]:
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç MCP –∏–Ω—Ç–µ–Ω—Ç –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
        
        Returns:
            Tuple[bool, Optional[Dict]]: (—è–≤–ª—è–µ—Ç—Å—è –ª–∏ MCP –∑–∞–ø—Ä–æ—Å–æ–º, –¥–∞–Ω–Ω—ã–µ –∏–Ω—Ç–µ–Ω—Ç–∞)
        """
        text = message.text.lower()
        
        # –Ø–≤–Ω—ã–µ MCP –∫–æ–º–∞–Ω–¥—ã
        if text.startswith('/mcp'):
            parts = text.split(maxsplit=2)
            if len(parts) >= 2:
                command = parts[1]
                args = parts[2] if len(parts) > 2 else ""
                
                return True, {
                    "type": "command",
                    "command": command,
                    "args": args
                }
        
        # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è SQL
        if text.startswith('/db'):
            query = text[3:].strip()
            return True, {
                "type": "sql",
                "query": query
            }
        
        # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
        if text.startswith('/docs'):
            parts = text.split(maxsplit=2)
            if len(parts) >= 2:
                return True, {
                    "type": "docs",
                    "library": parts[1],
                    "topic": parts[2] if len(parts) > 2 else None
                }
        
        # –ê–Ω–∞–ª–∏–∑ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞ –¥–ª—è MCP –∏–Ω—Ç–µ–Ω—Ç–∞
        mcp_keywords = {
            "supabase": ["–±–∞–∑–∞ –¥–∞–Ω–Ω", "—Ç–∞–±–ª–∏—Ü", "sql", "–º–∏–≥—Ä–∞—Ü–∏", "supabase"],
            "digitalocean": ["–¥–µ–ø–ª–æ–π", "–ø—Ä–∏–ª–æ–∂–µ–Ω–∏", "digitalocean", "—Å–µ—Ä–≤–µ—Ä"],
            "context7": ["–¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏", "–ø—Ä–∏–º–µ—Ä", "–∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å", "api"]
        }
        
        for server, keywords in mcp_keywords.items():
            if any(keyword in text for keyword in keywords):
                return True, {
                    "type": "natural",
                    "server": server,
                    "query": text
                }
        
        return False, None
    
    async def get_available_functions(self) -> List[MCPFunction]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö MCP —Ñ—É–Ω–∫—Ü–∏–π"""
        if self.mcp_manager:
            return await self.mcp_manager.get_available_functions()
        return []
    
    async def clear_user_memory(self, user_id: int) -> bool:
        """–û—á–∏—â–∞–µ—Ç –ø–∞–º—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        # –û—á–∏—â–∞–µ–º –∫–µ—à MCP –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if self.mcp_manager:
            # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ—á–∏—Å—Ç–∫—É –∫–µ—à–∞ –ø–æ user_id
            pass
        
        # –ü–µ—Ä–µ–¥–∞–µ–º –±–∞–∑–æ–≤–æ–º—É –∞–≥–µ–Ω—Ç—É
        if self.base_agent:
            return await self.base_agent.clear_user_memory(user_id)
        
        return True
    
    def get_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –∞–≥–µ–Ω—Ç–∞"""
        status = {
            "mcp_enabled": self.mcp_enabled,
            "base_agent": self.base_agent is not None
        }
        
        if self.mcp_manager:
            status["mcp_status"] = self.mcp_manager.get_status()
        
        if self.base_agent and hasattr(self.base_agent, 'get_status'):
            status["base_agent_status"] = self.base_agent.get_status()
        
        return status
    
    async def shutdown(self):
        """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã"""
        if self.mcp_manager:
            await self.mcp_manager.shutdown()
        
        if self.base_agent and hasattr(self.base_agent, 'shutdown'):
            await self.base_agent.shutdown()