"""
–°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è –¥–≤—É—Ö—Ä–µ–∂–∏–º–Ω–æ–≥–æ –±–æ—Ç–∞

–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:
- –û–±—ã—á–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: –±–∞–∑–æ–≤–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è
- –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ SocialMedia —Ñ—É–Ω–∫—Ü–∏—è–º
"""

import logging
from functools import wraps
from typing import Optional, Dict, Any, List

from .config import ADMIN_USER_ID, ADMIN_USERNAMES
from .core.config import config

logger = logging.getLogger(__name__)


def is_admin(user_id: int, username: str = None) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    
    Args:
        user_id: Telegram User ID
        username: Telegram username (–±–µ–∑ @)
        
    Returns:
        bool: True –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω
    """
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ User ID –∏–∑ —Å–ø–∏—Å–∫–∞
    if user_id and config.admin.user_ids:
        if user_id in config.admin.user_ids:
            logger.debug(f"‚úÖ User {user_id} is admin (found in ID list)")
            return True
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ username
    if username and config.admin.usernames:
        clean_username = username.lower().replace('@', '')
        admin_usernames = [u.lower().strip() for u in config.admin.usernames if u.strip()]
        if clean_username in admin_usernames:
            logger.debug(f"‚úÖ User @{username} is admin (found in username list)")
            return True
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ auto-admin manager
    from .core.auto_admin import auto_admin_manager
    admins = auto_admin_manager.get_all_admins()
    if user_id and str(user_id) in admins:
        logger.debug(f"‚úÖ User {user_id} is admin (found in auto-admin)")
        return True
    
    logger.debug(f"‚ùå User {user_id} (@{username}) is NOT admin")
    return False


def get_user_mode(user_id: int, username: str = None, test_mode_override: dict = None) -> str:
    """
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    Args:
        user_id: Telegram User ID
        username: Telegram username
        test_mode_override: –°–ª–æ–≤–∞—Ä—å —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ —Ä–µ–∂–∏–º–∞–º–∏ {user_id: "admin"|"user"}
        
    Returns:
        str: "admin" –∏–ª–∏ "user"
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å
    if test_mode_override and user_id in test_mode_override:
        test_mode = test_mode_override[user_id]
        if test_mode in ["admin", "user"]:
            return test_mode
    
    # –û–±—ã—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤
    if is_admin(user_id, username):
        return "admin"
    return "user"


def admin_required(func):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π, —Ç—Ä–µ–±—É—é—â–∏—Ö –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–∞–≤
    
    –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
        @admin_required
        def admin_function(message_data):
            # –§—É–Ω–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞
            pass
    """
    @wraps(func)
    def wrapper(*args, **kwargs):
        # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –ø–µ—Ä–≤—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        message_data = args[0] if args else kwargs.get('message_data', {})
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data = message_data.get('from', {})
        user_id = user_data.get('id')
        username = user_data.get('username')
        
        if not is_admin(user_id, username):
            logger.warning(f"‚ùå –ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω—Å–∫–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} (@{username})")
            return None
        
        logger.info(f"‚úÖ –ê–¥–º–∏–Ω—Å–∫–∏–π –¥–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} (@{username})")
        return func(*args, **kwargs)
    
    return wrapper


def log_user_access(user_id: int, username: str = None, command: str = None):
    """
    –õ–æ–≥–∏—Ä—É–µ—Ç –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –±–æ—Ç—É
    
    Args:
        user_id: Telegram User ID
        username: Telegram username
        command: –í—ã–ø–æ–ª–Ω—è–µ–º–∞—è –∫–æ–º–∞–Ω–¥–∞
    """
    mode = get_user_mode(user_id, username)
    user_info = f"ID:{user_id}"
    if username:
        user_info += f" @{username}"
    
    if command:
        logger.info(f"üîë [{mode.upper()}] {user_info} –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É: {command}")
    else:
        logger.info(f"üîë [{mode.upper()}] {user_info} –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ")


def get_permission_info() -> Dict[str, Any]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
    
    Returns:
        dict: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–∞–≤–∞—Ö –¥–æ—Å—Ç—É–ø–∞
    """
    from .config import MCP_ENABLED
    return {
        "admin_user_id": ADMIN_USER_ID,
        "admin_usernames": ADMIN_USERNAMES,
        "admin_configured": bool(ADMIN_USER_ID or ADMIN_USERNAMES),
        "security_mode": "enabled" if ADMIN_USER_ID else "disabled",
        "mcp_enabled": MCP_ENABLED
    }


def is_mcp_admin(user_id: int, username: str = None) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ MCP —Ñ—É–Ω–∫—Ü–∏—è–º
    
    Args:
        user_id: Telegram User ID
        username: Telegram username
        
    Returns:
        bool: True –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞ –Ω–∞ MCP
    """
    # –°–µ–π—á–∞—Å –ø—Ä–∞–≤–∞ –Ω–∞ MCP –µ—Å—Ç—å —É –≤—Å–µ—Ö –∞–¥–º–∏–Ω–æ–≤
    # –í –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–¥–µ–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
    return is_admin(user_id, username)


def get_mcp_permissions(user_id: int, username: str = None) -> Dict[str, List[str]]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö MCP –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    Args:
        user_id: Telegram User ID
        username: Telegram username
        
    Returns:
        dict: –°–ª–æ–≤–∞—Ä—å —Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è–º–∏ –ø–æ —Å–µ—Ä–≤–µ—Ä–∞–º
    """
    if not is_mcp_admin(user_id, username):
        return {}
    
    # –ü–æ–ª–Ω—ã–µ –ø—Ä–∞–≤–∞ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
    return {
        "supabase": ["read", "write", "admin"],
        "digitalocean": ["read", "deploy", "admin"],
        "context7": ["read"]
    }


def format_access_denied_message(user_id: int, username: str = None) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç–∫–∞–∑–µ –≤ –¥–æ—Å—Ç—É–ø–µ
    
    Args:
        user_id: User ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        username: Username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
    Returns:
        str: –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç–∫–∞–∑–µ –≤ –¥–æ—Å—Ç—É–ø–µ
    """
    user_info = f"ID: {user_id}"
    if username:
        user_info += f" (@{username})"
    
    return f"""üö´ –î–æ—Å—Ç—É–ø –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω

üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_info}
üîí –¢—Ä–µ–±—É—é—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—Å–∫–∏–µ –ø—Ä–∞–≤–∞

–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Å–∏—Å—Ç–µ–º—ã."""


def is_admin_token(token: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–æ–∫–µ–Ω –∞–¥–º–∏–Ω—Å–∫–∏–º
    
    Args:
        token: –¢–æ–∫–µ–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        
    Returns:
        bool: True –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω –∞–¥–º–∏–Ω—Å–∫–∏–π
    """
    # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω—Å–∫–∏—Ö —Ç–æ–∫–µ–Ω–æ–≤ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    # –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è
    import os
    admin_token = os.getenv('ADMIN_TOKEN', 'secure-admin-token')
    return token == admin_token


def format_admin_welcome_message(user_id: int = None, username: str = None, test_mode_override: dict = None) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∞
    
    Args:
        user_id: User ID –∞–¥–º–∏–Ω–∞
        username: Username –∞–¥–º–∏–Ω–∞
        test_mode_override: –°–ª–æ–≤–∞—Ä—å —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ —Ä–µ–∂–∏–º–∞–º–∏
        
    Returns:
        str: –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∞
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º
    test_mode_info = ""
    if test_mode_override and user_id in test_mode_override:
        test_mode = test_mode_override[user_id]
        test_mode_info = f"\nüß™ **–¢–ï–°–¢–û–í–´–ô –†–ï–ñ–ò–ú: {test_mode.upper()}**"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å MCP
    from .config import MCP_ENABLED
    mcp_section = ""
    if MCP_ENABLED:
        mcp_section = """
üîå **MCP –∫–æ–º–∞–Ω–¥—ã:**
‚Ä¢ /mcp status - —Å—Ç–∞—Ç—É—Å MCP —Å–µ—Ä–≤–µ—Ä–æ–≤
‚Ä¢ /mcp projects - —Å–ø–∏—Å–æ–∫ Supabase –ø—Ä–æ–µ–∫—Ç–æ–≤
‚Ä¢ /db &lt;–∑–∞–ø—Ä–æ—Å&gt; - –≤—ã–ø–æ–ª–Ω–∏—Ç—å SQL –∑–∞–ø—Ä–æ—Å
‚Ä¢ /mcp apps - —Å–ø–∏—Å–æ–∫ DigitalOcean –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
‚Ä¢ /docs &lt;–±–∏–±–ª–∏–æ—Ç–µ–∫–∞&gt; &lt;–∑–∞–ø—Ä–æ—Å&gt; - –ø–æ–∏—Å–∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
‚Ä¢ /mcp help - —Å–ø—Ä–∞–≤–∫–∞ –ø–æ MCP
"""
    
    return f"""üîë –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!{test_mode_info}

üë§ ID: {user_id}
üìõ Username: @{username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}

üéØ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
‚Ä¢ /youtube <–∑–∞–ø—Ä–æ—Å> - –ø–æ–∏—Å–∫ YouTube –≤–∏–¥–µ–æ
‚Ä¢ /instagram <–∑–∞–ø—Ä–æ—Å> - –ø–æ–∏—Å–∫ Instagram —Ä–µ–µ–ª–æ–≤  
‚Ä¢ /tiktok <–∑–∞–ø—Ä–æ—Å> - –ø–æ–∏—Å–∫ TikTok –≤–∏–¥–µ–æ
‚Ä¢ /channel <–∫–∞–Ω–∞–ª> - –∞–Ω–∞–ª–∏–∑ YouTube –∫–∞–Ω–∞–ª–∞
‚Ä¢ /admin_status - —Å—Ç–∞—Ç—É—Å –∞–¥–º–∏–Ω—Å–∫–æ–π –ø–∞–Ω–µ–ª–∏
‚Ä¢ /social_config - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ SocialMedia
{mcp_section}
üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∂–∏–º–æ–≤:
‚Ä¢ /test_user - –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ä–µ–∂–∏–º
‚Ä¢ /test_admin - –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω—Å–∫–∏–π —Ä–µ–∂–∏–º  
‚Ä¢ /test_status - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º

üìä –¢–∞–∫–∂–µ –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ –±–∞–∑–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞."""


def format_user_welcome_message(user_name: str = None, user_id: int = None, test_mode_override: dict = None) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    Args:
        user_name: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞)
        test_mode_override: –°–ª–æ–≤–∞—Ä—å —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ —Ä–µ–∂–∏–º–∞–º–∏
        
    Returns:
        str: –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º
    test_mode_info = ""
    if test_mode_override and user_id and user_id in test_mode_override:
        test_mode = test_mode_override[user_id]
        test_mode_info = f"\nüß™ **–¢–ï–°–¢–û–í–´–ô –†–ï–ñ–ò–ú: {test_mode.upper()}**"
    
    greeting_name = user_name or "–¥—Ä—É–≥"
    return f"""üëã –ü—Ä–∏–≤–µ—Ç, {greeting_name}!{test_mode_info}

–ú–µ–Ω—è –∑–æ–≤—É—Ç –ê–Ω–∞—Å—Ç–∞—Å–∏—è, —è –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç Textile Pro.

üí¨ –ó–∞–¥–∞–≤–∞–π—Ç–µ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã –æ:
‚Ä¢ –¢–µ–∫—Å—Ç–∏–ª—å–Ω–æ–º –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ
‚Ä¢ –ó–∞–∫–∞–∑–∞—Ö –∏–∑ –ö–∏—Ç–∞—è
‚Ä¢ –ö–∞—á–µ—Å—Ç–≤–µ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
‚Ä¢ –õ–æ–≥–∏—Å—Ç–∏–∫–µ –∏ –¥–æ—Å—Ç–∞–≤–∫–µ
‚Ä¢ –¶–µ–Ω–∞—Ö –∏ —É—Å–ª–æ–≤–∏—è—Ö

–Ø –≥–æ—Ç–æ–≤–∞ –ø–æ–º–æ—á—å –≤–∞–º —Å –ª—é–±—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏!"""