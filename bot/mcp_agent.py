"""
MCP Agent - –ê–≥–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Model Context Protocol —Å–µ—Ä–≤–µ—Ä–∞–º–∏

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å MCP —Å–µ—Ä–≤–µ—Ä–∞–º–∏ (Supabase, DigitalOcean, Context7)
—á–µ—Ä–µ–∑ OpenAI Function Calling –∏–ª–∏ Anthropic Claude –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ —Å–∏—Å—Ç–µ–º—ã.

–û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
- –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–π –∏–∑ MCP –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
- –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º MCP —Å–µ—Ä–≤–µ—Ä–∞–º
- Fallback –Ω–∞ –æ–±—ã—á–Ω—ã–π AI agent –ø—Ä–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ MCP
- –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å–∏—Å—Ç–µ–º–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
"""

import json
import logging
import asyncio
from datetime import datetime
from typing import Optional, Dict, Any, List, Tuple
from dataclasses import dataclass

import openai
from anthropic import AsyncAnthropic

from .agent import myassistant
from .config import OPENAI_API_KEY, OPENAI_MODEL, ANTHROPIC_API_KEY, MCP_ENABLED
from .auth import get_user_mode, is_admin

logger = logging.getLogger(__name__)


@dataclass
class MCPFunction:
    """–û–ø–∏—Å–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ MCP –¥–ª—è OpenAI/Claude"""
    name: str
    description: str
    parameters: Dict[str, Any]
    server: str
    permissions: List[str]


class MCPAgent(myassistant):
    """
    –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∞–≥–µ–Ω—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π MCP —Å–µ—Ä–≤–µ—Ä–æ–≤
    
    –ù–∞—Å–ª–µ–¥—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –±–∞–∑–æ–≤–æ–≥–æ –∞–≥–µ–Ω—Ç–∞ –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç:
    - –†–∞–±–æ—Ç—É —Å MCP —Å–µ—Ä–≤–µ—Ä–∞–º–∏ —á–µ—Ä–µ–∑ Function Calling
    - –î–∏–Ω–∞–º–∏—á–µ—Å–∫—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
    - –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—É—é –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—é –∑–∞–ø—Ä–æ—Å–æ–≤
    """
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MCP –∞–≥–µ–Ω—Ç–∞"""
        super().__init__()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å MCP
        self.mcp_enabled = MCP_ENABLED and bool(OPENAI_API_KEY or ANTHROPIC_API_KEY)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤
        self.anthropic_client = None
        if ANTHROPIC_API_KEY and self.mcp_enabled:
            try:
                self.anthropic_client = AsyncAnthropic(api_key=ANTHROPIC_API_KEY)
                logger.info("‚úÖ Anthropic –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è MCP")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Anthropic: {e}")
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ MCP –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        self.mcp_config = self._load_mcp_config()
        self.mcp_functions = self._generate_mcp_functions()
        
        # MCP Manager –±—É–¥–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –æ—Ç–¥–µ–ª—å–Ω–æ
        self.mcp_manager = None
        
        logger.info(f"ü§ñ MCP Agent –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. MCP –≤–∫–ª—é—á–µ–Ω: {self.mcp_enabled}")
        logger.info(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ MCP —Ñ—É–Ω–∫—Ü–∏–π: {len(self.mcp_functions)}")
    
    def _load_mcp_config(self) -> Dict[str, Any]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é MCP —Å–µ—Ä–≤–µ—Ä–æ–≤"""
        try:
            with open('data/mcp_config.json', 'r', encoding='utf-8') as f:
                config = json.load(f)
                logger.info("‚úÖ MCP –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
                return config
        except FileNotFoundError:
            logger.warning("‚ö†Ô∏è MCP –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é")
            return self._get_default_mcp_config()
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ MCP –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            return self._get_default_mcp_config()
    
    def _get_default_mcp_config(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é MCP"""
        return {
            "mcp_enabled": True,
            "servers": {
                "supabase": {
                    "enabled": False,
                    "display_name": "Supabase –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö",
                    "description": "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö –∏ –ø—Ä–æ–µ–∫—Ç–∞–º–∏ Supabase",
                    "functions": []
                },
                "digitalocean": {
                    "enabled": False,
                    "display_name": "DigitalOcean –ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞",
                    "description": "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è–º–∏ –∏ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π DigitalOcean",
                    "functions": []
                },
                "context7": {
                    "enabled": False,
                    "display_name": "Context7 –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è",
                    "description": "–ü–æ–∏—Å–∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –∏ –ø—Ä–∏–º–µ—Ä–æ–≤ –∫–æ–¥–∞",
                    "functions": []
                }
            },
            "agent_instruction": "–¢—ã –ø–æ–º–æ—â–Ω–∏–∫ —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ MCP —Å–µ—Ä–≤–µ—Ä–∞–º. –ò—Å–ø–æ–ª—å–∑—É–π –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
            "last_updated": datetime.now().isoformat()
        }
    
    def _generate_mcp_functions(self) -> List[MCPFunction]:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö MCP —Ñ—É–Ω–∫—Ü–∏–π –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        
        Returns:
            List[MCPFunction]: –°–ø–∏—Å–æ–∫ —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è Function Calling
        """
        functions = []
        
        if not self.mcp_config.get("mcp_enabled", False):
            return functions
        
        servers = self.mcp_config.get("servers", {})
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
        for server_name, server_config in servers.items():
            if not server_config.get("enabled", False):
                continue
            
            # –ë–∞–∑–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ MCP —Å–µ—Ä–≤–µ—Ä–∞
            if server_name == "supabase":
                functions.extend(self._generate_supabase_functions())
            elif server_name == "digitalocean":
                functions.extend(self._generate_digitalocean_functions())
            elif server_name == "context7":
                functions.extend(self._generate_context7_functions())
        
        return functions
    
    def _generate_supabase_functions(self) -> List[MCPFunction]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è Supabase"""
        return [
            MCPFunction(
                name="supabase_list_projects",
                description="–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ Supabase",
                parameters={
                    "type": "object",
                    "properties": {},
                    "required": []
                },
                server="supabase",
                permissions=["read"]
            ),
            MCPFunction(
                name="supabase_execute_sql",
                description="–í—ã–ø–æ–ª–Ω–∏—Ç—å SQL –∑–∞–ø—Ä–æ—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö Supabase",
                parameters={
                    "type": "object",
                    "properties": {
                        "project_id": {
                            "type": "string",
                            "description": "ID –ø—Ä–æ–µ–∫—Ç–∞ Supabase"
                        },
                        "query": {
                            "type": "string",
                            "description": "SQL –∑–∞–ø—Ä–æ—Å –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"
                        }
                    },
                    "required": ["project_id", "query"]
                },
                server="supabase",
                permissions=["read", "write"]
            ),
            MCPFunction(
                name="supabase_create_project",
                description="–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç Supabase",
                parameters={
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string",
                            "description": "–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞"
                        },
                        "organization_id": {
                            "type": "string",
                            "description": "ID –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏"
                        },
                        "region": {
                            "type": "string",
                            "description": "–†–µ–≥–∏–æ–Ω –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è",
                            "enum": ["us-east-1", "us-west-1", "eu-west-1", "ap-southeast-1"]
                        }
                    },
                    "required": ["name", "organization_id"]
                },
                server="supabase",
                permissions=["admin"]
            )
        ]
    
    def _generate_digitalocean_functions(self) -> List[MCPFunction]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è DigitalOcean"""
        return [
            MCPFunction(
                name="digitalocean_list_apps",
                description="–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –≤ DigitalOcean",
                parameters={
                    "type": "object",
                    "properties": {
                        "page": {
                            "type": "number",
                            "description": "–ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã"
                        },
                        "per_page": {
                            "type": "number",
                            "description": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ"
                        }
                    },
                    "required": []
                },
                server="digitalocean",
                permissions=["read"]
            ),
            MCPFunction(
                name="digitalocean_get_app_logs",
                description="–ü–æ–ª—É—á–∏—Ç—å –ª–æ–≥–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è DigitalOcean",
                parameters={
                    "type": "object",
                    "properties": {
                        "app_id": {
                            "type": "string",
                            "description": "ID –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"
                        },
                        "deployment_id": {
                            "type": "string",
                            "description": "ID –¥–µ–ø–ª–æ—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)"
                        },
                        "type": {
                            "type": "string",
                            "description": "–¢–∏–ø –ª–æ–≥–æ–≤",
                            "enum": ["BUILD", "DEPLOY", "RUN"]
                        }
                    },
                    "required": ["app_id", "type"]
                },
                server="digitalocean",
                permissions=["read"]
            ),
            MCPFunction(
                name="digitalocean_deploy_app",
                description="–ó–∞–ø—É—Å—Ç–∏—Ç—å –Ω–æ–≤—ã–π –¥–µ–ø–ª–æ–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è",
                parameters={
                    "type": "object",
                    "properties": {
                        "app_id": {
                            "type": "string",
                            "description": "ID –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"
                        },
                        "force_build": {
                            "type": "boolean",
                            "description": "–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ—Å–±–æ—Ä–∫–∞"
                        }
                    },
                    "required": ["app_id"]
                },
                server="digitalocean",
                permissions=["deploy"]
            )
        ]
    
    def _generate_context7_functions(self) -> List[MCPFunction]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è Context7"""
        return [
            MCPFunction(
                name="context7_search_docs",
                description="–ü–æ–∏—Å–∫ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫ –∏ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–æ–≤",
                parameters={
                    "type": "object",
                    "properties": {
                        "library_name": {
                            "type": "string",
                            "description": "–ù–∞–∑–≤–∞–Ω–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'react', 'vue', 'django')"
                        },
                        "query": {
                            "type": "string",
                            "description": "–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å"
                        },
                        "limit": {
                            "type": "number",
                            "description": "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤",
                            "default": 5
                        }
                    },
                    "required": ["library_name", "query"]
                },
                server="context7",
                permissions=["read"]
            ),
            MCPFunction(
                name="context7_get_code_examples",
                description="–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–º–µ—Ä—ã –∫–æ–¥–∞ –¥–ª—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∏",
                parameters={
                    "type": "object",
                    "properties": {
                        "library_name": {
                            "type": "string",
                            "description": "–ù–∞–∑–≤–∞–Ω–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏"
                        },
                        "topic": {
                            "type": "string",
                            "description": "–¢–µ–º–∞ –∏–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'hooks', 'routing')"
                        }
                    },
                    "required": ["library_name", "topic"]
                },
                server="context7",
                permissions=["read"]
            )
        ]
    
    async def can_handle_mcp(self, message: str, user_id: int, username: str = None) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–µ—Ç –ª–∏ MCP –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å
        
        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            username: Username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            bool: True –µ—Å–ª–∏ MCP –º–æ–∂–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ MCP –≤–∫–ª—é—á–µ–Ω
        if not self.mcp_enabled:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_mode = get_user_mode(user_id, username)
        if user_mode != "admin":
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —è–≤–Ω—ã–µ MCP –∫–æ–º–∞–Ω–¥—ã
        mcp_keywords = [
            '/mcp', '/db', '/database', '/supabase',
            '/deploy', '/digitalocean', '/do',
            '/docs', '/context7', '/documentation'
        ]
        
        message_lower = message.lower()
        for keyword in mcp_keywords:
            if message_lower.startswith(keyword):
                return True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ MCP –∑–∞–ø—Ä–æ—Å–æ–≤
        context_patterns = [
            '–±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö', 'sql', '–∑–∞–ø—Ä–æ—Å –∫ –±–¥', '—Ç–∞–±–ª–∏—Ü–∞',
            '–¥–µ–ø–ª–æ–π', '—Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—å', '–ª–æ–≥–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è',
            '–¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è', '–ø—Ä–∏–º–µ—Ä—ã –∫–æ–¥–∞', '–∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å'
        ]
        
        for pattern in context_patterns:
            if pattern in message_lower:
                return True
        
        return False
    
    async def process_mcp_request(
        self, 
        message: str, 
        session_id: str, 
        user_name: str = None,
        user_id: int = None
    ) -> str:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ MCP
        
        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            session_id: ID —Å–µ—Å—Å–∏–∏
            user_name: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            str: –û—Ç–≤–µ—Ç –æ—Ç MCP –∏–ª–∏ fallback –Ω–∞ –æ–±—ã—á–Ω—ã–π agent
        """
        try:
            # –õ–æ–≥–∏—Ä—É–µ–º MCP –∑–∞–ø—Ä–æ—Å
            logger.info(f"üîå MCP –∑–∞–ø—Ä–æ—Å –æ—Ç {user_name} ({user_id}): {message[:100]}...")
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å Anthropic –∫–ª–∏–µ–Ω—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
            if self.anthropic_client:
                return await self._process_with_anthropic(message, session_id, user_name)
            
            # –ò–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º OpenAI —Å Function Calling
            elif self.openai_client:
                return await self._process_with_openai(message, session_id, user_name)
            
            # Fallback –Ω–∞ –æ–±—ã—á–Ω—ã–π agent
            else:
                logger.warning("‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è MCP, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π agent")
                return await self.generate_response(message, session_id, user_name)
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ MCP –∑–∞–ø—Ä–æ—Å–∞: {e}")
            # Fallback –Ω–∞ –æ–±—ã—á–Ω—ã–π agent
            return await self.generate_response(message, session_id, user_name)
    
    async def _process_with_openai(self, message: str, session_id: str, user_name: str) -> str:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ—Ä–µ–∑ OpenAI —Å Function Calling"""
        try:
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç —Å MCP –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏
            system_prompt = self.mcp_config.get("agent_instruction", self.instruction.get("system_instruction", ""))
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –ø–∞–º—è—Ç–∏
            context = await self.get_zep_memory_context(session_id)
            if context:
                system_prompt += f"\n\n–ö–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤:\n{context}"
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è OpenAI
            functions = []
            for mcp_func in self.mcp_functions:
                functions.append({
                    "name": mcp_func.name,
                    "description": mcp_func.description,
                    "parameters": mcp_func.parameters
                })
            
            # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
            messages = [
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": message}
            ]
            
            # –í—ã–∑—ã–≤–∞–µ–º OpenAI —Å —Ñ—É–Ω–∫—Ü–∏—è–º–∏
            response = await self.openai_client.chat.completions.create(
                model=OPENAI_MODEL,
                messages=messages,
                functions=functions if functions else None,
                function_call="auto" if functions else None,
                max_tokens=1000,
                temperature=0.7
            )
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
            response_message = response.choices[0].message
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏
            if response_message.function_call:
                function_name = response_message.function_call.name
                function_args = json.loads(response_message.function_call.arguments)
                
                logger.info(f"üîß –í—ã–∑–æ–≤ MCP —Ñ—É–Ω–∫—Ü–∏–∏: {function_name}")
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é —á–µ—Ä–µ–∑ MCP Manager
                if self.mcp_manager:
                    result = await self.mcp_manager.execute_function(
                        function_name, 
                        function_args,
                        user_id=user_name
                    )
                else:
                    result = {"error": "MCP Manager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"}
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ –ø–æ–ª—É—á–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
                messages.append(response_message)
                messages.append({
                    "role": "function",
                    "name": function_name,
                    "content": json.dumps(result, ensure_ascii=False)
                })
                
                # –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
                final_response = await self.openai_client.chat.completions.create(
                    model=OPENAI_MODEL,
                    messages=messages,
                    max_tokens=1000,
                    temperature=0.7
                )
                
                bot_response = final_response.choices[0].message.content
            else:
                # –û–±—ã—á–Ω—ã–π –æ—Ç–≤–µ—Ç –±–µ–∑ —Ñ—É–Ω–∫—Ü–∏–π
                bot_response = response_message.content
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–∞–º—è—Ç—å
            await self.add_to_zep_memory(session_id, message, bot_response, user_name)
            
            return bot_response
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ OpenAI MCP: {e}")
            raise
    
    async def _process_with_anthropic(self, message: str, session_id: str, user_name: str) -> str:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ—Ä–µ–∑ Anthropic Claude"""
        try:
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
            system_prompt = self.mcp_config.get("agent_instruction", "")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö MCP —Ñ—É–Ω–∫—Ü–∏–π
            if self.mcp_functions:
                system_prompt += "\n\n–î–æ—Å—Ç—É–ø–Ω—ã–µ MCP —Ñ—É–Ω–∫—Ü–∏–∏:\n"
                for func in self.mcp_functions:
                    system_prompt += f"- {func.name}: {func.description}\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
            context = await self.get_zep_memory_context(session_id)
            if context:
                system_prompt += f"\n\n–ö–æ–Ω—Ç–µ–∫—Å—Ç:\n{context}"
            
            # –í—ã–∑—ã–≤–∞–µ–º Claude
            response = await self.anthropic_client.messages.create(
                model="claude-3-opus-20240229",
                max_tokens=1000,
                temperature=0.7,
                system=system_prompt,
                messages=[
                    {"role": "user", "content": message}
                ]
            )
            
            bot_response = response.content[0].text
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–∞–º—è—Ç—å
            await self.add_to_zep_memory(session_id, message, bot_response, user_name)
            
            return bot_response
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ Anthropic MCP: {e}")
            raise
    
    def get_mcp_status(self) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å MCP —Å–∏—Å—Ç–µ–º—ã
        
        Returns:
            Dict: –°—Ç–∞—Ç—É—Å MCP —Å–µ—Ä–≤–µ—Ä–æ–≤ –∏ —Ñ—É–Ω–∫—Ü–∏–π
        """
        status = {
            "mcp_enabled": self.mcp_enabled,
            "anthropic_available": self.anthropic_client is not None,
            "openai_available": self.openai_client is not None,
            "total_functions": len(self.mcp_functions),
            "servers": {},
            "last_config_update": self.mcp_config.get("last_updated", "unknown")
        }
        
        # –°—Ç–∞—Ç—É—Å –∫–∞–∂–¥–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
        servers = self.mcp_config.get("servers", {})
        for server_name, server_config in servers.items():
            status["servers"][server_name] = {
                "enabled": server_config.get("enabled", False),
                "display_name": server_config.get("display_name", server_name),
                "functions_count": len([f for f in self.mcp_functions if f.server == server_name])
            }
        
        return status
    
    def reload_mcp_config(self):
        """–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é MCP"""
        logger.info("üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ MCP –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
        old_functions_count = len(self.mcp_functions)
        
        self.mcp_config = self._load_mcp_config()
        self.mcp_functions = self._generate_mcp_functions()
        
        new_functions_count = len(self.mcp_functions)
        logger.info(f"‚úÖ MCP –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω–∞. –§—É–Ω–∫—Ü–∏–π: {old_functions_count} -> {new_functions_count}")


# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä MCP –∞–≥–µ–Ω—Ç–∞
mcp_agent = None

def initialize_mcp_agent():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π MCP –∞–≥–µ–Ω—Ç"""
    global mcp_agent
    try:
        mcp_agent = MCPAgent()
        logger.info("‚úÖ MCP Agent –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –≥–ª–æ–±–∞–ª—å–Ω–æ")
        return mcp_agent
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ MCP Agent: {e}")
        return None