"""
MCP Manager - –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è MCP —Å–µ—Ä–≤–µ—Ä–∞–º–∏

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞:
- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º MCP —Å–µ—Ä–≤–µ—Ä–æ–≤
- –°–≤—è–∑—å —Å MCP —Å–µ—Ä–≤–µ—Ä–∞–º–∏ —á–µ—Ä–µ–∑ HTTP/WebSocket
- –ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
- –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–æ–≤
- –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ MCP —Ñ—É–Ω–∫—Ü–∏–π
"""

import json
import logging
import asyncio
from datetime import datetime, timedelta
from typing import Optional, Dict, Any, List, Tuple
from dataclasses import dataclass, field
import httpx
from collections import defaultdict

logger = logging.getLogger(__name__)


@dataclass
class MCPServerConnection:
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ MCP —Å–µ—Ä–≤–µ—Ä—É"""
    server_name: str
    url: str
    api_key: Optional[str] = None
    last_ping: Optional[datetime] = None
    is_connected: bool = False
    error_count: int = 0
    last_error: Optional[str] = None
    
    def is_healthy(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–¥–æ—Ä–æ–≤—å–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        if not self.is_connected:
            return False
        if self.last_ping and (datetime.now() - self.last_ping) > timedelta(minutes=5):
            return False
        if self.error_count > 5:
            return False
        return True


@dataclass 
class MCPFunctionResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è MCP —Ñ—É–Ω–∫—Ü–∏–∏"""
    success: bool
    data: Optional[Dict[str, Any]] = None
    error: Optional[str] = None
    execution_time: float = 0.0
    server: Optional[str] = None
    function_name: Optional[str] = None


class MCPManager:
    """
    –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è MCP —Å–µ—Ä–≤–µ—Ä–∞–º–∏
    
    –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç:
    - –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MCP —Å–µ—Ä–≤–µ—Ä–∞–º
    - –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π
    - –ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    """
    
    def __init__(self, config: Dict[str, Any]):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MCP Manager
        
        Args:
            config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è MCP –∏–∑ mcp_config.json
        """
        self.config = config
        self.connections: Dict[str, MCPServerConnection] = {}
        self.http_client = httpx.AsyncClient(timeout=30.0)
        self.cache: Dict[str, Tuple[Any, datetime]] = {}
        self.cache_ttl = timedelta(minutes=5)
        self.metrics = defaultdict(lambda: {
            "total_calls": 0,
            "successful_calls": 0,
            "failed_calls": 0,
            "total_time": 0.0,
            "last_call": None
        })
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
        self._initialize_connections()
        
        logger.info(f"üîå MCP Manager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å {len(self.connections)} —Å–µ—Ä–≤–µ—Ä–∞–º–∏")
    
    def _initialize_connections(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MCP —Å–µ—Ä–≤–µ—Ä–∞–º"""
        servers = self.config.get("servers", {})
        
        for server_name, server_config in servers.items():
            if not server_config.get("enabled", False):
                continue
            
            # –ü–æ–ª—É—á–∞–µ–º URL —Å–µ—Ä–≤–µ—Ä–∞ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
            if server_name == "supabase":
                # –î–ª—è Supabase –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ MCP
                connection = MCPServerConnection(
                    server_name="supabase",
                    url="mcp://supabase",  # MCP –ø—Ä–æ—Ç–æ–∫–æ–ª
                    api_key=None  # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —á–µ—Ä–µ–∑ MCP
                )
            elif server_name == "digitalocean":
                # –î–ª—è DigitalOcean –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
                connection = MCPServerConnection(
                    server_name="digitalocean", 
                    url="mcp://digitalocean",
                    api_key=None
                )
            elif server_name == "context7":
                # –î–ª—è Context7 –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
                connection = MCPServerConnection(
                    server_name="context7",
                    url="mcp://context7",
                    api_key=None
                )
            else:
                logger.warning(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π MCP —Å–µ—Ä–≤–µ—Ä: {server_name}")
                continue
            
            self.connections[server_name] = connection
            logger.info(f"üì° –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ {server_name}")
    
    async def connect_all(self):
        """–ü–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫–æ –≤—Å–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º —Å–µ—Ä–≤–µ—Ä–∞–º"""
        tasks = []
        for server_name, connection in self.connections.items():
            tasks.append(self._connect_to_server(connection))
        
        results = await asyncio.gather(*tasks, return_exceptions=True)
        
        connected = sum(1 for r in results if r is True)
        logger.info(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ {connected}/{len(self.connections)} MCP —Å–µ—Ä–≤–µ—Ä–æ–≤")
    
    async def _connect_to_server(self, connection: MCPServerConnection) -> bool:
        """
        –ü–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É MCP —Å–µ—Ä–≤–µ—Ä—É
        
        Args:
            connection: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
            
        Returns:
            bool: True –µ—Å–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            logger.info(f"üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ {connection.server_name}...")
            
            # –î–ª—è MCP –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —á–µ—Ä–µ–∑ Claude/—Å–∏—Å—Ç–µ–º—É
            if connection.url.startswith("mcp://"):
                # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ MCP —Å–µ—Ä–≤–µ—Ä–∞
                connection.is_connected = True
                connection.last_ping = datetime.now()
                connection.error_count = 0
                logger.info(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ {connection.server_name}")
                return True
            
            # –î–ª—è HTTP —Å–µ—Ä–≤–µ—Ä–æ–≤ –¥–µ–ª–∞–µ–º health check
            else:
                response = await self.http_client.get(
                    f"{connection.url}/health",
                    headers={"Authorization": f"Bearer {connection.api_key}"} if connection.api_key else {}
                )
                
                if response.status_code == 200:
                    connection.is_connected = True
                    connection.last_ping = datetime.now()
                    connection.error_count = 0
                    logger.info(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ {connection.server_name}")
                    return True
                else:
                    raise Exception(f"HTTP {response.status_code}")
                    
        except Exception as e:
            connection.is_connected = False
            connection.error_count += 1
            connection.last_error = str(e)
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ {connection.server_name}: {e}")
            return False
    
    async def execute_function(
        self, 
        function_name: str, 
        parameters: Dict[str, Any],
        user_id: Optional[str] = None
    ) -> MCPFunctionResult:
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç MCP —Ñ—É–Ω–∫—Ü–∏—é
        
        Args:
            function_name: –ò–º—è —Ñ—É–Ω–∫—Ü–∏–∏
            parameters: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ—É–Ω–∫—Ü–∏–∏
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            
        Returns:
            MCPFunctionResult: –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        """
        start_time = datetime.now()
        
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–µ—Ä–≤–µ—Ä –ø–æ –∏–º–µ–Ω–∏ —Ñ—É–Ω–∫—Ü–∏–∏
            server_name = self._get_server_for_function(function_name)
            if not server_name:
                return MCPFunctionResult(
                    success=False,
                    error=f"–°–µ—Ä–≤–µ—Ä –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ {function_name} –Ω–µ –Ω–∞–π–¥–µ–Ω",
                    function_name=function_name
                )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            connection = self.connections.get(server_name)
            if not connection or not connection.is_healthy():
                # –ü—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
                await self._connect_to_server(connection)
                if not connection.is_connected:
                    return MCPFunctionResult(
                        success=False,
                        error=f"–°–µ—Ä–≤–µ—Ä {server_name} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω",
                        server=server_name,
                        function_name=function_name
                    )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
            cache_key = f"{function_name}:{json.dumps(parameters, sort_keys=True)}"
            if cache_key in self.cache:
                cached_data, cache_time = self.cache[cache_key]
                if datetime.now() - cache_time < self.cache_ttl:
                    logger.info(f"üì¶ –ò—Å–ø–æ–ª—å–∑—É—é –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è {function_name}")
                    return MCPFunctionResult(
                        success=True,
                        data=cached_data,
                        execution_time=0.0,
                        server=server_name,
                        function_name=function_name
                    )
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é
            logger.info(f"üîß –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ {function_name} –Ω–∞ {server_name}")
            result = await self._execute_on_server(server_name, function_name, parameters)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
            execution_time = (datetime.now() - start_time).total_seconds()
            self._update_metrics(server_name, function_name, result.success, execution_time)
            
            # –ö–µ—à–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if result.success and result.data:
                self.cache[cache_key] = (result.data, datetime.now())
            
            result.execution_time = execution_time
            result.server = server_name
            result.function_name = function_name
            
            return result
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è {function_name}: {e}")
            execution_time = (datetime.now() - start_time).total_seconds()
            
            return MCPFunctionResult(
                success=False,
                error=str(e),
                execution_time=execution_time,
                function_name=function_name
            )
    
    def _get_server_for_function(self, function_name: str) -> Optional[str]:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å–µ—Ä–≤–µ—Ä –ø–æ –∏–º–µ–Ω–∏ —Ñ—É–Ω–∫—Ü–∏–∏"""
        if function_name.startswith("supabase_"):
            return "supabase"
        elif function_name.startswith("digitalocean_"):
            return "digitalocean"
        elif function_name.startswith("context7_"):
            return "context7"
        return None
    
    async def _execute_on_server(
        self, 
        server_name: str, 
        function_name: str, 
        parameters: Dict[str, Any]
    ) -> MCPFunctionResult:
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º —Å–µ—Ä–≤–µ—Ä–µ
        
        –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –≤—ã–∑–æ–≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö MCP tools
        """
        # –≠—Ç–æ –∑–∞–≥–ª—É—à–∫–∞ - –≤ —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—É–¥—É—Ç –≤—ã–∑–æ–≤—ã MCP
        
        if server_name == "supabase":
            return await self._execute_supabase_function(function_name, parameters)
        elif server_name == "digitalocean":
            return await self._execute_digitalocean_function(function_name, parameters)
        elif server_name == "context7":
            return await self._execute_context7_function(function_name, parameters)
        else:
            return MCPFunctionResult(
                success=False,
                error=f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–µ—Ä–≤–µ—Ä: {server_name}"
            )
    
    async def _execute_supabase_function(
        self, 
        function_name: str, 
        parameters: Dict[str, Any]
    ) -> MCPFunctionResult:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ Supabase"""
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—É–¥—É—Ç –≤—ã–∑–æ–≤—ã mcp__supabase__* —Ñ—É–Ω–∫—Ü–∏–π
        
        # –ü—Ä–∏–º–µ—Ä –∑–∞–≥–ª—É—à–∫–∏
        if function_name == "supabase_list_projects":
            return MCPFunctionResult(
                success=True,
                data={
                    "projects": [
                        {"id": "proj_123", "name": "My Project", "status": "active"},
                        {"id": "proj_456", "name": "Test Project", "status": "paused"}
                    ]
                }
            )
        elif function_name == "supabase_execute_sql":
            return MCPFunctionResult(
                success=True,
                data={
                    "rows": [
                        {"id": 1, "name": "Test", "created_at": "2024-01-15"},
                        {"id": 2, "name": "Demo", "created_at": "2024-01-16"}
                    ],
                    "affected_rows": 2
                }
            )
        else:
            return MCPFunctionResult(
                success=False,
                error=f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è Supabase —Ñ—É–Ω–∫—Ü–∏—è: {function_name}"
            )
    
    async def _execute_digitalocean_function(
        self, 
        function_name: str, 
        parameters: Dict[str, Any]
    ) -> MCPFunctionResult:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ DigitalOcean"""
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—É–¥—É—Ç –≤—ã–∑–æ–≤—ã mcp__digitalocean__* —Ñ—É–Ω–∫—Ü–∏–π
        
        if function_name == "digitalocean_list_apps":
            return MCPFunctionResult(
                success=True,
                data={
                    "apps": [
                        {"id": "app_123", "name": "web-app", "status": "active"},
                        {"id": "app_456", "name": "api-server", "status": "deploying"}
                    ]
                }
            )
        else:
            return MCPFunctionResult(
                success=False,
                error=f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è DigitalOcean —Ñ—É–Ω–∫—Ü–∏—è: {function_name}"
            )
    
    async def _execute_context7_function(
        self, 
        function_name: str, 
        parameters: Dict[str, Any]
    ) -> MCPFunctionResult:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ Context7"""
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—É–¥—É—Ç –≤—ã–∑–æ–≤—ã mcp__context7__* —Ñ—É–Ω–∫—Ü–∏–π
        
        if function_name == "context7_search_docs":
            return MCPFunctionResult(
                success=True,
                data={
                    "results": [
                        {
                            "title": "React Hooks Documentation",
                            "url": "https://react.dev/hooks",
                            "snippet": "Hooks let you use state and other React features..."
                        }
                    ]
                }
            )
        else:
            return MCPFunctionResult(
                success=False,
                error=f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è Context7 —Ñ—É–Ω–∫—Ü–∏—è: {function_name}"
            )
    
    def _update_metrics(
        self, 
        server_name: str, 
        function_name: str, 
        success: bool, 
        execution_time: float
    ):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
        key = f"{server_name}:{function_name}"
        metrics = self.metrics[key]
        
        metrics["total_calls"] += 1
        if success:
            metrics["successful_calls"] += 1
        else:
            metrics["failed_calls"] += 1
        metrics["total_time"] += execution_time
        metrics["last_call"] = datetime.now()
    
    async def ping_all_servers(self) -> Dict[str, bool]:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤—Å–µ—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤
        
        Returns:
            Dict[str, bool]: –°—Ç–∞—Ç—É—Å –∫–∞–∂–¥–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
        """
        results = {}
        
        for server_name, connection in self.connections.items():
            try:
                if connection.is_connected:
                    # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è MCP —Å–µ—Ä–≤–µ—Ä–æ–≤
                    connection.last_ping = datetime.now()
                    results[server_name] = True
                else:
                    # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
                    success = await self._connect_to_server(connection)
                    results[server_name] = success
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ ping {server_name}: {e}")
                results[server_name] = False
        
        return results
    
    def get_server_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤"""
        status = {}
        
        for server_name, connection in self.connections.items():
            status[server_name] = {
                "connected": connection.is_connected,
                "healthy": connection.is_healthy(),
                "last_ping": connection.last_ping.isoformat() if connection.last_ping else None,
                "error_count": connection.error_count,
                "last_error": connection.last_error
            }
        
        return status
    
    def get_metrics(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
        metrics_summary = {
            "servers": {},
            "total_calls": 0,
            "total_successful": 0,
            "total_failed": 0,
            "average_execution_time": 0.0
        }
        
        total_time = 0.0
        
        for key, metrics in self.metrics.items():
            server_name, function_name = key.split(":", 1)
            
            if server_name not in metrics_summary["servers"]:
                metrics_summary["servers"][server_name] = {
                    "functions": {},
                    "total_calls": 0,
                    "successful_calls": 0,
                    "failed_calls": 0
                }
            
            metrics_summary["servers"][server_name]["functions"][function_name] = metrics
            metrics_summary["servers"][server_name]["total_calls"] += metrics["total_calls"]
            metrics_summary["servers"][server_name]["successful_calls"] += metrics["successful_calls"]
            metrics_summary["servers"][server_name]["failed_calls"] += metrics["failed_calls"]
            
            metrics_summary["total_calls"] += metrics["total_calls"]
            metrics_summary["total_successful"] += metrics["successful_calls"]
            metrics_summary["total_failed"] += metrics["failed_calls"]
            total_time += metrics["total_time"]
        
        if metrics_summary["total_calls"] > 0:
            metrics_summary["average_execution_time"] = total_time / metrics_summary["total_calls"]
        
        return metrics_summary
    
    def clear_cache(self):
        """–û—á–∏—â–∞–µ—Ç –∫–µ—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        old_size = len(self.cache)
        self.cache.clear()
        logger.info(f"üßπ –ö–µ—à –æ—á–∏—â–µ–Ω. –£–¥–∞–ª–µ–Ω–æ {old_size} –∑–∞–ø–∏—Å–µ–π")
    
    async def close(self):
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç –≤—Å–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        await self.http_client.aclose()
        for connection in self.connections.values():
            connection.is_connected = False
        logger.info("üîå MCP Manager –∑–∞–∫—Ä—ã—Ç")