"""
–£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–≥–µ–Ω—Ç

–ì–ª–∞–≤–Ω—ã–π –∞–≥–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ü–µ–ø–æ—á–∫—É –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏
–¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —Ä–∞–∑–Ω—ã–º–∏ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –∞–≥–µ–Ω—Ç–∞–º–∏
"""

import logging
from typing import Optional, List

from .base_agent import ChainedAgent, IAgent
from .agent_adapters import (
    IntelligentAgentAdapter,
    DefaultAgentAdapter
)
from .interfaces import Message, Response

logger = logging.getLogger(__name__)


class UnifiedAgent:
    """
    –ì–ª–∞–≤–Ω—ã–π –∞–≥–µ–Ω—Ç —Å–∏—Å—Ç–µ–º—ã
    
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω Chain of Responsibility –¥–ª—è –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∞–≥–µ–Ω—Ç–∞–º
    """
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π —Ü–µ–ø–æ—á–∫–∏ –∞–≥–µ–Ω—Ç–æ–≤"""
        self._setup_agent_chain()
        
    def _setup_agent_chain(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Ü–µ–ø–æ—á–∫—É –∞–≥–µ–Ω—Ç–æ–≤"""
        agents: List[IAgent] = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∞–≥–µ–Ω—Ç–æ–≤ –≤ –ø–æ—Ä—è–¥–∫–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
        try:
            # 1. Intelligent Agent —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ –±–æ—Ç–∞ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç 90)
            agents.append(IntelligentAgentAdapter())
            logger.info("‚úÖ IntelligentAgent –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ü–µ–ø–æ—á–∫—É")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è IntelligentAgent –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
            
        try:
            # 2. Default Agent (ArtemAgent) –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö + Business (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç 10)
            agents.append(DefaultAgentAdapter())
            logger.info("‚úÖ DefaultAgent –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ü–µ–ø–æ—á–∫—É")
        except Exception as e:
            logger.error(f"‚ùå DefaultAgent –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
            
        # –°–æ–∑–¥–∞–µ–º —Ü–µ–ø–æ—á–∫—É
        self.chain = ChainedAgent(agents)
        logger.info(f"üîó –¶–µ–ø–æ—á–∫–∞ –∞–≥–µ–Ω—Ç–æ–≤ —Å–æ–∑–¥–∞–Ω–∞ —Å {len(agents)} –∞–≥–µ–Ω—Ç–∞–º–∏")
        
    async def process_message(self, message: Message) -> Response:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        
        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            
        Returns:
            Response —Å –æ—Ç–≤–µ—Ç–æ–º –æ—Ç –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –∞–≥–µ–Ω—Ç–∞
        """
        logger.info(f"üì® UnifiedAgent –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {message.user.id} (role: {message.user.role.value})")
        
        try:
            # –î–µ–ª–µ–≥–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Ü–µ–ø–æ—á–∫–µ
            response = await self.chain.process_message(message)
            
            # –õ–æ–≥–∏—Ä—É–µ–º, –∫–∞–∫–æ–π –∞–≥–µ–Ω—Ç –æ–±—Ä–∞–±–æ—Ç–∞–ª
            if "agent" in response.metadata:
                logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∞–≥–µ–Ω—Ç–æ–º: {response.metadata['agent']}")
            
            return response
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}", exc_info=True)
            return Response(
                text="–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.",
                metadata={"error": str(e)}
            )
            
    async def clear_user_memory(self, user_id: int) -> bool:
        """
        –û—á–∏—â–∞–µ—Ç –ø–∞–º—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–æ –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–∞—Ö
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ
        """
        logger.info(f"üßπ –û—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        return await self.chain.clear_user_memory(user_id)
        
    def get_status(self) -> dict:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º —Å–∏—Å—Ç–µ–º—ã
        """
        return self.chain.get_status()
        
    async def get_agent_for_message(self, message: Message) -> Optional[str]:
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –∫–∞–∫–æ–π –∞–≥–µ–Ω—Ç –±—É–¥–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
        
        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            
        Returns:
            –ò–º—è –∞–≥–µ–Ω—Ç–∞ –∏–ª–∏ None
        """
        for agent in self.chain.agents:
            if await agent.can_handle(message):
                return agent.get_name()
        return None


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
unified_agent = UnifiedAgent()