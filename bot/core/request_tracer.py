"""
–°–∏—Å—Ç–µ–º–∞ —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ —á–µ—Ä–µ–∑ –≤—Å—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É –±–æ—Ç–∞

–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Å–∫–≤–æ–∑–Ω—É—é —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫—É –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç webhook –¥–æ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é,
–≤–∫–ª—é—á–∞—è –≤—Å–µ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã (–∞–≥–µ–Ω—Ç—ã, —Å–µ—Ä–≤–∏—Å—ã, –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã).
"""

import time
import uuid
import asyncio
from typing import Dict, Any, Optional, List, Set
from dataclasses import dataclass, field
from datetime import datetime, timedelta
from enum import Enum
from contextlib import asynccontextmanager

try:
    from .logging_utils import (
        get_structured_logger, ComponentType, TraceContext,
        log_operation_start, log_operation_success, log_operation_error
    )
    STRUCTURED_LOGGING = True
except ImportError:
    STRUCTURED_LOGGING = False


class TraceStatus(str, Enum):
    """–°—Ç–∞—Ç—É—Å—ã —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞"""
    STARTED = "started"
    IN_PROGRESS = "in_progress"
    COMPLETED = "completed"
    FAILED = "failed"
    TIMEOUT = "timeout"


class ComponentStep(str, Enum):
    """–≠—Ç–∞–ø—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö"""
    WEBHOOK_RECEIVED = "webhook_received"
    MESSAGE_PARSED = "message_parsed"
    AGENT_ROUTING = "agent_routing"
    AGENT_PROCESSING = "agent_processing"
    TOOL_EXECUTION = "tool_execution"
    RESPONSE_GENERATION = "response_generation"
    RESPONSE_SENT = "response_sent"
    ERROR_HANDLING = "error_handling"


@dataclass
class TraceEvent:
    """–°–æ–±—ã—Ç–∏–µ –≤ —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞"""
    timestamp: datetime
    component: ComponentType
    step: ComponentStep
    details: Dict[str, Any] = field(default_factory=dict)
    duration_ms: Optional[float] = None
    success: bool = True
    error: Optional[str] = None


@dataclass
class RequestTrace:
    """–ü–æ–ª–Ω–∞—è —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞"""
    trace_id: str
    user_id: str
    session_id: Optional[str]
    start_time: datetime
    end_time: Optional[datetime] = None
    status: TraceStatus = TraceStatus.STARTED
    events: List[TraceEvent] = field(default_factory=list)
    metadata: Dict[str, Any] = field(default_factory=dict)
    
    @property
    def duration_ms(self) -> Optional[float]:
        """–û–±—â–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–∞ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö"""
        if self.end_time:
            return (self.end_time - self.start_time).total_seconds() * 1000
        return None
    
    @property
    def component_durations(self) -> Dict[str, float]:
        """–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º"""
        durations = {}
        for event in self.events:
            if event.duration_ms:
                component = event.component.value
                durations[component] = durations.get(component, 0) + event.duration_ms
        return durations


class RequestTracer:
    """
    –°–∏—Å—Ç–µ–º–∞ —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
    
    –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –∂–∏–∑–Ω–µ–Ω–Ω—ã–π —Ü–∏–∫–ª –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç webhook –¥–æ –æ—Ç–≤–µ—Ç–∞,
    —Å–æ–±–∏—Ä–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É.
    """
    
    def __init__(self, max_traces: int = 1000, trace_ttl_hours: int = 24):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤—â–∏–∫–∞
        
        Args:
            max_traces: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ö—Ä–∞–Ω–∏–º—ã—Ö —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–æ–∫
            trace_ttl_hours: –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏ –≤ —á–∞—Å–∞—Ö
        """
        self.max_traces = max_traces
        self.trace_ttl = timedelta(hours=trace_ttl_hours)
        self.active_traces: Dict[str, RequestTrace] = {}
        self.completed_traces: Dict[str, RequestTrace] = {}
        
        # –ú–µ—Ç—Ä–∏–∫–∏
        self.total_requests = 0
        self.successful_requests = 0
        self.failed_requests = 0
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        if STRUCTURED_LOGGING:
            self.logger = get_structured_logger("request_tracer", ComponentType.SERVICE)
        else:
            import logging
            self.logger = None
            self.fallback_logger = logging.getLogger(__name__)
    
    def create_trace(
        self, 
        user_id: str, 
        session_id: Optional[str] = None,
        metadata: Optional[Dict[str, Any]] = None
    ) -> str:
        """
        –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫—É –∑–∞–ø—Ä–æ—Å–∞
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            session_id: ID —Å–µ—Å—Å–∏–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            metadata: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            
        Returns:
            trace_id: –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏
        """
        trace_id = str(uuid.uuid4())[:8]
        
        trace = RequestTrace(
            trace_id=trace_id,
            user_id=user_id,
            session_id=session_id,
            start_time=datetime.utcnow(),
            metadata=metadata or {}
        )
        
        self.active_traces[trace_id] = trace
        self.total_requests += 1
        
        # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–æ–∫
        self._cleanup_old_traces()
        
        if self.logger:
            self.logger.info(
                f"üöÄ –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞",
                trace_id=trace_id,
                operation="trace_created",
                metadata={
                    "user_id": user_id,
                    "session_id": session_id,
                    "total_active_traces": len(self.active_traces)
                }
            )
        else:
            self.fallback_logger.info(f"üöÄ [TRACE:{trace_id}] –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        return trace_id
    
    def add_event(
        self,
        trace_id: str,
        component: ComponentType,
        step: ComponentStep,
        details: Optional[Dict[str, Any]] = None,
        duration_ms: Optional[float] = None,
        success: bool = True,
        error: Optional[str] = None
    ):
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–±—ã—Ç–∏–µ –≤ —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫—É
        
        Args:
            trace_id: ID —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏
            component: –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Å–∏—Å—Ç–µ–º—ã
            step: –≠—Ç–∞–ø –æ–±—Ä–∞–±–æ—Ç–∫–∏
            details: –î–µ—Ç–∞–ª–∏ —Å–æ–±—ã—Ç–∏—è
            duration_ms: –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
            success: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏
            error: –û–ø–∏—Å–∞–Ω–∏–µ –æ—à–∏–±–∫–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        """
        if trace_id not in self.active_traces:
            return  # –¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
        
        event = TraceEvent(
            timestamp=datetime.utcnow(),
            component=component,
            step=step,
            details=details or {},
            duration_ms=duration_ms,
            success=success,
            error=error
        )
        
        self.active_traces[trace_id].events.append(event)
        
        if self.logger:
            self.logger.info(
                f"üìù –°–æ–±—ã—Ç–∏–µ —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏: {step.value}",
                trace_id=trace_id,
                operation="trace_event",
                metadata={
                    "component": component.value,
                    "step": step.value,
                    "success": success,
                    "duration_ms": duration_ms,
                    "error": error,
                    "details": details or {}
                }
            )
        else:
            status_icon = "‚úÖ" if success else "‚ùå"
            self.fallback_logger.info(
                f"{status_icon} [TRACE:{trace_id}] {component.value} -> {step.value}"
                + (f" ({duration_ms:.1f}ms)" if duration_ms else "")
                + (f" ERROR: {error}" if error else "")
            )
    
    def complete_trace(
        self, 
        trace_id: str, 
        status: TraceStatus = TraceStatus.COMPLETED,
        final_metadata: Optional[Dict[str, Any]] = None
    ):
        """
        –ó–∞–≤–µ—Ä—à–∞–µ—Ç —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫—É –∑–∞–ø—Ä–æ—Å–∞
        
        Args:
            trace_id: ID —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏
            status: –§–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
            final_metadata: –§–∏–Ω–∞–ª—å–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        """
        if trace_id not in self.active_traces:
            return
        
        trace = self.active_traces[trace_id]
        trace.end_time = datetime.utcnow()
        trace.status = status
        
        if final_metadata:
            trace.metadata.update(final_metadata)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        if status == TraceStatus.COMPLETED:
            self.successful_requests += 1
        else:
            self.failed_requests += 1
        
        # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –≤ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ
        self.completed_traces[trace_id] = trace
        del self.active_traces[trace_id]
        
        if self.logger:
            self.logger.info(
                f"üèÅ –¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞",
                trace_id=trace_id,
                operation="trace_completed",
                metadata={
                    "status": status.value,
                    "duration_ms": trace.duration_ms,
                    "events_count": len(trace.events),
                    "user_id": trace.user_id,
                    "component_durations": trace.component_durations
                }
            )
        else:
            duration_str = f" –∑–∞ {trace.duration_ms:.1f}ms" if trace.duration_ms else ""
            self.fallback_logger.info(
                f"üèÅ [TRACE:{trace_id}] –¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {status.value}{duration_str}"
            )
    
    def get_trace(self, trace_id: str) -> Optional[RequestTrace]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫—É –ø–æ ID"""
        return (self.active_traces.get(trace_id) or 
                self.completed_traces.get(trace_id))
    
    def get_active_traces(self) -> List[RequestTrace]:
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏"""
        return list(self.active_traces.values())
    
    def get_user_traces(self, user_id: str, limit: int = 10) -> List[RequestTrace]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_traces = []
        
        # –ê–∫—Ç–∏–≤–Ω—ã–µ —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏
        for trace in self.active_traces.values():
            if trace.user_id == user_id:
                user_traces.append(trace)
        
        # –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏
        for trace in self.completed_traces.values():
            if trace.user_id == user_id:
                user_traces.append(trace)
        
        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è (–Ω–æ–≤—ã–µ –ø–µ—Ä–≤—ã–º–∏)
        user_traces.sort(key=lambda t: t.start_time, reverse=True)
        
        return user_traces[:limit]
    
    def get_performance_metrics(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        active_count = len(self.active_traces)
        completed_count = len(self.completed_traces)
        
        # –°—Ä–µ–¥–Ω—è—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        completed_traces = list(self.completed_traces.values())
        avg_duration = 0
        if completed_traces:
            durations = [t.duration_ms for t in completed_traces if t.duration_ms]
            avg_duration = sum(durations) / len(durations) if durations else 0
        
        # –ú–µ—Ç—Ä–∏–∫–∏ –ø–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º
        component_stats = {}
        for trace in completed_traces:
            for component, duration in trace.component_durations.items():
                if component not in component_stats:
                    component_stats[component] = {"total_ms": 0, "count": 0}
                component_stats[component]["total_ms"] += duration
                component_stats[component]["count"] += 1
        
        # –°—Ä–µ–¥–Ω—è—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º
        for component, stats in component_stats.items():
            stats["avg_ms"] = stats["total_ms"] / stats["count"]
        
        return {
            "total_requests": self.total_requests,
            "successful_requests": self.successful_requests,
            "failed_requests": self.failed_requests,
            "success_rate": self.successful_requests / self.total_requests if self.total_requests > 0 else 0,
            "active_traces": active_count,
            "completed_traces": completed_count,
            "avg_duration_ms": avg_duration,
            "component_performance": component_stats
        }
    
    def _cleanup_old_traces(self):
        """–û—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏"""
        now = datetime.utcnow()
        
        # –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–æ–∫ —Å—Ç–∞—Ä—à–µ TTL
        to_remove = []
        for trace_id, trace in self.completed_traces.items():
            if trace.end_time and (now - trace.end_time) > self.trace_ttl:
                to_remove.append(trace_id)
        
        for trace_id in to_remove:
            del self.completed_traces[trace_id]
        
        # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–æ–∫
        if len(self.completed_traces) > self.max_traces:
            # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å–∞–º—ã–µ –Ω–æ–≤—ã–µ
            sorted_traces = sorted(
                self.completed_traces.items(),
                key=lambda x: x[1].end_time or x[1].start_time,
                reverse=True
            )
            
            self.completed_traces = dict(sorted_traces[:self.max_traces])
    
    @asynccontextmanager
    async def trace_operation(
        self,
        trace_id: str,
        component: ComponentType,
        step: ComponentStep,
        details: Optional[Dict[str, Any]] = None
    ):
        """
        –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏ –æ–ø–µ—Ä–∞—Ü–∏–π
        
        –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑–º–µ—Ä—è–µ—Ç –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏ –ª–æ–≥–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        """
        start_time = time.time()
        
        try:
            yield
            # –£—Å–ø–µ—à–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
            duration_ms = (time.time() - start_time) * 1000
            self.add_event(
                trace_id, component, step, details, duration_ms, True
            )
        except Exception as e:
            # –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            duration_ms = (time.time() - start_time) * 1000
            self.add_event(
                trace_id, component, step, details, duration_ms, False, str(e)
            )
            raise


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤—â–∏–∫–∞
request_tracer = RequestTracer()