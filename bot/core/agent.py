"""
–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –≥–ª–∞–≤–Ω—ã–π –∞–≥–µ–Ω—Ç –±–æ—Ç–∞

–ö–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
"""

import logging
from typing import Optional, Dict, Any, List

from .interfaces import (
    Message, Response, User, MessageType, 
    IMemoryManager, IResponseGenerator, IIntentDetector
)
from .config import config
from .decorators import measure_time, handle_errors
from ..services.memory_manager import ZepMemoryManager, InMemoryManager
from ..services.response_generator import HybridResponseGenerator, SimpleResponseGenerator
from ..services.intent_detector import IntentDetector


logger = logging.getLogger(__name__)


class ArtemAgent:
    """–ì–ª–∞–≤–Ω—ã–π –∞–≥–µ–Ω—Ç –±–æ—Ç–∞ –ê—Ä—Ç—ë–º"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–∞"""
        logger.info("ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Artem Agent...")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –ø–∞–º—è—Ç–∏
        if config.zep.enabled:
            self.memory_manager = ZepMemoryManager()
        else:
            logger.warning("‚ö†Ô∏è Zep –æ—Ç–∫–ª—é—á–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º InMemory —Ö—Ä–∞–Ω–∏–ª–∏—â–µ")
            self.memory_manager = InMemoryManager()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –æ—Ç–≤–µ—Ç–æ–≤
        if config.openai.enabled or config.anthropic.enabled:
            self.response_generator = HybridResponseGenerator()
        else:
            logger.warning("‚ö†Ô∏è AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä")
            self.response_generator = SimpleResponseGenerator()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–µ—Ç–µ–∫—Ç–æ—Ä –Ω–∞–º–µ—Ä–µ–Ω–∏–π
        self.intent_detector = IntentDetector()
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
        self.instructions = self._load_instructions()
        
        logger.info("‚úÖ Artem Agent –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    @measure_time
    async def process_message(self, message: Message) -> Response:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        
        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            
        Returns:
            Response: –û—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
        """
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–º–µ—Ä–µ–Ω–∏–µ
            intent = await self.intent_detector.detect(message)
            logger.debug(f"üéØ –ù–∞–º–µ—Ä–µ–Ω–∏–µ: {intent['type']} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {intent['confidence']})")
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
            context = await self.memory_manager.get_context(message.user.id)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            response = await self.response_generator.generate(message, context)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–∞–º—è—Ç—å
            await self.memory_manager.add_message(
                user_id=message.user.id,
                message=message,
                response=response
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –æ–± –æ–±—Ä–∞–±–æ—Ç–∫–µ
            response.metadata = response.metadata or {}
            response.metadata.update({
                "intent": intent,
                "context_size": len(context)
            })
            
            return response
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}", exc_info=True)
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ
            return Response(
                text="–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.",
                metadata={"error": str(e)}
            )
    
    async def clear_user_memory(self, user_id: int) -> bool:
        """
        –û—á–∏—â–∞–µ—Ç –ø–∞–º—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            bool: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏
        """
        try:
            await self.memory_manager.clear_memory(user_id)
            logger.info(f"‚úÖ –ü–∞–º—è—Ç—å –æ—á–∏—â–µ–Ω–∞ –¥–ª—è user {user_id}")
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ø–∞–º—è—Ç–∏: {e}")
            return False
    
    async def search_user_memory(self, user_id: int, query: str) -> List[Dict[str, Any]]:
        """
        –ü–æ–∏—Å–∫ –≤ –ø–∞–º—è—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            query: –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
            
        Returns:
            List[Dict[str, Any]]: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
        """
        try:
            results = await self.memory_manager.search_memory(user_id, query)
            logger.debug(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è '{query}'")
            return results
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ –ø–∞–º—è—Ç–∏: {e}")
            return []
    
    async def get_agent_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –∞–≥–µ–Ω—Ç–∞ –∏ –µ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
        status = {
            "agent": "online",
            "memory_manager": type(self.memory_manager).__name__,
            "response_generator": type(self.response_generator).__name__,
            "intent_detector": type(self.intent_detector).__name__,
            "services": {
                "openai": config.openai.enabled,
                "anthropic": config.anthropic.enabled,
                "zep": config.zep.enabled
            }
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
        try:
            status["generator_available"] = await self.response_generator.is_available()
        except:
            status["generator_available"] = False
        
        return status
    
    def _load_instructions(self) -> Dict[str, Any]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∞–≥–µ–Ω—Ç–∞"""
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –∞–≥–µ–Ω—Ç–∞
        return {
            "version": "2.0",
            "updated": "2024-01-20"
        }


class AgentFactory:
    """–§–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–≥–µ–Ω—Ç–æ–≤"""
    
    _instance: Optional[ArtemAgent] = None
    
    @classmethod
    def get_agent(cls) -> ArtemAgent:
        """–ü–æ–ª—É—á–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä –∞–≥–µ–Ω—Ç–∞ (—Å–∏–Ω–≥–ª—Ç–æ–Ω)"""
        if cls._instance is None:
            cls._instance = ArtemAgent()
        return cls._instance
    
    @classmethod
    def reset_agent(cls) -> None:
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä –∞–≥–µ–Ω—Ç–∞"""
        cls._instance = None