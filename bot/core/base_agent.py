"""
–ë–∞–∑–æ–≤—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤

–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–æ–Ω—Ç—Ä–∞–∫—Ç, –∫–æ—Ç–æ—Ä—ã–π –¥–æ–ª–∂–Ω—ã —Ä–µ–∞–ª–∏–∑–æ–≤—ã–≤–∞—Ç—å –≤—Å–µ –∞–≥–µ–Ω—Ç—ã
"""

from abc import ABC, abstractmethod
from typing import Optional, Dict, Any, List
from .interfaces import Message, Response


class IAgent(ABC):
    """–ë–∞–∑–æ–≤—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤"""
    
    @abstractmethod
    async def process_message(self, message: Message) -> Response:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        
        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            
        Returns:
            Response —Å –æ—Ç–≤–µ—Ç–æ–º –∞–≥–µ–Ω—Ç–∞
        """
        pass
        
    @abstractmethod
    async def can_handle(self, message: Message) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–µ—Ç –ª–∏ –∞–≥–µ–Ω—Ç –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        
        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            
        Returns:
            True –µ—Å–ª–∏ –∞–≥–µ–Ω—Ç –º–æ–∂–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
        """
        pass
        
    @abstractmethod
    def get_name(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–º—è –∞–≥–µ–Ω—Ç–∞"""
        pass
        
    @abstractmethod
    def get_priority(self) -> int:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∞–≥–µ–Ω—Ç–∞ (–±–æ–ª—å—à–µ = –≤—ã—à–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
        
        Returns:
            –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –æ—Ç 0 –¥–æ 100
        """
        pass
        
    async def clear_user_memory(self, user_id: int) -> bool:
        """
        –û—á–∏—â–∞–µ—Ç –ø–∞–º—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ
        """
        return True
        
    def get_status(self) -> Dict[str, Any]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –∞–≥–µ–Ω—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º
        """
        return {
            "name": self.get_name(),
            "priority": self.get_priority(),
            "enabled": True
        }


class ChainedAgent(IAgent):
    """
    –ê–≥–µ–Ω—Ç, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏–π —Ü–µ–ø–æ—á–∫—É –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏
    
    –ü–µ—Ä–µ–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ —Ü–µ–ø–æ—á–∫–µ –∞–≥–µ–Ω—Ç–æ–≤, –ø–æ–∫–∞ –æ–¥–∏–Ω –∏–∑ –Ω–∏—Ö –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç
    """
    
    def __init__(self, agents: List[IAgent]):
        """
        Args:
            agents: –°–ø–∏—Å–æ–∫ –∞–≥–µ–Ω—Ç–æ–≤ –≤ –ø–æ—Ä—è–¥–∫–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
        """
        self.agents = sorted(agents, key=lambda a: a.get_priority(), reverse=True)
        
    async def process_message(self, message: Message) -> Response:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —Ü–µ–ø–æ—á–∫—É –∞–≥–µ–Ω—Ç–æ–≤"""
        import logging
        import uuid
        
        logger = logging.getLogger(__name__)
        trace_id = str(uuid.uuid4())[:8]
        
        logger.info(f"üîó [TRACE:{trace_id}] ChainedAgent –Ω–∞—á–∏–Ω–∞–µ—Ç –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—é —Å–æ–æ–±—â–µ–Ω–∏—è")
        logger.info(f"üë§ [TRACE:{trace_id}] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.user.id} (role: {message.user.role.value})")
        logger.info(f"üìù [TRACE:{trace_id}] –°–æ–æ–±—â–µ–Ω–∏–µ: '{message.text[:100]}{'...' if len(message.text) > 100 else ''}'")
        logger.info(f"üèóÔ∏è [TRACE:{trace_id}] Business —Å–æ–æ–±—â–µ–Ω–∏–µ: {getattr(message, 'is_business_message', False)}")
        logger.info(f"üîó [TRACE:{trace_id}] –î–æ—Å—Ç—É–ø–Ω–æ –∞–≥–µ–Ω—Ç–æ–≤: {len(self.agents)}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–≥–µ–Ω—Ç–æ–≤ –≤ –ø–æ—Ä—è–¥–∫–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
        for i, agent in enumerate(self.agents):
            logger.info(f"   {i+1}. {agent.get_name()} (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {agent.get_priority()})")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
        for i, agent in enumerate(self.agents):
            logger.info(f"üîç [TRACE:{trace_id}] –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≥–µ–Ω—Ç–∞ {i+1}: {agent.get_name()}")
            
            try:
                can_handle = await agent.can_handle(message)
                logger.info(f"üéØ [TRACE:{trace_id}] {agent.get_name()} can_handle = {can_handle}")
                
                if can_handle:
                    logger.info(f"‚úÖ [TRACE:{trace_id}] –ê–≥–µ–Ω—Ç {agent.get_name()} –ø—Ä–∏–Ω—è–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ")
                    logger.info(f"‚ö° [TRACE:{trace_id}] –î–µ–ª–µ–≥–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∞–≥–µ–Ω—Ç—É {agent.get_name()}...")
                    
                    # –ü–µ—Ä–µ–¥–∞–µ–º trace_id –∞–≥–µ–Ω—Ç—É –µ—Å–ª–∏ –æ–Ω –µ–≥–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç
                    response = await agent.process_message(message)
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, –∫–∞–∫–æ–π –∞–≥–µ–Ω—Ç –æ–±—Ä–∞–±–æ—Ç–∞–ª
                    if not response.metadata:
                        response.metadata = {}
                    response.metadata["agent"] = agent.get_name()
                    response.metadata["trace_id"] = trace_id
                    
                    logger.info(f"‚úÖ [TRACE:{trace_id}] –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∞–≥–µ–Ω—Ç–æ–º {agent.get_name()}")
                    logger.info(f"üìä [TRACE:{trace_id}] –†–µ–∑—É–ª—å—Ç–∞—Ç: {len(response.text)} —Å–∏–º–≤–æ–ª–æ–≤")
                    
                    return response
                    
            except Exception as e:
                logger.error(f"‚ùå [TRACE:{trace_id}] –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≥–µ–Ω—Ç–∞ {agent.get_name()}: {e}", exc_info=True)
                continue
                
        # –ï—Å–ª–∏ –Ω–∏–∫—Ç–æ –Ω–µ –º–æ–∂–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç
        logger.warning(f"‚ö†Ô∏è [TRACE:{trace_id}] –ù–∏ –æ–¥–∏–Ω –∞–≥–µ–Ω—Ç –Ω–µ —Å–º–æ–≥ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ")
        logger.warning(f"üö® [TRACE:{trace_id}] –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –æ—à–∏–±–∫—É")
        
        return Response(
            text="–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –º–æ–≥—É –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å.",
            metadata={"error": "No suitable agent found", "trace_id": trace_id}
        )
        
    async def can_handle(self, message: Message) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–µ—Ç –ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∞–≥–µ–Ω—Ç –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        for agent in self.agents:
            if await agent.can_handle(message):
                return True
        return False
        
    def get_name(self) -> str:
        return "ChainedAgent"
        
    def get_priority(self) -> int:
        return 50  # –°—Ä–µ–¥–Ω–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
        
    async def clear_user_memory(self, user_id: int) -> bool:
        """–û—á–∏—â–∞–µ—Ç –ø–∞–º—è—Ç—å –≤–æ –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–∞—Ö"""
        results = []
        for agent in self.agents:
            results.append(await agent.clear_user_memory(user_id))
        return all(results)
        
    def get_status(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤ –≤ —Ü–µ–ø–æ—á–∫–µ"""
        return {
            "name": self.get_name(),
            "agents": [agent.get_status() for agent in self.agents],
            "total_agents": len(self.agents)
        }