"""
–ë–∞–∑–æ–≤—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤

–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–æ–Ω—Ç—Ä–∞–∫—Ç, –∫–æ—Ç–æ—Ä—ã–π –¥–æ–ª–∂–Ω—ã —Ä–µ–∞–ª–∏–∑–æ–≤—ã–≤–∞—Ç—å –≤—Å–µ –∞–≥–µ–Ω—Ç—ã
"""

from abc import ABC, abstractmethod
from typing import Optional, Dict, Any, List
from .interfaces import Message, Response

try:
    from .logging_utils import (
        get_structured_logger, ComponentType, TraceContext,
        log_operation_start, log_operation_success, log_operation_error
    )
    from .request_tracer import request_tracer, ComponentStep
    STRUCTURED_LOGGING = True
except ImportError:
    STRUCTURED_LOGGING = False


class IAgent(ABC):
    """–ë–∞–∑–æ–≤—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤"""
    
    @abstractmethod
    async def process_message(self, message: Message) -> Response:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        
        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            
        Returns:
            Response —Å –æ—Ç–≤–µ—Ç–æ–º –∞–≥–µ–Ω—Ç–∞
        """
        pass
        
    @abstractmethod
    async def can_handle(self, message: Message) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–µ—Ç –ª–∏ –∞–≥–µ–Ω—Ç –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        
        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            
        Returns:
            True –µ—Å–ª–∏ –∞–≥–µ–Ω—Ç –º–æ–∂–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
        """
        pass
        
    @abstractmethod
    def get_name(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–º—è –∞–≥–µ–Ω—Ç–∞"""
        pass
        
    @abstractmethod
    def get_priority(self) -> int:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∞–≥–µ–Ω—Ç–∞ (–±–æ–ª—å—à–µ = –≤—ã—à–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
        
        Returns:
            –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –æ—Ç 0 –¥–æ 100
        """
        pass
        
    async def clear_user_memory(self, user_id: int) -> bool:
        """
        –û—á–∏—â–∞–µ—Ç –ø–∞–º—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ
        """
        return True
        
    def get_status(self) -> Dict[str, Any]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –∞–≥–µ–Ω—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º
        """
        return {
            "name": self.get_name(),
            "priority": self.get_priority(),
            "enabled": True
        }


class ChainedAgent(IAgent):
    """
    –ê–≥–µ–Ω—Ç, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏–π —Ü–µ–ø–æ—á–∫—É –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏
    
    –ü–µ—Ä–µ–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ —Ü–µ–ø–æ—á–∫–µ –∞–≥–µ–Ω—Ç–æ–≤, –ø–æ–∫–∞ –æ–¥–∏–Ω –∏–∑ –Ω–∏—Ö –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç
    """
    
    def __init__(self, agents: List[IAgent]):
        """
        Args:
            agents: –°–ø–∏—Å–æ–∫ –∞–≥–µ–Ω—Ç–æ–≤ –≤ –ø–æ—Ä—è–¥–∫–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
        """
        self.agents = sorted(agents, key=lambda a: a.get_priority(), reverse=True)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        if STRUCTURED_LOGGING:
            self.structured_logger = get_structured_logger("chained_agent", ComponentType.AGENT)
        else:
            self.structured_logger = None
        
    async def process_message(self, message: Message) -> Response:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —Ü–µ–ø–æ—á–∫—É –∞–≥–µ–Ω—Ç–æ–≤"""
        import logging
        import uuid
        
        logger = logging.getLogger(__name__)
        
        # –ü–æ–ª—É—á–∞–µ–º trace_id –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
        trace_id = getattr(message, 'trace_id', str(uuid.uuid4())[:8])
        
        # –î–æ–±–∞–≤–ª—è–µ–º trace_id –∫ —Å–æ–æ–±—â–µ–Ω–∏—é –µ—Å–ª–∏ –µ–≥–æ –Ω–µ –±—ã–ª–æ
        if not hasattr(message, 'trace_id'):
            message.trace_id = trace_id
        
        # –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        if self.structured_logger:
            self.structured_logger.info(
                "üîó ChainedAgent –Ω–∞—á–∏–Ω–∞–µ—Ç –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—é —Å–æ–æ–±—â–µ–Ω–∏—è",
                trace_id=trace_id,
                operation="agent_routing_start",
                metadata={
                    "user_id": message.user.id,
                    "user_role": message.user.role.value,
                    "is_business_message": getattr(message, 'is_business_message', False),
                    "message_length": len(message.text),
                    "available_agents": len(self.agents),
                    "agents_list": [agent.get_name() for agent in self.agents]
                }
            )
        else:
            logger.info(f"üîó [TRACE:{trace_id}] ChainedAgent –Ω–∞—á–∏–Ω–∞–µ—Ç –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—é —Å–æ–æ–±—â–µ–Ω–∏—è")
            logger.info(f"üë§ [TRACE:{trace_id}] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.user.id} (role: {message.user.role.value})")
            logger.info(f"üìù [TRACE:{trace_id}] –°–æ–æ–±—â–µ–Ω–∏–µ: '{message.text[:100]}{'...' if len(message.text) > 100 else ''}'")
            logger.info(f"üèóÔ∏è [TRACE:{trace_id}] Business —Å–æ–æ–±—â–µ–Ω–∏–µ: {getattr(message, 'is_business_message', False)}")
            logger.info(f"üîó [TRACE:{trace_id}] –î–æ—Å—Ç—É–ø–Ω–æ –∞–≥–µ–Ω—Ç–æ–≤: {len(self.agents)}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏
        if STRUCTURED_LOGGING:
            request_tracer.add_event(
                trace_id, 
                ComponentType.AGENT, 
                ComponentStep.AGENT_ROUTING,
                details={
                    "available_agents": len(self.agents),
                    "agent_names": [agent.get_name() for agent in self.agents]
                }
            )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–≥–µ–Ω—Ç–æ–≤ –≤ –ø–æ—Ä—è–¥–∫–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
        if self.structured_logger:
            agents_info = []
            for i, agent in enumerate(self.agents):
                agents_info.append({
                    "position": i + 1,
                    "name": agent.get_name(),
                    "priority": agent.get_priority()
                })
            self.structured_logger.info(
                "üìã –°–ø–∏—Å–æ–∫ –∞–≥–µ–Ω—Ç–æ–≤ –≤ –ø–æ—Ä—è–¥–∫–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞",
                trace_id=trace_id,
                operation="agents_list",
                metadata={"agents": agents_info}
            )
        else:
            for i, agent in enumerate(self.agents):
                logger.info(f"   {i+1}. {agent.get_name()} (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {agent.get_priority()})")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
        for i, agent in enumerate(self.agents):
            agent_name = agent.get_name()
            
            if self.structured_logger:
                self.structured_logger.info(
                    f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≥–µ–Ω—Ç–∞ {i+1}: {agent_name}",
                    trace_id=trace_id,
                    operation="agent_check",
                    metadata={"agent_name": agent_name, "position": i+1}
                )
            else:
                logger.info(f"üîç [TRACE:{trace_id}] –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≥–µ–Ω—Ç–∞ {i+1}: {agent_name}")
            
            try:
                # –¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≥–µ–Ω—Ç–∞
                if STRUCTURED_LOGGING:
                    async with request_tracer.trace_operation(
                        trace_id, ComponentType.AGENT, ComponentStep.AGENT_ROUTING,
                        details={"operation": "can_handle_check", "agent": agent_name}
                    ):
                        can_handle = await agent.can_handle(message)
                else:
                    can_handle = await agent.can_handle(message)
                
                if self.structured_logger:
                    self.structured_logger.info(
                        f"üéØ {agent_name} can_handle = {can_handle}",
                        trace_id=trace_id,
                        operation="can_handle_result",
                        metadata={"agent_name": agent_name, "can_handle": can_handle}
                    )
                else:
                    logger.info(f"üéØ [TRACE:{trace_id}] {agent_name} can_handle = {can_handle}")
                
                if can_handle:
                    if self.structured_logger:
                        self.structured_logger.info(
                            f"‚úÖ –ê–≥–µ–Ω—Ç {agent_name} –ø—Ä–∏–Ω—è–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ",
                            trace_id=trace_id,
                            operation="agent_selected",
                            metadata={"selected_agent": agent_name, "position": i+1}
                        )
                    else:
                        logger.info(f"‚úÖ [TRACE:{trace_id}] –ê–≥–µ–Ω—Ç {agent_name} –ø—Ä–∏–Ω—è–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ")
                        logger.info(f"‚ö° [TRACE:{trace_id}] –î–µ–ª–µ–≥–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∞–≥–µ–Ω—Ç—É {agent_name}...")
                    
                    # –¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
                    if STRUCTURED_LOGGING:
                        async with request_tracer.trace_operation(
                            trace_id, ComponentType.AGENT, ComponentStep.AGENT_PROCESSING,
                            details={"agent": agent_name, "user_id": message.user.id}
                        ):
                            response = await agent.process_message(message)
                    else:
                        response = await agent.process_message(message)
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, –∫–∞–∫–æ–π –∞–≥–µ–Ω—Ç –æ–±—Ä–∞–±–æ—Ç–∞–ª
                    if not response.metadata:
                        response.metadata = {}
                    response.metadata["agent"] = agent_name
                    response.metadata["trace_id"] = trace_id
                    
                    if self.structured_logger:
                        self.structured_logger.info(
                            f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∞–≥–µ–Ω—Ç–æ–º {agent_name}",
                            trace_id=trace_id,
                            operation="agent_processing_success",
                            metadata={
                                "agent_name": agent_name,
                                "response_length": len(response.text),
                                "has_metadata": bool(response.metadata)
                            }
                        )
                    else:
                        logger.info(f"‚úÖ [TRACE:{trace_id}] –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∞–≥–µ–Ω—Ç–æ–º {agent_name}")
                        logger.info(f"üìä [TRACE:{trace_id}] –†–µ–∑—É–ª—å—Ç–∞—Ç: {len(response.text)} —Å–∏–º–≤–æ–ª–æ–≤")
                    
                    return response
                    
            except Exception as e:
                if self.structured_logger:
                    self.structured_logger.error(
                        f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≥–µ–Ω—Ç–∞ {agent_name}: {str(e)}",
                        trace_id=trace_id,
                        operation="agent_check_error",
                        metadata={"agent_name": agent_name, "error": str(e)}
                    )
                else:
                    logger.error(f"‚ùå [TRACE:{trace_id}] –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≥–µ–Ω—Ç–∞ {agent_name}: {e}", exc_info=True)
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –æ—à–∏–±–∫–∏ –≤ —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫—É
                if STRUCTURED_LOGGING:
                    request_tracer.add_event(
                        trace_id, ComponentType.AGENT, ComponentStep.ERROR_HANDLING,
                        details={"agent": agent_name, "error": str(e)},
                        success=False, error=str(e)
                    )
                continue
                
        # –ï—Å–ª–∏ –Ω–∏–∫—Ç–æ –Ω–µ –º–æ–∂–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç
        if self.structured_logger:
            self.structured_logger.warning(
                "‚ö†Ô∏è –ù–∏ –æ–¥–∏–Ω –∞–≥–µ–Ω—Ç –Ω–µ —Å–º–æ–≥ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ",
                trace_id=trace_id,
                operation="no_agent_found",
                metadata={
                    "total_agents_checked": len(self.agents),
                    "user_id": message.user.id,
                    "message_length": len(message.text)
                }
            )
        else:
            logger.warning(f"‚ö†Ô∏è [TRACE:{trace_id}] –ù–∏ –æ–¥–∏–Ω –∞–≥–µ–Ω—Ç –Ω–µ —Å–º–æ–≥ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ")
            logger.warning(f"üö® [TRACE:{trace_id}] –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –æ—à–∏–±–∫—É")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –∞–≥–µ–Ω—Ç–∞
        if STRUCTURED_LOGGING:
            request_tracer.add_event(
                trace_id, ComponentType.AGENT, ComponentStep.ERROR_HANDLING,
                details={"reason": "no_suitable_agent_found", "agents_checked": len(self.agents)},
                success=False, error="No suitable agent found"
            )
        
        return Response(
            text="–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –º–æ–≥—É –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å.",
            metadata={"error": "No suitable agent found", "trace_id": trace_id}
        )
        
    async def can_handle(self, message: Message) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–µ—Ç –ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∞–≥–µ–Ω—Ç –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        for agent in self.agents:
            if await agent.can_handle(message):
                return True
        return False
        
    def get_name(self) -> str:
        return "ChainedAgent"
        
    def get_priority(self) -> int:
        return 50  # –°—Ä–µ–¥–Ω–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
        
    async def clear_user_memory(self, user_id: int) -> bool:
        """–û—á–∏—â–∞–µ—Ç –ø–∞–º—è—Ç—å –≤–æ –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–∞—Ö"""
        results = []
        for agent in self.agents:
            results.append(await agent.clear_user_memory(user_id))
        return all(results)
        
    def get_status(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤ –≤ —Ü–µ–ø–æ—á–∫–µ"""
        return {
            "name": self.get_name(),
            "agents": [agent.get_status() for agent in self.agents],
            "total_agents": len(self.agents)
        }