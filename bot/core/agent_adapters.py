"""
–ê–¥–∞–ø—Ç–µ—Ä—ã –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∞–≥–µ–Ω—Ç–æ–≤

–ü—Ä–∏–≤–æ–¥–∏—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∞–≥–µ–Ω—Ç—ã –∫ –µ–¥–∏–Ω–æ–º—É –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É IAgent
"""

import logging
from typing import Optional, Dict, Any

try:
    from .logging_utils import (
        get_structured_logger, ComponentType, TraceContext,
        log_operation_start, log_operation_success, log_operation_error
    )
    from .request_tracer import request_tracer, ComponentStep
    STRUCTURED_LOGGING = True
except ImportError:
    STRUCTURED_LOGGING = False

from .base_agent import IAgent
from .interfaces import Message, Response, UserRole

logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ª–æ–≥–≥–µ—Ä—ã –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
if STRUCTURED_LOGGING:
    adapter_logger = get_structured_logger("agent_adapter", ComponentType.ADAPTER)
else:
    adapter_logger = None


class UnifiedAgentAdapter(IAgent):
    """–ê–¥–∞–ø—Ç–µ—Ä –¥–ª—è Unified Agent —Å Claude Code SDK"""
    
    def __init__(self):
        self._service = None
        self.structured_logger = adapter_logger if STRUCTURED_LOGGING else None
        self._init_service()
        
    def _init_service(self):
        """–õ–µ–Ω–∏–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞"""
        try:
            from .unified_agent import unified_agent
            self._service = unified_agent
            logger.info("‚úÖ UnifiedAgentAdapter –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except ImportError as e:
            logger.warning(f"‚ö†Ô∏è Unified Agent –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
            
    async def process_message(self, message: Message) -> Response:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Unified Agent"""
        trace_id = getattr(message, 'trace_id', None)
        
        if not self._service:
            if self.structured_logger and trace_id:
                self.structured_logger.error(
                    "‚ùå Unified Agent –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω",
                    trace_id=trace_id,
                    operation="service_unavailable",
                    metadata={"service_available": False}
                )
            return Response(text="Unified Agent –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", metadata={"error": "Service not available"})
        
        # –¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ UnifiedAgent
        if STRUCTURED_LOGGING and trace_id:
            async with request_tracer.trace_operation(
                trace_id, ComponentType.AGENT, ComponentStep.AGENT_PROCESSING,
                details={"agent": "UnifiedAgent", "user_id": message.user.id}
            ):
                return await self._service.process_message(message)
        else:
            return await self._service.process_message(message)
        
    async def can_handle(self, message: Message) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–µ—Ç –ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        import uuid
        trace_id = getattr(message, 'trace_id', str(uuid.uuid4())[:8])
        
        if self.structured_logger:
            self.structured_logger.info(
                "üîç UnifiedAgentAdapter: –∞–Ω–∞–ª–∏–∑ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏",
                trace_id=trace_id,
                operation="can_handle_analysis",
                metadata={
                    "user_id": message.user.id,
                    "user_role": message.user.role.value,
                    "is_business_message": getattr(message, 'is_business_message', False),
                    "message_length": len(message.text)
                }
            )
        else:
            logger.info(f"üîç [TRACE:{trace_id}] UnifiedAgentAdapter: –∞–Ω–∞–ª–∏–∑ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏")
            logger.info(f"üë§ [TRACE:{trace_id}] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.user.id}")
            logger.info(f"üè∑Ô∏è [TRACE:{trace_id}] –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {message.user.role.value}")
            logger.info(f"üèóÔ∏è [TRACE:{trace_id}] Business —Å–æ–æ–±—â–µ–Ω–∏–µ: {getattr(message, 'is_business_message', False)}")
        
        # Unified Agent –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –í–°–ï —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –±–æ—Ç–∞
        from ..core.config import config
        
        # –ï—Å–ª–∏ UnifiedAgent –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º
        if not self._service:
            if self.structured_logger:
                self.structured_logger.warning(
                    "‚ùå UnifiedAgent –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω",
                    trace_id=trace_id,
                    operation="availability_check",
                    metadata={"service_available": False}
                )
            else:
                logger.warning(f"‚ùå [TRACE:{trace_id}] UnifiedAgent –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return False
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω
        if message.user.role != UserRole.ADMIN:
            if self.structured_logger:
                self.structured_logger.info(
                    "‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
                    trace_id=trace_id,
                    operation="role_check",
                    metadata={"user_role": message.user.role.value, "required_role": "admin"}
                )
            else:
                logger.info(f"‚ùå [TRACE:{trace_id}] –û—Ç–∫–ª–æ–Ω–µ–Ω–æ: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä")
            return False
            
        # UnifiedAgent –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –í–°–ï —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ª—é–±–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if self.structured_logger:
            self.structured_logger.info(
                "‚úÖ –ü—Ä–∏–Ω—è—Ç–æ: –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å UnifiedAgent",
                trace_id=trace_id,
                operation="admin_access_granted",
                metadata={
                    "user_id": message.user.id,
                    "access_type": "full_admin_access",
                    "agent_priority": self.get_priority()
                }
            )
        else:
            logger.info(f"‚úÖ [TRACE:{trace_id}] –ü—Ä–∏–Ω—è—Ç–æ: –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å UnifiedAgent")
            logger.debug(f"Admin user {message.user.id} can access UnifiedAgent for any message")
        
        # –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –≤—Å–µ–≥–¥–∞ –Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –∫ UnifiedAgent
        return True
        
    def get_name(self) -> str:
        return "UnifiedAgent"
        
    def get_priority(self) -> int:
        return 90  # –í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
        
    def get_status(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞"""
        if self._service:
            return self._service.get_status()
        return {
            "name": self.get_name(),
            "enabled": False,
            "error": "Service not initialized"
        }



class DefaultAgentAdapter(IAgent):
    """–ê–¥–∞–ø—Ç–µ—Ä –¥–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ AI –∞–≥–µ–Ω—Ç–∞"""
    
    def __init__(self):
        self._agent = None
        self.structured_logger = adapter_logger if STRUCTURED_LOGGING else None
        self._init_agent()
        
    def _init_agent(self):
        """–õ–µ–Ω–∏–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–∞"""
        try:
            from .agent import AgentFactory
            self._agent = AgentFactory.get_agent()
            logger.info("‚úÖ DefaultAgentAdapter –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞: {e}")
            
    async def process_message(self, message: Message) -> Response:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∞–≥–µ–Ω—Ç"""
        trace_id = getattr(message, 'trace_id', None)
        
        if not self._agent:
            if self.structured_logger and trace_id:
                self.structured_logger.error(
                    "‚ùå DefaultAgent –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω",
                    trace_id=trace_id,
                    operation="agent_unavailable",
                    metadata={"agent_initialized": False}
                )
            return Response(
                text="–ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω",
                metadata={"error": "Agent not initialized"}
            )
        
        # –¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ DefaultAgent
        if STRUCTURED_LOGGING and trace_id:
            async with request_tracer.trace_operation(
                trace_id, ComponentType.AGENT, ComponentStep.AGENT_PROCESSING,
                details={"agent": "DefaultAgent", "user_id": message.user.id}
            ):
                return await self._agent.process_message(message)
        else:
            return await self._agent.process_message(message)
        
    async def can_handle(self, message: Message) -> bool:
        """–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∞–≥–µ–Ω—Ç –º–æ–∂–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        import uuid
        trace_id = getattr(message, 'trace_id', str(uuid.uuid4())[:8])
        
        if self.structured_logger:
            self.structured_logger.info(
                "üîç DefaultAgentAdapter: –∞–Ω–∞–ª–∏–∑ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏",
                trace_id=trace_id,
                operation="can_handle_analysis",
                metadata={
                    "user_id": message.user.id,
                    "user_role": message.user.role.value,
                    "is_business_message": getattr(message, 'is_business_message', False),
                    "agent_initialized": self._agent is not None,
                    "agent_priority": self.get_priority()
                }
            )
        else:
            logger.info(f"üîç [TRACE:{trace_id}] DefaultAgentAdapter: –∞–Ω–∞–ª–∏–∑ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏")
            logger.info(f"üë§ [TRACE:{trace_id}] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.user.id}")
            logger.info(f"üè∑Ô∏è [TRACE:{trace_id}] –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {message.user.role.value}")
            logger.info(f"üèóÔ∏è [TRACE:{trace_id}] Business —Å–æ–æ–±—â–µ–Ω–∏–µ: {getattr(message, 'is_business_message', False)}")
        
        if self._agent is not None:
            if self.structured_logger:
                self.structured_logger.info(
                    "‚úÖ –ü—Ä–∏–Ω—è—Ç–æ: DefaultAgent (ArtemAgent) –≥–æ—Ç–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ",
                    trace_id=trace_id,
                    operation="agent_ready",
                    metadata={"agent_type": "ArtemAgent", "fallback_role": True}
                )
            else:
                logger.info(f"‚úÖ [TRACE:{trace_id}] –ü—Ä–∏–Ω—è—Ç–æ: DefaultAgent (ArtemAgent) –≥–æ—Ç–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ")
            return True
        else:
            if self.structured_logger:
                self.structured_logger.warning(
                    "‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ: DefaultAgent –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω",
                    trace_id=trace_id,
                    operation="agent_unavailable",
                    metadata={"error": "agent_not_initialized"}
                )
            else:
                logger.warning(f"‚ùå [TRACE:{trace_id}] –û—Ç–∫–ª–æ–Ω–µ–Ω–æ: DefaultAgent –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return False
        
    def get_name(self) -> str:
        return "DefaultAgent"
        
    def get_priority(self) -> int:
        return 10  # –ù–∏–∑–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç - fallback –∞–≥–µ–Ω—Ç
        
    async def clear_user_memory(self, user_id: int) -> bool:
        """–û—á–∏—â–∞–µ—Ç –ø–∞–º—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if self._agent:
            return await self._agent.clear_user_memory(user_id)
        return False