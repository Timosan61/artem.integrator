"""
–û—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
"""

import logging
import logging.handlers
import os
from pathlib import Path
from typing import Optional, Dict, Any
from datetime import datetime
import json

from ..config import config
from .formatters import ColoredFormatter, JSONFormatter
from .handlers import ErrorHandler, MetricsHandler


class BotLogger:
    """
    –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ª–æ–≥–≥–µ—Ä –¥–ª—è –±–æ—Ç–∞
    
    –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
    - –†–∞–∑–Ω—ã–µ —É—Ä–æ–≤–Ω–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
    - –†–æ—Ç–∞—Ü–∏—è –ª–æ–≥–æ–≤
    - –¶–≤–µ—Ç–Ω–æ–π –≤—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å
    - JSON –ª–æ–≥–∏ –¥–ª—è production
    - –û—Ç–ø—Ä–∞–≤–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    """
    
    _instance = None
    _loggers: Dict[str, logging.Logger] = {}
    
    def __new__(cls):
        if cls._instance is None:
            cls._instance = super().__new__(cls)
            cls._instance._initialized = False
        return cls._instance
    
    def __init__(self):
        if self._initialized:
            return
        
        self._initialized = True
        self.logs_dir = config.logs_dir
        self.logs_dir.mkdir(exist_ok=True)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ—Ä–Ω–µ–≤–æ–≥–æ –ª–æ–≥–≥–µ—Ä–∞
        self._setup_root_logger()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –ª–æ–≥–≥–µ—Ä–æ–≤
        self._setup_module_loggers()
    
    def _setup_root_logger(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ—Ä–Ω–µ–≤–æ–≥–æ –ª–æ–≥–≥–µ—Ä–∞"""
        root_logger = logging.getLogger()
        root_logger.setLevel(logging.DEBUG if config.debug else logging.INFO)
        
        # –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        root_logger.handlers.clear()
        
        # –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π –≤—ã–≤–æ–¥
        console_handler = logging.StreamHandler()
        console_handler.setLevel(logging.DEBUG if config.debug else logging.INFO)
        
        if config.environment.value == "development":
            console_handler.setFormatter(ColoredFormatter())
        else:
            console_handler.setFormatter(JSONFormatter())
        
        root_logger.addHandler(console_handler)
        
        # –§–∞–π–ª–æ–≤—ã–π –≤—ã–≤–æ–¥
        self._add_file_handlers(root_logger)
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        if config.environment.value == "production":
            error_handler = ErrorHandler()
            error_handler.setLevel(logging.ERROR)
            root_logger.addHandler(error_handler)
    
    def _add_file_handlers(self, logger: logging.Logger):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Ñ–∞–π–ª–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏"""
        # –û–±—â–∏–π –ª–æ–≥
        general_log = self.logs_dir / "bot.log"
        general_handler = logging.handlers.RotatingFileHandler(
            general_log,
            maxBytes=10 * 1024 * 1024,  # 10MB
            backupCount=5,
            encoding='utf-8'
        )
        general_handler.setFormatter(JSONFormatter())
        general_handler.setLevel(logging.INFO)
        logger.addHandler(general_handler)
        
        # –õ–æ–≥ –æ—à–∏–±–æ–∫
        error_log = self.logs_dir / "errors.log"
        error_handler = logging.handlers.RotatingFileHandler(
            error_log,
            maxBytes=5 * 1024 * 1024,  # 5MB
            backupCount=3,
            encoding='utf-8'
        )
        error_handler.setFormatter(JSONFormatter())
        error_handler.setLevel(logging.ERROR)
        logger.addHandler(error_handler)
        
        # Debug –ª–æ–≥ (—Ç–æ–ª—å–∫–æ –≤ development)
        if config.debug:
            debug_log = self.logs_dir / "debug.log"
            debug_handler = logging.handlers.RotatingFileHandler(
                debug_log,
                maxBytes=20 * 1024 * 1024,  # 20MB
                backupCount=2,
                encoding='utf-8'
            )
            debug_handler.setFormatter(JSONFormatter())
            debug_handler.setLevel(logging.DEBUG)
            logger.addHandler(debug_handler)
    
    def _setup_module_loggers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–æ–≤ –¥–ª—è –º–æ–¥—É–ª–µ–π"""
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Ä–æ–≤–Ω–µ–π –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
        module_levels = {
            "bot.webhook": logging.INFO,
            "bot.core": logging.INFO,
            "bot.mcp": logging.DEBUG if config.mcp.enabled else logging.INFO,
            "bot.services": logging.INFO,
            "httpx": logging.WARNING,
            "telebot": logging.WARNING,
            "uvicorn": logging.INFO,
            "openai": logging.WARNING,
            "anthropic": logging.WARNING
        }
        
        for module_name, level in module_levels.items():
            logger = logging.getLogger(module_name)
            logger.setLevel(level)
            self._loggers[module_name] = logger
    
    def get_logger(self, name: str) -> logging.Logger:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –ª–æ–≥–≥–µ—Ä –¥–ª—è –º–æ–¥—É–ª—è
        
        Args:
            name: –ò–º—è –º–æ–¥—É–ª—è
            
        Returns:
            logging.Logger: –ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –ª–æ–≥–≥–µ—Ä
        """
        if name in self._loggers:
            return self._loggers[name]
        
        logger = logging.getLogger(name)
        self._loggers[name] = logger
        return logger
    
    def add_metrics_handler(self, metrics_handler: MetricsHandler):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ—Ç—Ä–∏–∫"""
        root_logger = logging.getLogger()
        root_logger.addHandler(metrics_handler)
    
    def log_startup(self):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger = self.get_logger("bot.startup")
        logger.info("=" * 50)
        logger.info("ü§ñ Artyom Integrator Bot Starting...")
        logger.info(f"üìÖ Time: {datetime.now().isoformat()}")
        logger.info(f"üåç Environment: {config.environment.value}")
        logger.info(f"üêõ Debug: {config.debug}")
        logger.info(f"üìÅ Logs: {self.logs_dir}")
        
        # –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤
        status = config.get_status_info()
        logger.info(f"üìä Services: {json.dumps(status['services'], indent=2)}")
        logger.info("=" * 50)
    
    def log_shutdown(self):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"""
        logger = self.get_logger("bot.shutdown")
        logger.info("=" * 50)
        logger.info("üõë Artyom Integrator Bot Shutting down...")
        logger.info(f"üìÖ Time: {datetime.now().isoformat()}")
        logger.info("=" * 50)


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
_bot_logger = BotLogger()


def get_logger(name: str) -> logging.Logger:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –ª–æ–≥–≥–µ—Ä –¥–ª—è –º–æ–¥—É–ª—è
    
    Args:
        name: –ò–º—è –º–æ–¥—É–ª—è (–æ–±—ã—á–Ω–æ __name__)
        
    Returns:
        logging.Logger: –ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –ª–æ–≥–≥–µ—Ä
    """
    return _bot_logger.get_logger(name)


def setup_logging():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º—É –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    _bot_logger.log_startup()


def shutdown_logging():
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    _bot_logger.log_shutdown()