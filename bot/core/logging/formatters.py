"""
–§–æ—Ä–º–∞—Ç—Ç–µ—Ä—ã –¥–ª—è –ª–æ–≥–æ–≤
"""

import logging
import json
from datetime import datetime
from typing import Dict, Any
import traceback


class ColoredFormatter(logging.Formatter):
    """
    –¶–≤–µ—Ç–Ω–æ–π —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä –¥–ª—è –∫–æ–Ω—Å–æ–ª—å–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞
    """
    
    # ANSI color codes
    COLORS = {
        'DEBUG': '\033[36m',      # Cyan
        'INFO': '\033[32m',       # Green
        'WARNING': '\033[33m',    # Yellow
        'ERROR': '\033[31m',      # Red
        'CRITICAL': '\033[35m',   # Magenta
    }
    
    RESET = '\033[0m'
    
    # –≠–º–æ–¥–∑–∏ –¥–ª—è —É—Ä–æ–≤–Ω–µ–π
    EMOJIS = {
        'DEBUG': 'üêõ',
        'INFO': 'üìù',
        'WARNING': '‚ö†Ô∏è',
        'ERROR': '‚ùå',
        'CRITICAL': 'üö®',
    }
    
    def __init__(self):
        super().__init__()
        self.fmt = "%(asctime)s | %(emoji)s %(levelname)-8s | %(name)-20s | %(message)s"
        self.datefmt = "%Y-%m-%d %H:%M:%S"
    
    def format(self, record: logging.LogRecord) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∑–∞–ø–∏—Å—å –ª–æ–≥–∞ —Å —Ü–≤–µ—Ç–æ–º"""
        # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏
        record.emoji = self.EMOJIS.get(record.levelname, 'üìå')
        
        # –ë–∞–∑–æ–≤–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        log_fmt = self.fmt
        formatter = logging.Formatter(log_fmt, self.datefmt)
        formatted = formatter.format(record)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ü–≤–µ—Ç
        color = self.COLORS.get(record.levelname, '')
        if color:
            # –¶–≤–µ—Ç–Ω–æ–π —É—Ä–æ–≤–µ–Ω—å
            formatted = formatted.replace(
                record.levelname,
                f"{color}{record.levelname}{self.RESET}"
            )
            
            # –¶–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—à–∏–±–æ–∫
            if record.levelname in ['ERROR', 'CRITICAL']:
                formatted = formatted.replace(
                    record.getMessage(),
                    f"{color}{record.getMessage()}{self.RESET}"
                )
        
        # –î–æ–±–∞–≤–ª—è–µ–º traceback –µ—Å–ª–∏ –µ—Å—Ç—å
        if record.exc_info:
            formatted += f"\n{color}{''.join(traceback.format_exception(*record.exc_info))}{self.RESET}"
        
        return formatted


class JSONFormatter(logging.Formatter):
    """
    JSON —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä –¥–ª—è production –ª–æ–≥–æ–≤
    """
    
    def format(self, record: logging.LogRecord) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∑–∞–ø–∏—Å—å –ª–æ–≥–∞ –≤ JSON"""
        log_data = {
            "timestamp": datetime.fromtimestamp(record.created).isoformat(),
            "level": record.levelname,
            "logger": record.name,
            "message": record.getMessage(),
            "module": record.module,
            "function": record.funcName,
            "line": record.lineno,
            "thread": record.thread,
            "thread_name": record.threadName,
            "process": record.process,
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –µ—Å–ª–∏ –µ—Å—Ç—å
        if hasattr(record, 'user_id'):
            log_data['user_id'] = record.user_id
        
        if hasattr(record, 'chat_id'):
            log_data['chat_id'] = record.chat_id
        
        if hasattr(record, 'request_id'):
            log_data['request_id'] = record.request_id
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å–∫–ª—é—á–µ–Ω–∏–∏
        if record.exc_info:
            log_data['exception'] = {
                'type': record.exc_info[0].__name__,
                'message': str(record.exc_info[1]),
                'traceback': ''.join(traceback.format_exception(*record.exc_info))
            }
        
        # –î–æ–±–∞–≤–ª—è–µ–º extra –¥–∞–Ω–Ω—ã–µ
        for key, value in record.__dict__.items():
            if key not in ['name', 'msg', 'args', 'created', 'filename', 
                          'funcName', 'levelname', 'levelno', 'lineno', 
                          'module', 'msecs', 'pathname', 'process', 
                          'processName', 'relativeCreated', 'thread', 
                          'threadName', 'exc_info', 'exc_text', 'stack_info',
                          'getMessage', 'message', 'emoji']:
                try:
                    # –ü—ã—Ç–∞–µ–º—Å—è —Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞—Ç—å –≤ JSON
                    json.dumps(value)
                    log_data[key] = value
                except (TypeError, ValueError):
                    log_data[key] = str(value)
        
        return json.dumps(log_data, ensure_ascii=False)


class TelegramFormatter(logging.Formatter):
    """
    –§–æ—Ä–º–∞—Ç—Ç–µ—Ä –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–≥–æ–≤ –≤ Telegram
    """
    
    EMOJIS = {
        'DEBUG': 'üêõ',
        'INFO': 'üìù',
        'WARNING': '‚ö†Ô∏è',
        'ERROR': '‚ùå',
        'CRITICAL': 'üö®',
    }
    
    def format(self, record: logging.LogRecord) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∑–∞–ø–∏—Å—å –¥–ª—è Telegram"""
        emoji = self.EMOJIS.get(record.levelname, 'üìå')
        
        lines = [
            f"{emoji} <b>{record.levelname}</b>",
            f"üìç <b>Module:</b> {record.name}",
            f"üìÑ <b>File:</b> {record.filename}:{record.lineno}",
            f"üïê <b>Time:</b> {datetime.fromtimestamp(record.created).strftime('%Y-%m-%d %H:%M:%S')}",
            "",
            f"<b>Message:</b>",
            f"<code>{record.getMessage()}</code>"
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –µ—Å–ª–∏ –µ—Å—Ç—å
        if hasattr(record, 'user_id'):
            lines.insert(4, f"üë§ <b>User:</b> {record.user_id}")
        
        if hasattr(record, 'chat_id'):
            lines.insert(4, f"üí¨ <b>Chat:</b> {record.chat_id}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º traceback –¥–ª—è –æ—à–∏–±–æ–∫
        if record.exc_info:
            exc_type, exc_value, exc_traceback = record.exc_info
            tb_lines = traceback.format_exception(exc_type, exc_value, exc_traceback)
            
            lines.extend([
                "",
                "<b>Exception:</b>",
                f"<code>{exc_type.__name__}: {exc_value}</code>",
                "",
                "<b>Traceback:</b>",
                f"<pre>{''.join(tb_lines[-3:])}</pre>"  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 —Å—Ç—Ä–æ–∫–∏ traceback
            ])
        
        return "\n".join(lines)