"""
Claude Code Service - –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Claude Code SDK –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è MCP –∫–æ–º–∞–Ω–¥

–≠—Ç–æ—Ç —Å–µ—Ä–≤–∏—Å –ø–æ–∑–≤–æ–ª—è–µ—Ç –±–æ—Ç—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å MCP —Å–µ—Ä–≤–µ—Ä—ã —á–µ—Ä–µ–∑ Claude Code SDK.
"""

import logging
import json
import os
from typing import Optional, Dict, Any, List, AsyncIterator
from pathlib import Path
import asyncio
import anyio
from datetime import datetime

try:
    from claude_code_sdk import query, ClaudeCodeOptions, Message
    CLAUDE_CODE_SDK_AVAILABLE = True
except ImportError:
    logger = logging.getLogger(__name__)
    logger.warning("‚ö†Ô∏è claude-code-sdk –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –†–∞–±–æ—Ç–∞–µ–º –≤ —Ä–µ–∂–∏–º–µ —ç–º—É–ª—è—Ü–∏–∏")
    CLAUDE_CODE_SDK_AVAILABLE = False
    # –≠–º—É–ª—è—Ü–∏—è –∫–ª–∞—Å—Å–æ–≤ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    class Message:
        def __init__(self, role: str, content: str):
            self.role = role
            self.content = content
            self.tool_calls = []
    
    class ClaudeCodeOptions:
        def __init__(self, **kwargs):
            pass

from ..core.config import config

logger = logging.getLogger(__name__)


class ClaudeCodeService:
    """
    –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Claude Code SDK –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è MCP –∫–æ–º–∞–Ω–¥
    """
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞"""
        self.enabled = config.mcp.enabled and config.anthropic.enabled
        self.api_key = config.anthropic.api_key
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –µ—Å–ª–∏ –æ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        local_config = Path(__file__).parent.parent.parent / "data" / "mcp-servers-local.json"
        default_config = Path(__file__).parent.parent.parent / "data" / "mcp-servers.json"
        self.mcp_config_path = local_config if local_config.exists() else default_config
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å –ø–æ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–º–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏
        self.temp_mcp_config = self._create_mcp_config_with_env_vars()
        
        if not self.enabled:
            logger.warning("‚ö†Ô∏è Claude Code Service –æ—Ç–∫–ª—é—á–µ–Ω: MCP –∏–ª–∏ Anthropic –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
            return
            
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è SDK
        if self.api_key:
            os.environ["ANTHROPIC_API_KEY"] = self.api_key
            
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Moonshot API –¥–ª—è –æ–±—Ö–æ–¥–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
        os.environ["ANTHROPIC_BASE_URL"] = "https://api.moonshot.ai/anthropic"
        os.environ["ANTHROPIC_AUTH_TOKEN"] = "sk-QNnXEpPxnV9OCIhr6IMUcXQu2b4Vsuq2biZVAFce0KIoUTsx"
            
        logger.info("‚úÖ Claude Code Service –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    async def execute_natural_request(
        self, 
        text: str, 
        user_id: Optional[str] = None
    ) -> Dict[str, Any]:
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–º —è–∑—ã–∫–µ —á–µ—Ä–µ–∑ Claude Code SDK
        (–ø–æ –∞–Ω–∞–ª–æ–≥–∏–∏ —Å Claude Desktop)
        
        Args:
            text: –¢–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            
        Returns:
            Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        """
        import uuid
        trace_id = str(uuid.uuid4())[:8]
        
        if not self.enabled:
            logger.warning(f"‚ùå [TRACE:{trace_id}] Claude Code Service –æ—Ç–∫–ª—é—á–µ–Ω")
            return {
                "success": False,
                "error": "Claude Code SDK –æ—Ç–∫–ª—é—á–µ–Ω"
            }
            
        if not CLAUDE_CODE_SDK_AVAILABLE:
            logger.warning(f"‚ùå [TRACE:{trace_id}] Claude Code SDK –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return {
                "success": False,
                "error": "Claude Code SDK –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
            }
            
        try:
            logger.info(f"üöÄ [TRACE:{trace_id}] –ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å: '{text[:100]}{'...' if len(text) > 100 else ''}'")
            logger.info(f"üë§ [TRACE:{trace_id}] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º MCP —Å–µ—Ä–≤–µ—Ä—ã
            mcp_servers = {}
            config_file = self.temp_mcp_config if self.temp_mcp_config and self.temp_mcp_config.exists() else self.mcp_config_path
            
            if config_file and config_file.exists():
                try:
                    with open(config_file) as f:
                        mcp_config = json.load(f)
                        for server_name, server_config in mcp_config.get("mcpServers", {}).items():
                            mcp_servers[server_name] = {
                                "command": server_config.get("command", ""),
                                "args": server_config.get("args", []),
                                "env": server_config.get("env", {})
                            }
                    logger.info(f"‚úÖ [TRACE:{trace_id}] –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(mcp_servers)} MCP —Å–µ—Ä–≤–µ—Ä–æ–≤")
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è [TRACE:{trace_id}] –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å MCP –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é: {e}")
            
            # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏ –¥–ª—è SDK - –ø—É—Å—Ç—å —Å–∞–º –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç
            options = ClaudeCodeOptions(
                max_turns=1,
                mcp_servers=mcp_servers,
                permission_mode="acceptEdits"
            )
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º —á–µ—Ä–µ–∑ SDK
            messages: List[Message] = []
            
            import time
            start_time = time.time()
            
            async for message in query(prompt=text, options=options):
                messages.append(message)
                if len(messages) > 50:  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
                    logger.warning(f"‚ö†Ô∏è [TRACE:{trace_id}] –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π, –ø—Ä–µ—Ä—ã–≤–∞–µ–º")
                    break
                    
            execution_time = time.time() - start_time
            logger.info(f"‚úÖ [TRACE:{trace_id}] SDK –≤—ã–ø–æ–ª–Ω–µ–Ω –∑–∞ {execution_time:.2f}—Å, –ø–æ–ª—É—á–µ–Ω–æ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ª–æ–≥–∏–∫—É)
            result = self._process_messages(messages, text, trace_id)
            
            return result
            
        except Exception as e:
            logger.error(f"üí• [TRACE:{trace_id}] –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: {e}", exc_info=True)
            return {
                "success": False,
                "error": str(e)
            }
    
    
    def _create_mcp_config_with_env_vars(self) -> Optional[Path]:
        """
        –°–æ–∑–¥–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ MCP —Å –ø–æ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–º–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        
        Returns:
            –ü—É—Ç—å –∫ –≤—Ä–µ–º–µ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        try:
            if not self.mcp_config_path.exists():
                logger.warning(f"‚ö†Ô∏è –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ MCP –Ω–µ –Ω–∞–π–¥–µ–Ω: {self.mcp_config_path}")
                return None
                
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —à–∞–±–ª–æ–Ω –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            with open(self.mcp_config_path, 'r', encoding='utf-8') as f:
                config_template = f.read()
            
            # –ü–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
            config_content = self._substitute_env_variables(config_template)
            
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            import tempfile
            temp_file = tempfile.NamedTemporaryFile(
                mode='w', 
                suffix='.json', 
                prefix='mcp-config-', 
                delete=False,
                encoding='utf-8'
            )
            temp_file.write(config_content)
            temp_file.flush()
            temp_file.close()
            
            temp_path = Path(temp_file.name)
            logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ MCP: {temp_path}")
            return temp_path
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ MCP: {e}")
            return None
    
    def _substitute_env_variables(self, template: str) -> str:
        """
        –ü–æ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ —à–∞–±–ª–æ–Ω –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        
        Args:
            template: –®–∞–±–ª–æ–Ω —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –≤–∏–¥–∞ {VARIABLE_NAME}
            
        Returns:
            –°—Ç—Ä–æ–∫–∞ —Å –ø–æ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
        """
        import re
        
        # –ú–∞–ø–ø–∏–Ω–≥ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ .env
        env_mapping = {
            'DIGITALOCEAN_TOKEN': os.getenv('DIGITALOCEAN_TOKEN', ''),
            'SUPABASE_URL': os.getenv('SUPABASE_URL', ''),
            'SUPABASE_KEY': os.getenv('SUPABASE_KEY', ''),
            'CONTEXT7_API_KEY': os.getenv('CONTEXT7_API_KEY', ''),
        }
        
        # –ü–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        result = template
        for var_name, var_value in env_mapping.items():
            pattern = f"{{{var_name}}}"
            result = result.replace(pattern, var_value)
            
        # –£–¥–∞–ª—è–µ–º —Å–µ—Ä–≤–µ—Ä—ã —Å –ø—É—Å—Ç—ã–º–∏ —Ç–æ–∫–µ–Ω–∞–º–∏
        try:
            import json
            config_dict = json.loads(result)
            filtered_servers = {}
            
            for server_name, server_config in config_dict.get("mcpServers", {}).items():
                env_vars = server_config.get("env", {})
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è
                has_valid_env = any(value.strip() for value in env_vars.values()) if env_vars else True
                
                if has_valid_env:
                    filtered_servers[server_name] = server_config
                else:
                    logger.info(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä {server_name} - –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è")
            
            config_dict["mcpServers"] = filtered_servers
            result = json.dumps(config_dict, indent=2)
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å —Å–µ—Ä–≤–µ—Ä—ã: {e}")
            
        return result
        
    async def execute_mcp_command(
        self, 
        command: str, 
        user_id: Optional[str] = None,
        trace_id: Optional[str] = None
    ) -> Dict[str, Any]:
        """
        –£–°–¢–ê–†–ï–í–®–ò–ô –º–µ—Ç–æ–¥ - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ execute_natural_request
        –û—Å—Ç–∞–≤–ª–µ–Ω –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        """
        logger.warning(f"‚ö†Ô∏è execute_mcp_command —É—Å—Ç–∞—Ä–µ–ª, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ execute_natural_request")
        return await self.execute_natural_request(command, user_id)
    
    
    def _process_messages(self, messages: List[Message], command: str, trace_id: str = None) -> Dict[str, Any]:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç Claude Code SDK
        
        Args:
            messages: –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç SDK
            command: –ò—Å—Ö–æ–¥–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞
            trace_id: ID —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏
            
        Returns:
            –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        """
        if not trace_id:
            trace_id = "no-trace"
            
        logger.info(f"üîÑ [TRACE:{trace_id}] –û–±—Ä–∞–±–æ—Ç–∫–∞ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç SDK")
        
        if not messages:
            logger.warning(f"‚ùå [TRACE:{trace_id}] –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç Claude Code SDK")
            return {
                "success": False,
                "error": "–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç Claude Code"
            }
        
        # –ò—â–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è MCP
        logger.info(f"üîç [TRACE:{trace_id}] –ê–Ω–∞–ª–∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è MCP —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...")
        
        result_data = None
        error_message = None
        mcp_result_text = None
        
        for i, message in enumerate(messages):
            logger.debug(f"üì® [TRACE:{trace_id}] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ #{i+1}: {type(message).__name__}")
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º tool_result –≤ UserMessage
            if hasattr(message, 'content') and isinstance(message.content, list):
                for item in message.content:
                    if isinstance(item, dict) and item.get('type') == 'tool_result':
                        content = item.get('content', '')
                        logger.debug(f"üîß [TRACE:{trace_id}] Tool result –Ω–∞–π–¥–µ–Ω: content_type={type(content)}, is_error={item.get('is_error')}")
                        logger.debug(f"üìÑ [TRACE:{trace_id}] Tool result content: '{str(content)[:200]}{'...' if len(str(content)) > 200 else ''}'")
                        
                        if item.get('is_error'):
                            # –û—Å–æ–±—ã–π —Å–ª—É—á–∞–π –¥–ª—è "No apps found" - —ç—Ç–æ –Ω–µ –æ—à–∏–±–∫–∞
                            if "No apps found" in content:
                                mcp_result_text = "üìÅ **DigitalOcean Apps**\n\n‚ÑπÔ∏è –ù–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –≤ –≤–∞—à–µ–º –∞–∫–∫–∞—É–Ω—Ç–µ DigitalOcean."
                                logger.info(f"üì± [TRACE:{trace_id}] –û–±—Ä–∞–±–æ—Ç–∞–Ω —Å–ª—É—á–∞–π 'No apps found': {mcp_result_text}")
                            else:
                                error_message = content
                                logger.warning(f"‚ùå [TRACE:{trace_id}] –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –æ—à–∏–±–∫–∞ –≤ tool_result: {error_message}")
                        else:
                            result_data = content
                            logger.info(f"‚úÖ [TRACE:{trace_id}] –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ—Ç MCP: —Ç–∏–ø={type(content)}, —Ä–∞–∑–º–µ—Ä={len(str(content))}")
                            logger.debug(f"üîß [TRACE:{trace_id}] Processing result_data: {type(content)} - {str(content)[:100]}...")
                            
                            if isinstance(content, list) and content:
                                # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–∏—Å–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ—Ç MCP
                                for item in content:
                                    if isinstance(item, dict) and item.get('type') == 'text' and item.get('text'):
                                        text_content = item['text']
                                        logger.debug(f"üîß Processing text content: {text_content}")
                                        
                                        # –ü–∞—Ä—Å–∏–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç
                                        lines = text_content.strip().split('\n')
                                        apps_list = []
                                        
                                        for line in lines:
                                            line = line.strip()
                                            if line and 'App ID:' in line and 'Name:' in line:
                                                # –§–æ—Ä–º–∞—Ç: "App ID: 6eb5ebe0-c0aa-4b98-9ee1-a4e471069702 Name: sample-aspnetapp Region: ams"
                                                try:
                                                    # –ò—â–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
                                                    app_id = None
                                                    name = None
                                                    region = None
                                                    
                                                    if 'App ID:' in line:
                                                        app_id_part = line.split('App ID:')[1].split('Name:')[0].strip()
                                                        app_id = app_id_part.strip()
                                                    if 'Name:' in line:
                                                        name_part = line.split('Name:')[1].split('Region:')[0].strip()
                                                        name = name_part.strip()
                                                    if 'Region:' in line:
                                                        region_part = line.split('Region:')[1].strip()
                                                        region = region_part.strip()
                                                    
                                                    if app_id and name:
                                                        apps_list.append({
                                                            'id': app_id,
                                                            'name': name,
                                                            'region': region or 'N/A'
                                                        })
                                                except Exception as e:
                                                    logger.debug(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç—Ä–æ–∫–∏ '{line}': {e}")
                                        
                                        if apps_list:
                                            mcp_result_text = "üìÅ **DigitalOcean Apps**\n\n"
                                            for app in apps_list:
                                                mcp_result_text += f"üì¶ **{app['name']}**\n"
                                                mcp_result_text += f"  üÜî ID: `{app['id']}`\n"
                                                mcp_result_text += f"  üåç –†–µ–≥–∏–æ–Ω: {app['region']}\n\n"
                                            logger.debug(f"‚úÖ –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {mcp_result_text[:100]}...")
                                        elif "No apps found" in text_content:
                                            mcp_result_text = "üìÅ **DigitalOcean Apps**\n\n‚ÑπÔ∏è –ù–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –≤ –≤–∞—à–µ–º –∞–∫–∫–∞—É–Ω—Ç–µ DigitalOcean."
                                        else:
                                            mcp_result_text = text_content
                                        
                                        break  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç
                            elif isinstance(content, str) and content:
                                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –Ω–∞–ø—Ä—è–º—É—é
                                lines = content.strip().split('\n')
                                apps_list = []
                                
                                # –ü–∞—Ä—Å–∏–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç
                                current_app = {}
                                for line in lines:
                                    line = line.strip()
                                    if line.startswith('App ID:') and 'Name:' in line:
                                        # –§–æ—Ä–º–∞—Ç: "App ID: 6eb5ebe0-c0aa-4b98-9ee1-a4e471069702 Name: sample-aspnetapp Region: ams"
                                        parts = line.split()
                                        if len(parts) >= 6:
                                            app_id = parts[2] if len(parts) > 2 else 'N/A'
                                            name = parts[4] if len(parts) > 4 else 'Unknown'
                                            region = parts[6] if len(parts) > 6 else 'N/A'
                                            apps_list.append({
                                                'id': app_id,
                                                'name': name,
                                                'region': region
                                            })
                                
                                if apps_list:
                                    mcp_result_text = "üìÅ **DigitalOcean Apps**\n\n"
                                    for app in apps_list:
                                        mcp_result_text += f"üì¶ **{app['name']}**\n"
                                        mcp_result_text += f"  üÜî ID: `{app['id']}`\n"
                                        mcp_result_text += f"  üåç –†–µ–≥–∏–æ–Ω: {app['region']}\n\n"
                                else:
                                    # –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
                                    if "No apps found" in content or "–Ω–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π" in content.lower():
                                        mcp_result_text = "üìÅ **DigitalOcean Apps**\n\n‚ÑπÔ∏è –ù–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –≤ –≤–∞—à–µ–º –∞–∫–∫–∞—É–Ω—Ç–µ DigitalOcean."
                                    else:
                                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç
                                        mcp_result_text = content
                        
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –æ—à–∏–±–∫–∏
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞—Ç—Ä–∏–±—É—Ç–∞ role (–º–æ–∂–µ—Ç –±—ã—Ç—å SystemMessage –±–µ–∑ role)
            if hasattr(message, 'role') and message.role == "assistant" and hasattr(message, 'content') and message.content:
                content_lower = message.content.lower()
                if "error" in content_lower or "failed" in content_lower:
                    error_message = message.content
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–π –æ—Ç–≤–µ—Ç
        assistant_messages = [m for m in messages if hasattr(m, 'role') and m.role == "assistant" and hasattr(m, 'content') and m.content]
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º content, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π –∏–ª–∏ —Å–ø–∏—Å–∫–æ–º –±–ª–æ–∫–æ–≤
        response_text = None
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç MCP, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
        if mcp_result_text:
            logger.debug(f"üéØ –ò—Å–ø–æ–ª—å–∑—É–µ–º MCP —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {mcp_result_text[:100]}...")
            response_text = mcp_result_text
        elif assistant_messages:
            last_msg = assistant_messages[-1]
            if isinstance(last_msg.content, str) and last_msg.content.strip():
                response_text = last_msg.content.strip()
            elif isinstance(last_msg.content, list):
                # –°–æ–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –±–ª–æ–∫–æ–≤
                text_parts = []
                for block in last_msg.content:
                    if hasattr(block, 'text') and block.text:
                        text_parts.append(block.text)
                    elif isinstance(block, dict) and block.get('text'):
                        text_parts.append(block['text'])
                response_text = '\n'.join(text_parts) if text_parts else None
        
        # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if not response_text:
            response_text = "–ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞"
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å –±–æ–ª—å—à–∏–º–∏ JSON
        MAX_RESPONSE_LENGTH = 4000  # Telegram limit
        if len(response_text) > MAX_RESPONSE_LENGTH:
            response_text = response_text[:MAX_RESPONSE_LENGTH-100] + "\n\n... (–æ—Ç–≤–µ—Ç –æ–±—Ä–µ–∑–∞–Ω)"
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å - –µ—Å–ª–∏ –µ—Å—Ç—å mcp_result_text, —ç—Ç–æ —É—Å–ø–µ—Ö
        success = bool(mcp_result_text) or (not error_message)
        
        logger.info(f"üìä [TRACE:{trace_id}] –§–∏–Ω–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:")
        logger.info(f"‚úÖ [TRACE:{trace_id}] Success: {success}")
        logger.info(f"üìù [TRACE:{trace_id}] Response text: {len(response_text)} —Å–∏–º–≤–æ–ª–æ–≤")
        logger.info(f"üì¶ [TRACE:{trace_id}] Result data: {bool(result_data)}")
        logger.info(f"‚ùå [TRACE:{trace_id}] Error message: {bool(error_message)}")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º response_text –∫–∞–∫ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
        logger.debug(f"üìä [TRACE:{trace_id}] Final response: {response_text[:200]}...")
        
        final_result = {
            "success": success,
            "command": command,
            "response": response_text,
            "data": result_data,
            "error": error_message if not response_text or response_text == "–ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞" else None,
            "message_count": len(messages)
        }
        
        logger.info(f"üéØ [TRACE:{trace_id}] –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ SDK —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω")
        
        return final_result
    
    async def test_connection(self) -> Dict[str, Any]:
        """
        –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MCP —Å–µ—Ä–≤–µ—Ä–∞–º
        
        Returns:
            –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        """
        if not self.enabled:
            return {
                "success": False,
                "enabled": False,
                "error": "–°–µ—Ä–≤–∏—Å –æ—Ç–∫–ª—é—á–µ–Ω"
            }
            
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ MCP
            mcp_config_exists = self.mcp_config_path.exists()
            
            # –ü—Ä–æ–±—É–µ–º –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ—Å—Ç—É—é –∫–æ–º–∞–Ω–¥—É
            result = await self.execute_mcp_command("/mcp status")
            
            return {
                "success": result.get("success", False),
                "enabled": True,
                "mcp_config_exists": mcp_config_exists,
                "api_key_set": bool(self.api_key),
                "test_result": result
            }
            
        except Exception as e:
            return {
                "success": False,
                "enabled": True,
                "error": str(e)
            }
    
    async def _emulate_mcp_command(self, command: str) -> Dict[str, Any]:
        """
        –≠–º—É–ª–∏—Ä—É–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ MCP –∫–æ–º–∞–Ω–¥ –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ SDK
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
        """
        # –ü–∞—Ä—Å–∏–º –∫–æ–º–∞–Ω–¥—É
        parts = command.strip().split()
        
        if command.startswith("/mcp status"):
            return {
                "success": True,
                "command": command,
                "response": """üîå **MCP Status**

**Configured Servers:**
- ‚úÖ **Supabase** - Database management (ENABLED)
- ‚úÖ **DigitalOcean** - Infrastructure & deployments (ENABLED)  
- ‚úÖ **Context7** - Documentation search (ENABLED)

**Available Commands:**
- `/mcp status` - Check MCP servers status
- `/mcp projects` - List Supabase projects
- `/db <query>` - Execute SQL query
- `/mcp apps` - List DigitalOcean apps
- `/docs <library> <query>` - Search documentation

‚ö†Ô∏è **Note:** Running in emulation mode (SDK not installed)""",
                "data": {
                    "servers": {
                        "supabase": {"enabled": config.mcp.supabase_enabled},
                        "digitalocean": {"enabled": config.mcp.digitalocean_enabled},
                        "context7": {"enabled": config.mcp.context7_enabled}
                    }
                },
                "message_count": 1
            }
        
        elif command.startswith("/mcp projects"):
            return {
                "success": True,
                "command": command,
                "response": """üóÑÔ∏è **Supabase Projects** (Emulated)

1. **artem-integrator-prod**
   - Region: us-east-1
   - Status: Active
   - Database: PostgreSQL 15
   
2. **artem-integrator-dev**
   - Region: us-east-1
   - Status: Active
   - Database: PostgreSQL 15

‚ö†Ô∏è This is emulated data for testing""",
                "data": None,
                "message_count": 1
            }
        
        elif command.startswith("/db "):
            sql_query = command[4:].strip()
            return {
                "success": True,
                "command": command,
                "response": f"""üóÑÔ∏è **SQL Query Execution** (Emulated)

Query: `{sql_query}`

Result:
```
PostgreSQL 15.2 on x86_64-pc-linux-gnu
(1 row)
```

‚ö†Ô∏è This is emulated response for testing""",
                "data": None,
                "message_count": 1
            }
        
        elif command.startswith("/mcp apps"):
            return {
                "success": True,
                "command": command,
                "response": """üåä **DigitalOcean Apps** (Emulated)

1. **artem-integrator**
   - Status: Active
   - Region: FRA1
   - Last Deploy: 2 hours ago
   
2. **artem-admin-panel**
   - Status: Active
   - Region: NYC1
   - Last Deploy: 1 day ago

‚ö†Ô∏è This is emulated data for testing""",
                "data": None,
                "message_count": 1
            }
        
        elif command.startswith("/docs "):
            parts = command[6:].strip().split(maxsplit=1)
            library = parts[0] if parts else "unknown"
            query = parts[1] if len(parts) > 1 else ""
            
            return {
                "success": True,
                "command": command,
                "response": f"""üìö **Documentation Search** (Emulated)

Library: **{library}**
Query: **{query}**

Found 3 results:
1. **{library} - Getting Started**
   Basic introduction to {library}
   
2. **{library} - API Reference**
   Complete API documentation
   
3. **{library} - {query} Guide**
   Detailed guide about {query}

‚ö†Ô∏è This is emulated response for testing""",
                "data": None,
                "message_count": 1
            }
        
        else:
            return {
                "success": False,
                "command": command,
                "response": f"‚ùå Unknown command: {command}",
                "error": "Command not recognized in emulation mode",
                "message_count": 1
            }
    
    def __del__(self):
        """–û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞"""
        self._cleanup_temp_files()
    
    def _cleanup_temp_files(self):
        """–£–¥–∞–ª—è–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        try:
            if hasattr(self, 'temp_mcp_config') and self.temp_mcp_config and self.temp_mcp_config.exists():
                self.temp_mcp_config.unlink()
                logger.info(f"üßπ –£–¥–∞–ª–µ–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {self.temp_mcp_config}")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {e}")


# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
claude_code_service = ClaudeCodeService()