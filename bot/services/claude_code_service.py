"""
Claude Code Service - –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Claude Code SDK –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è MCP –∫–æ–º–∞–Ω–¥

–≠—Ç–æ—Ç —Å–µ—Ä–≤–∏—Å –ø–æ–∑–≤–æ–ª—è–µ—Ç –±–æ—Ç—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å MCP —Å–µ—Ä–≤–µ—Ä—ã —á–µ—Ä–µ–∑ Claude Code SDK.
"""

import logging
import json
import os
import yaml
from typing import Optional, Dict, Any, List, AsyncIterator
from pathlib import Path
import asyncio
import anyio
from datetime import datetime

try:
    from claude_code_sdk import query, ClaudeCodeOptions, Message
    CLAUDE_CODE_SDK_AVAILABLE = True
except ImportError:
    logger = logging.getLogger(__name__)
    logger.warning("‚ö†Ô∏è claude-code-sdk –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –†–∞–±–æ—Ç–∞–µ–º –≤ —Ä–µ–∂–∏–º–µ —ç–º—É–ª—è—Ü–∏–∏")
    CLAUDE_CODE_SDK_AVAILABLE = False
    # –≠–º—É–ª—è—Ü–∏—è –∫–ª–∞—Å—Å–æ–≤ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    class Message:
        def __init__(self, role: str, content: str):
            self.role = role
            self.content = content
            self.tool_calls = []
    
    class ClaudeCodeOptions:
        def __init__(self, **kwargs):
            pass

from ..core.config import config

logger = logging.getLogger(__name__)


class ClaudeCodeService:
    """
    –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Claude Code SDK –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è MCP –∫–æ–º–∞–Ω–¥
    """
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞"""
        self.enabled = config.mcp.enabled and config.anthropic.enabled
        self.api_key = config.anthropic.api_key
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –µ—Å–ª–∏ –æ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        local_config = Path(__file__).parent.parent.parent / "data" / "mcp-servers-local.json"
        default_config = Path(__file__).parent.parent.parent / "data" / "mcp-servers.json"
        self.mcp_config_path = local_config if local_config.exists() else default_config
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–º–ø—Ç—ã –∏–∑ YAML —Ñ–∞–π–ª–æ–≤
        self.voice_prompts = self._load_yaml_config("mcp_voice_prompts.yaml")
        self.sdk_prompts = self._load_yaml_config("claude_sdk_prompts.yaml")
        
        if not self.enabled:
            logger.warning("‚ö†Ô∏è Claude Code Service –æ—Ç–∫–ª—é—á–µ–Ω: MCP –∏–ª–∏ Anthropic –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
            return
            
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è SDK
        if self.api_key:
            os.environ["ANTHROPIC_API_KEY"] = self.api_key
            
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Moonshot API –¥–ª—è –æ–±—Ö–æ–¥–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
        os.environ["ANTHROPIC_BASE_URL"] = "https://api.moonshot.ai/anthropic"
        os.environ["ANTHROPIC_AUTH_TOKEN"] = "sk-QNnXEpPxnV9OCIhr6IMUcXQu2b4Vsuq2biZVAFce0KIoUTsx"
            
        logger.info("‚úÖ Claude Code Service –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def reload_prompts(self) -> None:
        """
        –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç –ø—Ä–æ–º–ø—Ç—ã –∏–∑ YAML —Ñ–∞–π–ª–æ–≤
        –ú–æ–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–æ–≤ –±–µ–∑ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–∞
        """
        try:
            self.voice_prompts = self._load_yaml_config("mcp_voice_prompts.yaml")
            self.sdk_prompts = self._load_yaml_config("claude_sdk_prompts.yaml")
            logger.info("‚úÖ –ü—Ä–æ–º–ø—Ç—ã —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω—ã")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–º–ø—Ç–æ–≤: {e}")
    
    def _load_yaml_config(self, filename: str) -> Dict[str, Any]:
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ YAML —Ñ–∞–π–ª–∞
        
        Args:
            filename: –ò–º—è —Ñ–∞–π–ª–∞ –≤ –ø–∞–ø–∫–µ data
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π –∏–ª–∏ –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        try:
            yaml_path = Path(__file__).parent.parent.parent / "data" / filename
            if yaml_path.exists():
                with open(yaml_path, 'r', encoding='utf-8') as f:
                    return yaml.safe_load(f) or {}
            else:
                logger.warning(f"‚ö†Ô∏è YAML —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {yaml_path}")
                return {}
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ YAML {filename}: {e}")
            return {}
        
    async def execute_mcp_command(
        self, 
        command: str, 
        user_id: Optional[str] = None
    ) -> Dict[str, Any]:
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç MCP –∫–æ–º–∞–Ω–¥—É —á–µ—Ä–µ–∑ Claude Code SDK
        
        Args:
            command: –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: "/mcp status")
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            
        Returns:
            Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        """
        if not self.enabled:
            return {
                "success": False,
                "error": "MCP —Å–µ—Ä–≤–∏—Å –æ—Ç–∫–ª—é—á–µ–Ω"
            }
            
        try:
            logger.info(f"üîß –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ MCP –∫–æ–º–∞–Ω–¥—ã: {command} (user: {user_id})")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è Claude Code
            prompt = self._format_mcp_prompt(command)
            
            # –û–ø—Ü–∏–∏ –¥–ª—è SDK
            if CLAUDE_CODE_SDK_AVAILABLE:
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é MCP —Å–µ—Ä–≤–µ—Ä–æ–≤
                mcp_servers = {}
                if self.mcp_config_path.exists():
                    try:
                        with open(self.mcp_config_path) as f:
                            mcp_config = json.load(f)
                            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ —Ñ–æ—Ä–º–∞—Ç SDK
                            for server_name, server_config in mcp_config.get("mcpServers", {}).items():
                                mcp_servers[server_name] = {
                                    "command": server_config.get("command", ""),
                                    "args": server_config.get("args", []),
                                    "env": server_config.get("env", {})
                                }
                    except Exception as e:
                        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å MCP –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é: {e}")
                
                # –î–æ–±–∞–≤–ª—è–µ–º –±–æ–ª–µ–µ —è–≤–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è MCP
                system_prompt = self._get_system_prompt()
                if "apps" in command.lower() or "digitalocean" in command.lower():
                    system_prompt = f"""Execute user command: {command}

IMPORTANT: Call mcp__digitalocean__list_apps with parameter {{"query": {{}}}} immediately.

DO NOT:
- Use TodoWrite or any todo management tools
- Use Task tool
- Plan or organize tasks
- Use any Cloudflare functions

JUST execute mcp__digitalocean__list_apps directly and return the results.

USE ONLY THESE FUNCTIONS. NO EXCEPTIONS."""
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–º–∞–Ω–¥—ã
                allowed_tools = []
                if "apps" in command.lower() or "digitalocean" in command.lower():
                    # –¢–æ–ª—å–∫–æ DigitalOcean –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
                    allowed_tools = [
                        "mcp__digitalocean__list_apps", 
                        "mcp__digitalocean__get_app", 
                        "mcp__digitalocean__create_app", 
                        "mcp__digitalocean__list_deployments",
                        "mcp__digitalocean__get_deployment",
                        "mcp__digitalocean__list_databases_cluster"
                    ]
                elif "project" in command.lower() or "supabase" in command.lower() or "/db" in command:
                    # –¢–æ–ª—å–∫–æ Supabase –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
                    allowed_tools = [
                        "mcp__supabase__list_projects", 
                        "mcp__supabase__get_project",
                        "mcp__supabase__execute_sql", 
                        "mcp__supabase__list_tables",
                        "mcp__supabase__list_organizations"
                    ]
                elif "doc" in command.lower() or "context7" in command.lower():
                    # –¢–æ–ª—å–∫–æ Context7 –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
                    allowed_tools = [
                        "mcp__context7__resolve-library-id", 
                        "mcp__context7__get-library-docs"
                    ]
                else:
                    # –ï—Å–ª–∏ –Ω–µ —É–≤–µ—Ä–µ–Ω—ã - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –Ω–∞–±–æ—Ä
                    allowed_tools = self._get_allowed_tools(command)
                
                # –°–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ (–≤—Å–µ Cloudflare —Ñ—É–Ω–∫—Ü–∏–∏)
                disallowed_tools = [
                    "mcp__cloudflare__*",  # –ë–ª–æ–∫–∏—Ä—É–µ–º –≤—Å–µ Cloudflare —Ñ—É–Ω–∫—Ü–∏–∏
                    "mcp__cloudflare__worker_list",
                    "mcp__cloudflare__ai_inference",
                    "mcp__cloudflare__kv_get",
                    "mcp__cloudflare__r2_list_buckets",
                    "mcp__cloudflare__d1_list_databases",
                    "mcp__cloudflare__analytics_get",
                    "mcp__cloudflare__zones_list"
                ]
                
                # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏ –≤ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ
                task_management_tools = [
                    "TodoWrite", "Task", "ExitPlanMode", "WebSearch", "WebFetch",
                    "Read", "Write", "Edit", "MultiEdit", "Bash", "LS", "Grep", "Glob"
                ]
                
                if "apps" in command.lower():
                    # –î–ª—è –∫–æ–º–∞–Ω–¥—ã apps —Ä–∞–∑—Ä–µ—à–∞–µ–º –¢–û–õ–¨–ö–û list_apps
                    allowed_tools = ["mcp__digitalocean__list_apps"]
                    disallowed_tools.extend(task_management_tools)
                
                options = ClaudeCodeOptions(
                    max_turns=1,  # –û–¥–Ω–∞ –∏—Ç–µ—Ä–∞—Ü–∏—è –¥–ª—è –∫–æ–º–∞–Ω–¥—ã
                    system_prompt=system_prompt,
                    cwd=Path.cwd(),
                    allowed_tools=allowed_tools,  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
                    disallowed_tools=disallowed_tools,  # –ë–ª–æ–∫–∏—Ä—É–µ–º Cloudflare –∏ task management
                    mcp_servers=mcp_servers,  # –ü–µ—Ä–µ–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å–µ—Ä–≤–µ—Ä–æ–≤
                    permission_mode="acceptEdits"  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–Ω–∏–º–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
                )
            else:
                options = None
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π SDK –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
            if CLAUDE_CODE_SDK_AVAILABLE:
                try:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç–æ—è—â–∏–π SDK
                    logger.info("üöÄ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π Claude Code SDK")
                    messages: List[Message] = []
                    
                    try:
                        async for message in query(prompt=prompt, options=options):
                            messages.append(message)
                            # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –≤—ã–≤–æ–¥ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                            msg_type = type(message).__name__
                            msg_role = getattr(message, 'role', 'No role')
                            msg_content = str(getattr(message, 'content', ''))[:100] if hasattr(message, 'content') else 'No content'
                            logger.debug(f"üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {msg_type} - {msg_role} - {msg_content}...")
                            
                            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏—è
                            if len(messages) > 50:
                                logger.warning("‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç SDK, –ø—Ä–µ—Ä—ã–≤–∞–µ–º")
                                break
                                
                    except json.JSONDecodeError as e:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON –æ—Ç SDK: {e}")
                        logger.warning("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º —á–∞—Å—Ç–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
                        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å —Ç–µ–º, —á—Ç–æ —É—Å–ø–µ–ª–∏ –ø–æ–ª—É—á–∏—Ç—å
                        
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    result = self._process_messages(messages, command)
                except Exception as sdk_error:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ SDK: {sdk_error}")
                    # –ë–æ–ª—å—à–µ –Ω–µ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —ç–º—É–ª—è—Ü–∏—é - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É
                    result = {
                        "success": False,
                        "command": command,
                        "error": f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è MCP: {str(sdk_error)}"
                    }
            else:
                # SDK –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É
                logger.error("‚ùå Claude Code SDK –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                result = {
                    "success": False,
                    "command": command,
                    "error": "Claude Code SDK –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
                }
            
            return result
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è MCP –∫–æ–º–∞–Ω–¥—ã: {e}")
            return {
                "success": False,
                "error": str(e)
            }
    
    def _format_mcp_prompt(self, command: str) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∫–æ–º–∞–Ω–¥—É –≤ –ø—Ä–æ–º–ø—Ç –¥–ª—è Claude Code –∏—Å–ø–æ–ª—å–∑—É—è YAML –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        
        Args:
            command: –ò—Å—Ö–æ–¥–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞
            
        Returns:
            –ü—Ä–æ–º–ø—Ç –¥–ª—è SDK
        """
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –º–∞–ø–ø–∏–Ω–≥–∏ –∏–∑ YAML
        if self.sdk_prompts and 'command_mappings' in self.sdk_prompts:
            mappings = self.sdk_prompts['command_mappings']
            
            # –ò—â–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∏–ª–∏ –ø—Ä–µ—Ñ–∏–∫—Å –∫–æ–º–∞–Ω–¥—ã
            for cmd_pattern, cmd_config in mappings.items():
                if command.startswith(cmd_pattern):
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º fallback –¥–ª—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
                    if 'fallback_response' in cmd_config:
                        return cmd_config['fallback_response']
                    else:
                        return cmd_config.get('prompt', f"Execute MCP command: {command}")
        
        # Fallback –Ω–∞ —Å—Ç–∞—Ä—É—é –ª–æ–≥–∏–∫—É
        return self._get_legacy_mcp_prompt(command)
    
    def _get_legacy_mcp_prompt(self, command: str) -> str:
        """–°—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º–ø—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
        # –ü–∞—Ä—Å–∏–º –∫–æ–º–∞–Ω–¥—É
        parts = command.strip().split()
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∫–æ–º–∞–Ω–¥
        if command.startswith("/mcp status"):
            return "Check the status of all MCP servers and list available functions"
            
        elif command.startswith("/mcp projects"):
            return "List all Supabase projects using MCP"
            
        elif command.startswith("/mcp organizations"):
            return "List all Supabase organizations using MCP"
            
        elif command.startswith("/db "):
            sql_query = command[4:].strip()
            return f"Execute SQL query using Supabase MCP: {sql_query}"
            
        elif command.startswith("/mcp apps"):
            return "List all DigitalOcean apps. You MUST use the mcp__digitalocean__list_apps function. This is a DigitalOcean operation, not Cloudflare. Return the full list of apps with their names, status, and other details."
        
        elif command.startswith("/mcp digitalocean"):
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã DigitalOcean
            sub_command = command[17:].strip()
            if sub_command == "list apps" or sub_command == "apps":
                return "Use mcp__digitalocean__list_apps to get all DigitalOcean applications."
            elif sub_command.startswith("deployments"):
                return "Use mcp__digitalocean__list_deployments to get deployment history."
            else:
                return f"Execute DigitalOcean MCP command: {sub_command}"
            
        elif command.startswith("/docs "):
            parts = command[6:].strip().split(maxsplit=1)
            if len(parts) >= 2:
                library, query = parts[0], parts[1]
                return f"Search documentation for {library} about: {query}"
            else:
                return f"Search documentation for: {parts[0]}"
                
        elif command.startswith("/mcp context7"):
            query = command[13:].strip()
            return f"Search Context7 documentation: {query}"
            
        elif command.startswith("/voice"):
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥
            voice_text = command[6:].strip()
            return self._format_voice_mcp_prompt(voice_text)
            
        else:
            # –û–±—â–∏–π —Å–ª—É—á–∞–π
            return f"Execute MCP command: {command}"
    
    def _format_voice_mcp_prompt(self, voice_text: str) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≥–æ–ª–æ—Å–æ–≤–æ–π —Ç–µ–∫—Å—Ç –≤ –ø—Ä–æ–º–ø—Ç –¥–ª—è Claude Code –∏—Å–ø–æ–ª—å–∑—É—è YAML –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        
        Args:
            voice_text: –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≥–æ–ª–æ—Å–æ–≤–æ–π —Ç–µ–∫—Å—Ç
            
        Returns:
            –ü—Ä–æ–º–ø—Ç –¥–ª—è SDK —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        """
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ YAML –∏–ª–∏ fallback –Ω–∞ —Å—Ç–∞—Ä—ã–π –ø—Ä–æ–º–ø—Ç
        if self.voice_prompts and 'voice_commands' in self.voice_prompts:
            voice_config = self.voice_prompts['voice_commands']
            system_prompt = voice_config.get('system_prompt', '')
            scenarios = voice_config.get('scenarios', [])
            default_response = voice_config.get('default_response', '')
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –∏–∑ YAML –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            prompt_parts = [system_prompt]
            prompt_parts.append(f'\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–∫–∞–∑–∞–ª: "{voice_text}"\n')
            prompt_parts.append("–û–ø—Ä–µ–¥–µ–ª–∏ –Ω–∞–º–µ—Ä–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤—ã–ø–æ–ª–Ω–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:\n")
            
            for i, scenario in enumerate(scenarios, 1):
                triggers = ", ".join([f'"{t}"' for t in scenario.get('triggers', [])])
                action = scenario.get('action', '')
                fallback = scenario.get('fallback_message', '')
                
                prompt_parts.append(f"{i}. **{scenario.get('name', '')}** - —Ç—Ä–∏–≥–≥–µ—Ä—ã: {triggers}")
                if action and not fallback:
                    prompt_parts.append(f"   - –ò—Å–ø–æ–ª—å–∑—É–π {action}")
                elif fallback:
                    prompt_parts.append(f"   - –í–µ—Ä–Ω–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ: {fallback}")
                prompt_parts.append("")
            
            prompt_parts.append(default_response)
            
            return "\n".join(prompt_parts)
        else:
            # Fallback –Ω–∞ —Å—Ç–∞—Ä—ã–π –ø—Ä–æ–º–ø—Ç –µ—Å–ª–∏ YAML –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω
            return self._get_legacy_voice_prompt(voice_text)
    
    def _get_legacy_voice_prompt(self, voice_text: str) -> str:
        """–°—Ç–∞—Ä—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
        return f"""–¢—ã –≥–æ–ª–æ—Å–æ–≤–æ–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π —á–µ—Ä–µ–∑ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —è–∑—ã–∫.

–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–∫–∞–∑–∞–ª: "{voice_text}"

–û–ø—Ä–µ–¥–µ–ª–∏ –Ω–∞–º–µ—Ä–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤—ã–ø–æ–ª–Ω–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:

1. **–ï—Å–ª–∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è—Ö** (–Ω–∞–ø—Ä–∏–º–µ—Ä: "–ø–æ—Å–º–æ—Ç—Ä–∏ –º–æ–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è", "–∫–∞–∫–∏–µ —É –º–µ–Ω—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ DigitalOcean", "—Å–ø–∏—Å–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π"):
   - –ò—Å–ø–æ–ª—å–∑—É–π mcp__digitalocean__list_apps
   - –í–µ—Ä–Ω–∏ —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏, ID –∏ —Ä–µ–≥–∏–æ–Ω–∞–º–∏

2. **–ï—Å–ª–∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏** (–Ω–∞–ø—Ä–∏–º–µ—Ä: "–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ sample-aspnetapp"):
   - –ò–∑–≤–ª–µ–∫–∏ –∏–º—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏–∑ —Ç–µ–∫—Å—Ç–∞
   - –ò—Å–ø–æ–ª—å–∑—É–π mcp__digitalocean__get_app —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏

3. **–ï—Å–ª–∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –æ –¥–µ–ø–ª–æ–π–º–µ–Ω—Ç–∞—Ö** (–Ω–∞–ø—Ä–∏–º–µ—Ä: "–ø–æ—Å–º–æ—Ç—Ä–∏ –¥–µ–ø–ª–æ–π–º–µ–Ω—Ç—ã", "–∏—Å—Ç–æ—Ä–∏—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–π"):
   - –ò—Å–ø–æ–ª—å–∑—É–π mcp__digitalocean__list_deployments
   - –ü–æ–∫–∞–∂–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–µ–ø–ª–æ–π–º–µ–Ω—Ç—ã

4. **–ï—Å–ª–∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –æ –±–∞–∑–∞—Ö –¥–∞–Ω–Ω—ã—Ö** (–Ω–∞–ø—Ä–∏–º–µ—Ä: "–ø–æ—Å–º–æ—Ç—Ä–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö", "–∫–∞–∫–∏–µ —É –º–µ–Ω—è –±–∞–∑—ã –≤ DigitalOcean"):
   - –ò—Å–ø–æ–ª—å–∑—É–π mcp__digitalocean__list_databases_cluster

–í–ê–ñ–ù–û: –í–µ—Ä–Ω–∏ –æ—Ç–≤–µ—Ç –≤ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –¥–ª—è Telegram —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —ç–º–æ–¥–∑–∏ –∏ –ø–æ–Ω—è—Ç–Ω–æ–≥–æ —è–∑—ã–∫–∞.

–ü—Ä–∏–º–µ—Ä—ã —Ö–æ—Ä–æ—à–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤:
üìÅ **–í–∞—à–∏ DigitalOcean –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:**
üì¶ **sample-aspnetapp**
  üÜî ID: `6eb5ebe0-c0aa-4b98-9ee1-a4e471069702`
  üåç –†–µ–≥–∏–æ–Ω: ams

–ï—Å–ª–∏ –Ω–µ –ø–æ–Ω—è–ª –∑–∞–ø—Ä–æ—Å - –≤–µ–∂–ª–∏–≤–æ –ø–æ–ø—Ä–æ—Å–∏ —É—Ç–æ—á–Ω–∏—Ç—å."""

    def _get_system_prompt(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è Claude Code –∏–∑ YAML –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–º–ø—Ç –∏–∑ YAML –∏–ª–∏ fallback
        if self.sdk_prompts and 'system_prompt' in self.sdk_prompts:
            return self.sdk_prompts['system_prompt']
        else:
            # Fallback –Ω–∞ —Å—Ç–∞—Ä—ã–π –ø—Ä–æ–º–ø—Ç
            return """You are an MCP assistant that helps execute commands through Model Context Protocol servers.

Available MCP servers:
1. DigitalOcean - for app management and deployments (mcp__digitalocean__*)
2. Supabase - for database operations and project management (mcp__supabase__*)
3. Context7 - for documentation search (mcp__context7__*)

IMPORTANT RULES:
- NEVER use mcp__cloudflare__* functions - they are NOT available
- Only use functions from the three servers listed above
- Match the server to the task (apps = DigitalOcean, database = Supabase, docs = Context7)

When executing commands:
- Use the appropriate MCP tool based on the command
- Format responses clearly and concisely
- Include relevant data from the MCP response
- Handle errors gracefully
- Return structured data when possible

For voice commands (/voice prefix), understand natural language and execute the appropriate MCP operation.

Important: Execute the requested MCP operation and return the result."""
    
    def _get_allowed_tools(self, command: str) -> List[str]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã –∏—Å–ø–æ–ª—å–∑—É—è YAML –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        
        Args:
            command: –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            
        Returns:
            –°–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        """
        tools = []
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –º–∞–ø–ø–∏–Ω–≥–∏ –∫–æ–º–∞–Ω–¥ –∏–∑ YAML
        if self.sdk_prompts and 'command_mappings' in self.sdk_prompts:
            mappings = self.sdk_prompts['command_mappings']
            
            # –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â—É—é –∫–æ–º–∞–Ω–¥—É
            for cmd_pattern, cmd_config in mappings.items():
                if command.startswith(cmd_pattern):
                    cmd_tools = cmd_config.get('tools', [])
                    tools.extend(cmd_tools)
                    break
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤ –º–∞–ø–ø–∏–Ω–≥–∞—Ö, –∏—Å–ø–æ–ª—å–∑—É–µ–º allowed_tools –∏–∑ YAML
        if not tools and self.sdk_prompts and 'allowed_tools' in self.sdk_prompts:
            allowed = self.sdk_prompts['allowed_tools']
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–æ–π —Å–µ—Ä–≤–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
            if any(word in command.lower() for word in ['app', 'deploy', 'droplet', 'database', 'digitalocean', 'do']):
                # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã DigitalOcean
                for category in allowed.get('digitalocean', {}).values():
                    if isinstance(category, list):
                        tools.extend(category)
            
            if any(word in command.lower() for word in ['project', 'supabase', 'sql', 'db']):
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã Supabase
                for category in allowed.get('supabase', {}).values():
                    if isinstance(category, list):
                        tools.extend(category)
            
            if any(word in command.lower() for word in ['doc', 'context7', 'library']):
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã Context7
                for category in allowed.get('context7', {}).values():
                    if isinstance(category, list):
                        tools.extend(category)
        
        # Fallback –Ω–∞ —Å—Ç–∞—Ä—É—é –ª–æ–≥–∏–∫—É –µ—Å–ª–∏ YAML –Ω–µ –ø–æ–º–æ–≥
        if not tools:
            return self._get_legacy_allowed_tools(command)
            
        return list(set(tools))  # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    
    def _get_legacy_allowed_tools(self, command: str) -> List[str]:
        """–°—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
        # –ë–∞–∑–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥
        tools = ["mcp"]
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
        if "/db" in command or "sql" in command.lower():
            tools.extend(["mcp__supabase__execute_sql", "mcp__supabase__list_tables"])
        
        if "project" in command.lower():
            tools.extend(["mcp__supabase__list_projects", "mcp__supabase__get_project"])
            
        if "app" in command.lower() or "digitalocean" in command.lower():
            tools.extend(["mcp__digitalocean__list_apps", "mcp__digitalocean__get_app"])
            
        if "doc" in command.lower() or "context7" in command.lower():
            tools.extend(["mcp__context7__resolve-library-id", "mcp__context7__get-library-docs"])
            
        return tools
    
    def _process_messages(self, messages: List[Message], command: str) -> Dict[str, Any]:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç Claude Code SDK
        
        Args:
            messages: –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç SDK
            command: –ò—Å—Ö–æ–¥–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞
            
        Returns:
            –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        """
        if not messages:
            return {
                "success": False,
                "error": "–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç Claude Code"
            }
        
        # –ò—â–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è MCP
        result_data = None
        error_message = None
        mcp_result_text = None
        
        for message in messages:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º tool_result –≤ UserMessage
            if hasattr(message, 'content') and isinstance(message.content, list):
                for item in message.content:
                    if isinstance(item, dict) and item.get('type') == 'tool_result':
                        content = item.get('content', '')
                        logger.debug(f"üîß Tool result: content='{content[:100]}...', is_error={item.get('is_error')}")
                        
                        if item.get('is_error'):
                            # –û—Å–æ–±—ã–π —Å–ª—É—á–∞–π –¥–ª—è "No apps found" - —ç—Ç–æ –Ω–µ –æ—à–∏–±–∫–∞
                            if "No apps found" in content:
                                mcp_result_text = "üìÅ **DigitalOcean Apps**\n\n‚ÑπÔ∏è –ù–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –≤ –≤–∞—à–µ–º –∞–∫–∫–∞—É–Ω—Ç–µ DigitalOcean."
                                logger.debug(f"üéØ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω mcp_result_text: {mcp_result_text}")
                            else:
                                error_message = content
                        else:
                            result_data = content
                            logger.debug(f"üîß Processing result_data: {type(content)} - {content}")
                            
                            if isinstance(content, list) and content:
                                # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–∏—Å–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ—Ç MCP
                                for item in content:
                                    if isinstance(item, dict) and item.get('type') == 'text' and item.get('text'):
                                        text_content = item['text']
                                        logger.debug(f"üîß Processing text content: {text_content}")
                                        
                                        # –ü–∞—Ä—Å–∏–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç
                                        lines = text_content.strip().split('\n')
                                        apps_list = []
                                        
                                        for line in lines:
                                            line = line.strip()
                                            if line and 'App ID:' in line and 'Name:' in line:
                                                # –§–æ—Ä–º–∞—Ç: "App ID: 6eb5ebe0-c0aa-4b98-9ee1-a4e471069702 Name: sample-aspnetapp Region: ams"
                                                try:
                                                    # –ò—â–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
                                                    app_id = None
                                                    name = None
                                                    region = None
                                                    
                                                    if 'App ID:' in line:
                                                        app_id_part = line.split('App ID:')[1].split('Name:')[0].strip()
                                                        app_id = app_id_part.strip()
                                                    if 'Name:' in line:
                                                        name_part = line.split('Name:')[1].split('Region:')[0].strip()
                                                        name = name_part.strip()
                                                    if 'Region:' in line:
                                                        region_part = line.split('Region:')[1].strip()
                                                        region = region_part.strip()
                                                    
                                                    if app_id and name:
                                                        apps_list.append({
                                                            'id': app_id,
                                                            'name': name,
                                                            'region': region or 'N/A'
                                                        })
                                                except Exception as e:
                                                    logger.debug(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç—Ä–æ–∫–∏ '{line}': {e}")
                                        
                                        if apps_list:
                                            mcp_result_text = "üìÅ **DigitalOcean Apps**\n\n"
                                            for app in apps_list:
                                                mcp_result_text += f"üì¶ **{app['name']}**\n"
                                                mcp_result_text += f"  üÜî ID: `{app['id']}`\n"
                                                mcp_result_text += f"  üåç –†–µ–≥–∏–æ–Ω: {app['region']}\n\n"
                                            logger.debug(f"‚úÖ –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {mcp_result_text[:100]}...")
                                        elif "No apps found" in text_content:
                                            mcp_result_text = "üìÅ **DigitalOcean Apps**\n\n‚ÑπÔ∏è –ù–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –≤ –≤–∞—à–µ–º –∞–∫–∫–∞—É–Ω—Ç–µ DigitalOcean."
                                        else:
                                            mcp_result_text = text_content
                                        
                                        break  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç
                            elif isinstance(content, str) and content:
                                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –Ω–∞–ø—Ä—è–º—É—é
                                lines = content.strip().split('\n')
                                apps_list = []
                                
                                # –ü–∞—Ä—Å–∏–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç
                                current_app = {}
                                for line in lines:
                                    line = line.strip()
                                    if line.startswith('App ID:') and 'Name:' in line:
                                        # –§–æ—Ä–º–∞—Ç: "App ID: 6eb5ebe0-c0aa-4b98-9ee1-a4e471069702 Name: sample-aspnetapp Region: ams"
                                        parts = line.split()
                                        if len(parts) >= 6:
                                            app_id = parts[2] if len(parts) > 2 else 'N/A'
                                            name = parts[4] if len(parts) > 4 else 'Unknown'
                                            region = parts[6] if len(parts) > 6 else 'N/A'
                                            apps_list.append({
                                                'id': app_id,
                                                'name': name,
                                                'region': region
                                            })
                                
                                if apps_list:
                                    mcp_result_text = "üìÅ **DigitalOcean Apps**\n\n"
                                    for app in apps_list:
                                        mcp_result_text += f"üì¶ **{app['name']}**\n"
                                        mcp_result_text += f"  üÜî ID: `{app['id']}`\n"
                                        mcp_result_text += f"  üåç –†–µ–≥–∏–æ–Ω: {app['region']}\n\n"
                                else:
                                    # –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
                                    if "No apps found" in content or "–Ω–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π" in content.lower():
                                        mcp_result_text = "üìÅ **DigitalOcean Apps**\n\n‚ÑπÔ∏è –ù–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –≤ –≤–∞—à–µ–º –∞–∫–∫–∞—É–Ω—Ç–µ DigitalOcean."
                                    else:
                                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç
                                        mcp_result_text = content
                        
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –æ—à–∏–±–∫–∏
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞—Ç—Ä–∏–±—É—Ç–∞ role (–º–æ–∂–µ—Ç –±—ã—Ç—å SystemMessage –±–µ–∑ role)
            if hasattr(message, 'role') and message.role == "assistant" and hasattr(message, 'content') and message.content:
                content_lower = message.content.lower()
                if "error" in content_lower or "failed" in content_lower:
                    error_message = message.content
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–π –æ—Ç–≤–µ—Ç
        assistant_messages = [m for m in messages if hasattr(m, 'role') and m.role == "assistant" and hasattr(m, 'content') and m.content]
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º content, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π –∏–ª–∏ —Å–ø–∏—Å–∫–æ–º –±–ª–æ–∫–æ–≤
        response_text = None
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç MCP, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
        if mcp_result_text:
            logger.debug(f"üéØ –ò—Å–ø–æ–ª—å–∑—É–µ–º MCP —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {mcp_result_text[:100]}...")
            response_text = mcp_result_text
        elif assistant_messages:
            last_msg = assistant_messages[-1]
            if isinstance(last_msg.content, str) and last_msg.content.strip():
                response_text = last_msg.content.strip()
            elif isinstance(last_msg.content, list):
                # –°–æ–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –±–ª–æ–∫–æ–≤
                text_parts = []
                for block in last_msg.content:
                    if hasattr(block, 'text') and block.text:
                        text_parts.append(block.text)
                    elif isinstance(block, dict) and block.get('text'):
                        text_parts.append(block['text'])
                response_text = '\n'.join(text_parts) if text_parts else None
        
        # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if not response_text:
            response_text = "–ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞"
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å –±–æ–ª—å—à–∏–º–∏ JSON
        MAX_RESPONSE_LENGTH = 4000  # Telegram limit
        if len(response_text) > MAX_RESPONSE_LENGTH:
            response_text = response_text[:MAX_RESPONSE_LENGTH-100] + "\n\n... (–æ—Ç–≤–µ—Ç –æ–±—Ä–µ–∑–∞–Ω)"
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å - –µ—Å–ª–∏ –µ—Å—Ç—å mcp_result_text, —ç—Ç–æ —É—Å–ø–µ—Ö
        success = bool(mcp_result_text) or (not error_message)
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º response_text –∫–∞–∫ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
        logger.debug(f"üìä Final response: {response_text[:200]}...")
        
        return {
            "success": success,
            "command": command,
            "response": response_text,
            "data": result_data,
            "error": error_message if not response_text or response_text == "–ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞" else None,
            "message_count": len(messages)
        }
    
    async def test_connection(self) -> Dict[str, Any]:
        """
        –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MCP —Å–µ—Ä–≤–µ—Ä–∞–º
        
        Returns:
            –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        """
        if not self.enabled:
            return {
                "success": False,
                "enabled": False,
                "error": "–°–µ—Ä–≤–∏—Å –æ—Ç–∫–ª—é—á–µ–Ω"
            }
            
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ MCP
            mcp_config_exists = self.mcp_config_path.exists()
            
            # –ü—Ä–æ–±—É–µ–º –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ—Å—Ç—É—é –∫–æ–º–∞–Ω–¥—É
            result = await self.execute_mcp_command("/mcp status")
            
            return {
                "success": result.get("success", False),
                "enabled": True,
                "mcp_config_exists": mcp_config_exists,
                "api_key_set": bool(self.api_key),
                "test_result": result
            }
            
        except Exception as e:
            return {
                "success": False,
                "enabled": True,
                "error": str(e)
            }
    
    async def _emulate_mcp_command(self, command: str) -> Dict[str, Any]:
        """
        –≠–º—É–ª–∏—Ä—É–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ MCP –∫–æ–º–∞–Ω–¥ –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ SDK
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
        """
        # –ü–∞—Ä—Å–∏–º –∫–æ–º–∞–Ω–¥—É
        parts = command.strip().split()
        
        if command.startswith("/mcp status"):
            return {
                "success": True,
                "command": command,
                "response": """üîå **MCP Status**

**Configured Servers:**
- ‚úÖ **Supabase** - Database management (ENABLED)
- ‚úÖ **DigitalOcean** - Infrastructure & deployments (ENABLED)  
- ‚úÖ **Context7** - Documentation search (ENABLED)

**Available Commands:**
- `/mcp status` - Check MCP servers status
- `/mcp projects` - List Supabase projects
- `/db <query>` - Execute SQL query
- `/mcp apps` - List DigitalOcean apps
- `/docs <library> <query>` - Search documentation

‚ö†Ô∏è **Note:** Running in emulation mode (SDK not installed)""",
                "data": {
                    "servers": {
                        "supabase": {"enabled": config.mcp.supabase_enabled},
                        "digitalocean": {"enabled": config.mcp.digitalocean_enabled},
                        "context7": {"enabled": config.mcp.context7_enabled}
                    }
                },
                "message_count": 1
            }
        
        elif command.startswith("/mcp projects"):
            return {
                "success": True,
                "command": command,
                "response": """üóÑÔ∏è **Supabase Projects** (Emulated)

1. **artem-integrator-prod**
   - Region: us-east-1
   - Status: Active
   - Database: PostgreSQL 15
   
2. **artem-integrator-dev**
   - Region: us-east-1
   - Status: Active
   - Database: PostgreSQL 15

‚ö†Ô∏è This is emulated data for testing""",
                "data": None,
                "message_count": 1
            }
        
        elif command.startswith("/db "):
            sql_query = command[4:].strip()
            return {
                "success": True,
                "command": command,
                "response": f"""üóÑÔ∏è **SQL Query Execution** (Emulated)

Query: `{sql_query}`

Result:
```
PostgreSQL 15.2 on x86_64-pc-linux-gnu
(1 row)
```

‚ö†Ô∏è This is emulated response for testing""",
                "data": None,
                "message_count": 1
            }
        
        elif command.startswith("/mcp apps"):
            return {
                "success": True,
                "command": command,
                "response": """üåä **DigitalOcean Apps** (Emulated)

1. **artem-integrator**
   - Status: Active
   - Region: FRA1
   - Last Deploy: 2 hours ago
   
2. **artem-admin-panel**
   - Status: Active
   - Region: NYC1
   - Last Deploy: 1 day ago

‚ö†Ô∏è This is emulated data for testing""",
                "data": None,
                "message_count": 1
            }
        
        elif command.startswith("/docs "):
            parts = command[6:].strip().split(maxsplit=1)
            library = parts[0] if parts else "unknown"
            query = parts[1] if len(parts) > 1 else ""
            
            return {
                "success": True,
                "command": command,
                "response": f"""üìö **Documentation Search** (Emulated)

Library: **{library}**
Query: **{query}**

Found 3 results:
1. **{library} - Getting Started**
   Basic introduction to {library}
   
2. **{library} - API Reference**
   Complete API documentation
   
3. **{library} - {query} Guide**
   Detailed guide about {query}

‚ö†Ô∏è This is emulated response for testing""",
                "data": None,
                "message_count": 1
            }
        
        else:
            return {
                "success": False,
                "command": command,
                "response": f"‚ùå Unknown command: {command}",
                "error": "Command not recognized in emulation mode",
                "message_count": 1
            }


# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
claude_code_service = ClaudeCodeService()