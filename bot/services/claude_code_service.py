"""
Claude Code Service - –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Claude Code SDK –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è MCP –∫–æ–º–∞–Ω–¥

–≠—Ç–æ—Ç —Å–µ—Ä–≤–∏—Å –ø–æ–∑–≤–æ–ª—è–µ—Ç –±–æ—Ç—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å MCP —Å–µ—Ä–≤–µ—Ä—ã —á–µ—Ä–µ–∑ Claude Code SDK.
"""

import logging
import json
import os
from typing import Optional, Dict, Any, List, AsyncIterator
from pathlib import Path
import asyncio
import anyio

try:
    from claude_code_sdk import query, ClaudeCodeOptions, Message
    CLAUDE_CODE_SDK_AVAILABLE = True
except ImportError:
    logger = logging.getLogger(__name__)
    logger.warning("‚ö†Ô∏è claude-code-sdk –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –†–∞–±–æ—Ç–∞–µ–º –≤ —Ä–µ–∂–∏–º–µ —ç–º—É–ª—è—Ü–∏–∏")
    CLAUDE_CODE_SDK_AVAILABLE = False
    # –≠–º—É–ª—è—Ü–∏—è –∫–ª–∞—Å—Å–æ–≤ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    class Message:
        def __init__(self, role: str, content: str):
            self.role = role
            self.content = content
            self.tool_calls = []
    
    class ClaudeCodeOptions:
        def __init__(self, **kwargs):
            pass

from ..core.config import config

logger = logging.getLogger(__name__)


class ClaudeCodeService:
    """
    –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Claude Code SDK –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è MCP –∫–æ–º–∞–Ω–¥
    """
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞"""
        self.enabled = config.mcp.enabled and config.anthropic.enabled
        self.api_key = config.anthropic.api_key
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –µ—Å–ª–∏ –æ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        local_config = Path(__file__).parent.parent.parent / "data" / "mcp-servers-local.json"
        default_config = Path(__file__).parent.parent.parent / "data" / "mcp-servers.json"
        self.mcp_config_path = local_config if local_config.exists() else default_config
        
        if not self.enabled:
            logger.warning("‚ö†Ô∏è Claude Code Service –æ—Ç–∫–ª—é—á–µ–Ω: MCP –∏–ª–∏ Anthropic –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
            return
            
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è SDK
        if self.api_key:
            os.environ["ANTHROPIC_API_KEY"] = self.api_key
            
        logger.info("‚úÖ Claude Code Service –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
    async def execute_mcp_command(
        self, 
        command: str, 
        user_id: Optional[str] = None
    ) -> Dict[str, Any]:
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç MCP –∫–æ–º–∞–Ω–¥—É —á–µ—Ä–µ–∑ Claude Code SDK
        
        Args:
            command: –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: "/mcp status")
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            
        Returns:
            Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        """
        if not self.enabled:
            return {
                "success": False,
                "error": "MCP —Å–µ—Ä–≤–∏—Å –æ—Ç–∫–ª—é—á–µ–Ω"
            }
            
        try:
            logger.info(f"üîß –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ MCP –∫–æ–º–∞–Ω–¥—ã: {command} (user: {user_id})")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è Claude Code
            prompt = self._format_mcp_prompt(command)
            
            # –û–ø—Ü–∏–∏ –¥–ª—è SDK
            if CLAUDE_CODE_SDK_AVAILABLE:
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é MCP —Å–µ—Ä–≤–µ—Ä–æ–≤
                mcp_servers = {}
                if self.mcp_config_path.exists():
                    try:
                        with open(self.mcp_config_path) as f:
                            mcp_config = json.load(f)
                            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ —Ñ–æ—Ä–º–∞—Ç SDK
                            for server_name, server_config in mcp_config.get("mcpServers", {}).items():
                                mcp_servers[server_name] = {
                                    "command": server_config.get("command", ""),
                                    "args": server_config.get("args", []),
                                    "env": server_config.get("env", {})
                                }
                    except Exception as e:
                        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å MCP –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é: {e}")
                
                options = ClaudeCodeOptions(
                    max_turns=1,  # –û–¥–Ω–∞ –∏—Ç–µ—Ä–∞—Ü–∏—è –¥–ª—è –∫–æ–º–∞–Ω–¥—ã
                    system_prompt=self._get_system_prompt(),
                    cwd=Path.cwd(),
                    allowed_tools=self._get_allowed_tools(command),
                    mcp_servers=mcp_servers,  # –ü–µ—Ä–µ–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å–µ—Ä–≤–µ—Ä–æ–≤
                    mcp_tools=["*"],  # –†–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ MCP –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
                    permission_mode="acceptEdits"  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–Ω–∏–º–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
                )
            else:
                options = None
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π SDK –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
            if CLAUDE_CODE_SDK_AVAILABLE:
                try:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç–æ—è—â–∏–π SDK
                    logger.info("üöÄ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π Claude Code SDK")
                    messages: List[Message] = []
                    
                    try:
                        async for message in query(prompt=prompt, options=options):
                            messages.append(message)
                            # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –≤—ã–≤–æ–¥ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                            msg_type = type(message).__name__
                            msg_role = getattr(message, 'role', 'No role')
                            msg_content = str(getattr(message, 'content', ''))[:100] if hasattr(message, 'content') else 'No content'
                            logger.debug(f"üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {msg_type} - {msg_role} - {msg_content}...")
                            
                            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏—è
                            if len(messages) > 50:
                                logger.warning("‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç SDK, –ø—Ä–µ—Ä—ã–≤–∞–µ–º")
                                break
                                
                    except json.JSONDecodeError as e:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON –æ—Ç SDK: {e}")
                        logger.warning("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º —á–∞—Å—Ç–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
                        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å —Ç–µ–º, —á—Ç–æ —É—Å–ø–µ–ª–∏ –ø–æ–ª—É—á–∏—Ç—å
                        
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    result = self._process_messages(messages, command)
                except Exception as sdk_error:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ SDK: {sdk_error}")
                    logger.warning("‚ö†Ô∏è –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —ç–º—É–ª—è—Ü–∏—é")
                    result = await self._emulate_mcp_command(command)
            else:
                # –†–µ–∂–∏–º —ç–º—É–ª—è—Ü–∏–∏ –±–µ–∑ SDK
                logger.warning("‚ö†Ô∏è SDK –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —Ä–∞–±–æ—Ç–∞–µ–º –≤ —Ä–µ–∂–∏–º–µ —ç–º—É–ª—è—Ü–∏–∏ MCP")
                result = await self._emulate_mcp_command(command)
            
            logger.info(f"‚úÖ MCP –∫–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ: {command}")
            return result
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è MCP –∫–æ–º–∞–Ω–¥—ã: {e}")
            return {
                "success": False,
                "error": str(e)
            }
    
    def _format_mcp_prompt(self, command: str) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∫–æ–º–∞–Ω–¥—É –≤ –ø—Ä–æ–º–ø—Ç –¥–ª—è Claude Code
        
        Args:
            command: –ò—Å—Ö–æ–¥–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞
            
        Returns:
            –ü—Ä–æ–º–ø—Ç –¥–ª—è SDK
        """
        # –ü–∞—Ä—Å–∏–º –∫–æ–º–∞–Ω–¥—É
        parts = command.strip().split()
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∫–æ–º–∞–Ω–¥
        if command.startswith("/mcp status"):
            return "Check the status of all MCP servers and list available functions"
            
        elif command.startswith("/mcp projects"):
            return "List all Supabase projects using MCP"
            
        elif command.startswith("/mcp organizations"):
            return "List all Supabase organizations using MCP"
            
        elif command.startswith("/db "):
            sql_query = command[4:].strip()
            return f"Execute SQL query using Supabase MCP: {sql_query}"
            
        elif command.startswith("/mcp apps"):
            return "List all DigitalOcean apps using MCP"
            
        elif command.startswith("/docs "):
            parts = command[6:].strip().split(maxsplit=1)
            if len(parts) >= 2:
                library, query = parts[0], parts[1]
                return f"Search documentation for {library} about: {query}"
            else:
                return f"Search documentation for: {parts[0]}"
                
        elif command.startswith("/mcp context7"):
            query = command[13:].strip()
            return f"Search Context7 documentation: {query}"
            
        else:
            # –û–±—â–∏–π —Å–ª—É—á–∞–π
            return f"Execute MCP command: {command}"
    
    def _get_system_prompt(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è Claude Code"""
        return """You are an MCP assistant that helps execute commands through Model Context Protocol servers.

Available MCP servers:
1. Supabase - for database operations and project management
2. DigitalOcean - for app management and deployments  
3. Context7 - for documentation search

When executing commands:
- Use the appropriate MCP tool based on the command
- Format responses clearly and concisely
- Include relevant data from the MCP response
- Handle errors gracefully
- Return structured data when possible

Important: Execute the requested MCP operation and return the result."""
    
    def _get_allowed_tools(self, command: str) -> List[str]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã
        
        Args:
            command: –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            
        Returns:
            –°–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        """
        # –ë–∞–∑–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥
        tools = ["mcp"]
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
        if "/db" in command or "sql" in command.lower():
            tools.extend(["mcp__supabase__execute_sql", "mcp__supabase__list_tables"])
        
        if "project" in command.lower():
            tools.extend(["mcp__supabase__list_projects", "mcp__supabase__get_project"])
            
        if "app" in command.lower() or "digitalocean" in command.lower():
            tools.extend(["mcp__digitalocean__list_apps", "mcp__digitalocean__get_app"])
            
        if "doc" in command.lower() or "context7" in command.lower():
            tools.extend(["mcp__context7__resolve-library-id", "mcp__context7__get-library-docs"])
            
        return tools
    
    def _process_messages(self, messages: List[Message], command: str) -> Dict[str, Any]:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç Claude Code SDK
        
        Args:
            messages: –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç SDK
            command: –ò—Å—Ö–æ–¥–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞
            
        Returns:
            –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        """
        if not messages:
            return {
                "success": False,
                "error": "–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç Claude Code"
            }
        
        # –ò—â–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è MCP
        result_data = None
        error_message = None
        
        for message in messages:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º tool_use —Å–æ–æ–±—â–µ–Ω–∏—è
            if hasattr(message, 'tool_calls') and message.tool_calls:
                for tool_call in message.tool_calls:
                    if tool_call.get('type') == 'tool_result':
                        result_data = tool_call.get('result')
                        
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –æ—à–∏–±–∫–∏
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞—Ç—Ä–∏–±—É—Ç–∞ role (–º–æ–∂–µ—Ç –±—ã—Ç—å SystemMessage –±–µ–∑ role)
            if hasattr(message, 'role') and message.role == "assistant" and hasattr(message, 'content') and message.content:
                content_lower = message.content.lower()
                if "error" in content_lower or "failed" in content_lower:
                    error_message = message.content
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–π –æ—Ç–≤–µ—Ç
        assistant_messages = [m for m in messages if hasattr(m, 'role') and m.role == "assistant" and hasattr(m, 'content') and m.content]
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º content, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π –∏–ª–∏ —Å–ø–∏—Å–∫–æ–º –±–ª–æ–∫–æ–≤
        response_text = "–ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞"
        if assistant_messages:
            last_msg = assistant_messages[-1]
            if isinstance(last_msg.content, str):
                response_text = last_msg.content
            elif isinstance(last_msg.content, list):
                # –°–æ–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –±–ª–æ–∫–æ–≤
                text_parts = []
                for block in last_msg.content:
                    if hasattr(block, 'text'):
                        text_parts.append(block.text)
                    elif isinstance(block, dict) and block.get('text'):
                        text_parts.append(block['text'])
                response_text = '\n'.join(text_parts) if text_parts else "–ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞"
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å –±–æ–ª—å—à–∏–º–∏ JSON
        MAX_RESPONSE_LENGTH = 4000  # Telegram limit
        if len(response_text) > MAX_RESPONSE_LENGTH:
            response_text = response_text[:MAX_RESPONSE_LENGTH-100] + "\n\n... (–æ—Ç–≤–µ—Ç –æ–±—Ä–µ–∑–∞–Ω)"
        
        return {
            "success": True if not error_message else False,
            "command": command,
            "response": response_text,
            "data": result_data,
            "error": error_message,
            "message_count": len(messages)
        }
    
    async def test_connection(self) -> Dict[str, Any]:
        """
        –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MCP —Å–µ—Ä–≤–µ—Ä–∞–º
        
        Returns:
            –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        """
        if not self.enabled:
            return {
                "success": False,
                "enabled": False,
                "error": "–°–µ—Ä–≤–∏—Å –æ—Ç–∫–ª—é—á–µ–Ω"
            }
            
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ MCP
            mcp_config_exists = self.mcp_config_path.exists()
            
            # –ü—Ä–æ–±—É–µ–º –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ—Å—Ç—É—é –∫–æ–º–∞–Ω–¥—É
            result = await self.execute_mcp_command("/mcp status")
            
            return {
                "success": result.get("success", False),
                "enabled": True,
                "mcp_config_exists": mcp_config_exists,
                "api_key_set": bool(self.api_key),
                "test_result": result
            }
            
        except Exception as e:
            return {
                "success": False,
                "enabled": True,
                "error": str(e)
            }
    
    async def _emulate_mcp_command(self, command: str) -> Dict[str, Any]:
        """
        –≠–º—É–ª–∏—Ä—É–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ MCP –∫–æ–º–∞–Ω–¥ –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ SDK
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
        """
        # –ü–∞—Ä—Å–∏–º –∫–æ–º–∞–Ω–¥—É
        parts = command.strip().split()
        
        if command.startswith("/mcp status"):
            return {
                "success": True,
                "command": command,
                "response": """üîå **MCP Status**

**Configured Servers:**
- ‚úÖ **Supabase** - Database management (ENABLED)
- ‚úÖ **DigitalOcean** - Infrastructure & deployments (ENABLED)  
- ‚úÖ **Context7** - Documentation search (ENABLED)

**Available Commands:**
- `/mcp status` - Check MCP servers status
- `/mcp projects` - List Supabase projects
- `/db <query>` - Execute SQL query
- `/mcp apps` - List DigitalOcean apps
- `/docs <library> <query>` - Search documentation

‚ö†Ô∏è **Note:** Running in emulation mode (SDK not installed)""",
                "data": {
                    "servers": {
                        "supabase": {"enabled": config.mcp.supabase_enabled},
                        "digitalocean": {"enabled": config.mcp.digitalocean_enabled},
                        "context7": {"enabled": config.mcp.context7_enabled}
                    }
                },
                "message_count": 1
            }
        
        elif command.startswith("/mcp projects"):
            return {
                "success": True,
                "command": command,
                "response": """üóÑÔ∏è **Supabase Projects** (Emulated)

1. **artem-integrator-prod**
   - Region: us-east-1
   - Status: Active
   - Database: PostgreSQL 15
   
2. **artem-integrator-dev**
   - Region: us-east-1
   - Status: Active
   - Database: PostgreSQL 15

‚ö†Ô∏è This is emulated data for testing""",
                "data": None,
                "message_count": 1
            }
        
        elif command.startswith("/db "):
            sql_query = command[4:].strip()
            return {
                "success": True,
                "command": command,
                "response": f"""üóÑÔ∏è **SQL Query Execution** (Emulated)

Query: `{sql_query}`

Result:
```
PostgreSQL 15.2 on x86_64-pc-linux-gnu
(1 row)
```

‚ö†Ô∏è This is emulated response for testing""",
                "data": None,
                "message_count": 1
            }
        
        elif command.startswith("/mcp apps"):
            return {
                "success": True,
                "command": command,
                "response": """üåä **DigitalOcean Apps** (Emulated)

1. **artem-integrator**
   - Status: Active
   - Region: FRA1
   - Last Deploy: 2 hours ago
   
2. **artem-admin-panel**
   - Status: Active
   - Region: NYC1
   - Last Deploy: 1 day ago

‚ö†Ô∏è This is emulated data for testing""",
                "data": None,
                "message_count": 1
            }
        
        elif command.startswith("/docs "):
            parts = command[6:].strip().split(maxsplit=1)
            library = parts[0] if parts else "unknown"
            query = parts[1] if len(parts) > 1 else ""
            
            return {
                "success": True,
                "command": command,
                "response": f"""üìö **Documentation Search** (Emulated)

Library: **{library}**
Query: **{query}**

Found 3 results:
1. **{library} - Getting Started**
   Basic introduction to {library}
   
2. **{library} - API Reference**
   Complete API documentation
   
3. **{library} - {query} Guide**
   Detailed guide about {query}

‚ö†Ô∏è This is emulated response for testing""",
                "data": None,
                "message_count": 1
            }
        
        else:
            return {
                "success": False,
                "command": command,
                "response": f"‚ùå Unknown command: {command}",
                "error": "Command not recognized in emulation mode",
                "message_count": 1
            }


# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
claude_code_service = ClaudeCodeService()