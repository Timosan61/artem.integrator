"""
YouTube Transcript Service –¥–ª—è Artyom Integrator

–°–µ—Ä–≤–∏—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π YouTube –≤–∏–¥–µ–æ.
–ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç .txt —Ñ–∞–π–ª —Å –ø–æ–ª–Ω–æ–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–µ–π.
"""

import logging
import re
from typing import Optional, Dict, Any
from datetime import datetime
import tempfile
import os

logger = logging.getLogger(__name__)


class YouTubeTranscriptService:
    """
    –°–µ—Ä–≤–∏—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π YouTube –≤–∏–¥–µ–æ
    """
    
    def __init__(self):
        self.supported_languages = ['ru', 'en', 'uk', 'es', 'fr', 'de', 'it', 'pt', 'ja', 'ko', 'zh']
        logger.info("‚úÖ YouTube Transcript Service –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def extract_video_id(self, url: str) -> Optional[str]:
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç ID –≤–∏–¥–µ–æ –∏–∑ YouTube URL
        
        Args:
            url: URL –≤–∏–¥–µ–æ
            
        Returns:
            str: ID –≤–∏–¥–µ–æ –∏–ª–∏ None
        """
        patterns = [
            r'(?:youtube\.com/watch\?v=|youtu\.be/|youtube\.com/embed/)([a-zA-Z0-9_-]{11})',
            r'youtube\.com/watch\?.*v=([a-zA-Z0-9_-]{11})',
            r'youtu\.be/([a-zA-Z0-9_-]{11})',
            r'youtube\.com/embed/([a-zA-Z0-9_-]{11})',
            r'youtube\.com/v/([a-zA-Z0-9_-]{11})',
            r'youtube\.com/watch\?.*v%3D([a-zA-Z0-9_-]{11})',
            r'youtube\.com/watch\?.*v=([a-zA-Z0-9_-]{11})',
            r'(?:m\.)?youtube\.com/watch\?.*v=([a-zA-Z0-9_-]{11})',
            r'(?:www\.)?youtube\.com/watch\?.*v=([a-zA-Z0-9_-]{11})',
        ]
        
        for pattern in patterns:
            match = re.search(pattern, url)
            if match:
                return match.group(1)
        
        # –ï—Å–ª–∏ —ç—Ç–æ —É–∂–µ video ID (11 —Å–∏–º–≤–æ–ª–æ–≤)
        if len(url) == 11 and re.match(r'^[a-zA-Z0-9_-]{11}$', url):
            return url
            
        return None
    
    def get_transcript(self, video_url: str, language: str = 'ru') -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –≤–∏–¥–µ–æ
        
        Args:
            video_url: URL –∏–ª–∏ ID –≤–∏–¥–µ–æ
            language: –ü—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π —è–∑—ã–∫ ('ru', 'en', –∏ —Ç.–¥.)
            
        Returns:
            Dict: –†–µ–∑—É–ª—å—Ç–∞—Ç —Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–µ–π –∏–ª–∏ –æ—à–∏–±–∫–æ–π
        """
        try:
            from youtube_transcript_api import YouTubeTranscriptApi
            from youtube_transcript_api.formatters import TextFormatter
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –≤–∏–¥–µ–æ
            video_id = self.extract_video_id(video_url)
            if not video_id:
                return {
                    'success': False,
                    'error': '–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å ID –≤–∏–¥–µ–æ –∏–∑ URL',
                    'url': video_url
                }
            
            logger.info(f"üé¨ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –¥–ª—è –≤–∏–¥–µ–æ: {video_id}")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —è–∑—ã–∫–æ–≤
            try:
                transcript_list = YouTubeTranscriptApi.list_transcripts(video_id)
                available_languages = [t.language_code for t in transcript_list]
                logger.info(f"üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —è–∑—ã–∫–∏: {available_languages}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤–æ–æ–±—â–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
                if not available_languages:
                    return {
                        'success': False,
                        'error': '–î–ª—è —ç—Ç–æ–≥–æ –≤–∏–¥–µ–æ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π',
                        'video_id': video_id,
                        'error_type': 'no_transcripts_available'
                    }
                
                # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –Ω–∞ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–æ–º —è–∑—ã–∫–µ
                transcript = None
                used_language = None
                
                # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
                if language in available_languages:
                    transcript = YouTubeTranscriptApi.get_transcript(video_id, languages=[language])
                    used_language = language
                    logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –Ω–∞ —è–∑—ã–∫–µ: {language}")
                
                # –ï—Å–ª–∏ –Ω–µ—Ç, –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Ä—É—Å—Å–∫—É—é
                elif 'ru' in available_languages and language != 'ru':
                    transcript = YouTubeTranscriptApi.get_transcript(video_id, languages=['ru'])
                    used_language = 'ru'
                    logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ")
                
                # –ï—Å–ª–∏ –Ω–µ—Ç —Ä—É—Å—Å–∫–æ–π, –±–µ—Ä–µ–º –∞–Ω–≥–ª–∏–π—Å–∫—É—é
                elif 'en' in available_languages:
                    transcript = YouTubeTranscriptApi.get_transcript(video_id, languages=['en'])
                    used_language = 'en'
                    logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ")
                
                # –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∏ —Ä—É—Å—Å–∫–æ–π, –Ω–∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–π, –±–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é
                elif available_languages:
                    first_lang = available_languages[0]
                    transcript = YouTubeTranscriptApi.get_transcript(video_id, languages=[first_lang])
                    used_language = first_lang
                    logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –Ω–∞ —è–∑—ã–∫–µ: {first_lang}")
                
                if not transcript:
                    return {
                        'success': False,
                        'error': '–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –≤–∏–¥–µ–æ',
                        'available_languages': available_languages,
                        'video_id': video_id
                    }
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é
                formatter = TextFormatter()
                text_formatted = formatter.format_transcript(transcript)
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ
                video_info = self._get_video_info(video_id)
                
                # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è —Ñ–∞–π–ª–∞
                header = f"–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è YouTube –≤–∏–¥–µ–æ\n"
                header += f"URL: https://www.youtube.com/watch?v={video_id}\n"
                if video_info.get('title'):
                    header += f"–ù–∞–∑–≤–∞–Ω–∏–µ: {video_info['title']}\n"
                if video_info.get('channel'):
                    header += f"–ö–∞–Ω–∞–ª: {video_info['channel']}\n"
                header += f"–Ø–∑—ã–∫ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {used_language}\n"
                header += f"–î–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∏—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n"
                header += f"{'='*50}\n\n"
                
                # –û–±—ä–µ–¥–∏–Ω—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é
                full_text = header + text_formatted
                
                return {
                    'success': True,
                    'text': full_text,
                    'language': used_language,
                    'video_id': video_id,
                    'video_info': video_info,
                    'available_languages': available_languages
                }
                
            except Exception as e:
                error_msg = str(e)
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {e}")
                
                # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ—à–∏–±–æ–∫
                if "no element found" in error_msg:
                    return {
                        'success': False,
                        'error': '–°—É–±—Ç–∏—Ç—Ä—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è —ç—Ç–æ–≥–æ –≤–∏–¥–µ–æ. –í–æ–∑–º–æ–∂–Ω–æ, –∞–≤—Ç–æ—Ä –æ—Ç–∫–ª—é—á–∏–ª –∏—Ö –∏–ª–∏ –≤–∏–¥–µ–æ —Å–ª–∏—à–∫–æ–º –Ω–æ–≤–æ–µ.',
                        'video_id': video_id,
                        'error_type': 'no_subtitles'
                    }
                elif "Video unavailable" in error_msg:
                    return {
                        'success': False,
                        'error': '–í–∏–¥–µ–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–æ –ø—Ä–∏–≤–∞—Ç–Ω–æ–µ –∏–ª–∏ —É–¥–∞–ª–µ–Ω–æ.',
                        'video_id': video_id,
                        'error_type': 'video_unavailable'
                    }
                elif "TranscriptsDisabled" in error_msg:
                    return {
                        'success': False,
                        'error': '–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã –¥–ª—è —ç—Ç–æ–≥–æ –≤–∏–¥–µ–æ.',
                        'video_id': video_id,
                        'error_type': 'transcripts_disabled'
                    }
                elif "NoTranscriptFound" in error_msg:
                    return {
                        'success': False,
                        'error': '–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è —ç—Ç–æ–≥–æ –≤–∏–¥–µ–æ.',
                        'video_id': video_id,
                        'error_type': 'no_transcript'
                    }
                else:
                    return {
                        'success': False,
                        'error': f'–û—à–∏–±–∫–∞ API: {error_msg}',
                        'video_id': video_id,
                        'error_type': 'api_error'
                    }
                
        except ImportError:
            logger.error("‚ùå youtube_transcript_api –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return {
                'success': False,
                'error': 'youtube_transcript_api –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'
            }
        except Exception as e:
            logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
            return {
                'success': False,
                'error': f'–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}'
            }
    
    def _get_video_info(self, video_id: str) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ
        
        Args:
            video_id: ID –≤–∏–¥–µ–æ
            
        Returns:
            Dict: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∏–¥–µ–æ
        """
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —á–µ—Ä–µ–∑ YouTube API –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
            from ..config import YOUTUBE_API_KEY
            
            if YOUTUBE_API_KEY:
                import aiohttp
                import asyncio
                
                async def fetch_info():
                    url = f"https://www.googleapis.com/youtube/v3/videos"
                    params = {
                        'part': 'snippet',
                        'id': video_id,
                        'key': YOUTUBE_API_KEY
                    }
                    
                    async with aiohttp.ClientSession() as session:
                        async with session.get(url, params=params) as response:
                            if response.status == 200:
                                data = await response.json()
                                if data.get('items'):
                                    snippet = data['items'][0]['snippet']
                                    return {
                                        'title': snippet.get('title'),
                                        'channel': snippet.get('channelTitle'),
                                        'description': snippet.get('description', '')[:200] + '...'
                                    }
                    return {}
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ event loop
                try:
                    loop = asyncio.get_event_loop()
                    return loop.run_until_complete(fetch_info())
                except:
                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —á–µ—Ä–µ–∑ API, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                    return {}
            else:
                return {}
                
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ: {e}")
            return {}
    
    def save_transcript_to_file(self, transcript_text: str, video_id: str, video_title: str = None) -> str:
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –≤ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        
        Args:
            transcript_text: –¢–µ–∫—Å—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
            video_id: ID –≤–∏–¥–µ–æ
            video_title: –ù–∞–∑–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            
        Returns:
            str: –ü—É—Ç—å –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
        """
        try:
            # –°–æ–∑–¥–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
            safe_title = ""
            if video_title:
                # –£–±–∏—Ä–∞–µ–º –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
                safe_title = re.sub(r'[<>:"/\\|?*]', '', video_title)
                safe_title = safe_title[:50]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
                safe_title = f"_{safe_title}" if safe_title else ""
            
            filename = f"youtube_transcript_{video_id}{safe_title}.txt"
            
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            temp_dir = tempfile.gettempdir()
            file_path = os.path.join(temp_dir, filename)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
            with open(file_path, 'w', encoding='utf-8') as f:
                f.write(transcript_text)
            
            logger.info(f"üíæ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {file_path}")
            return file_path
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
            raise
    
    def format_transcript_message(self, result: Dict[str, Any]) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
        
        Args:
            result: –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
            
        Returns:
            str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        """
        if result['success']:
            video_info = result.get('video_info', {})
            title = video_info.get('title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            channel = video_info.get('channel', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            language = result.get('language', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            
            message = f"üé¨ **–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞**\n\n"
            message += f"üìù **–ù–∞–∑–≤–∞–Ω–∏–µ:** {title}\n"
            message += f"üë§ **–ö–∞–Ω–∞–ª:** {channel}\n"
            message += f"üåê **–Ø–∑—ã–∫:** {language}\n"
            message += f"üÜî **ID –≤–∏–¥–µ–æ:** {result['video_id']}\n\n"
            message += f"üìÑ –§–∞–π–ª —Å –ø–æ–ª–Ω–æ–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–µ–π –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω –≤—ã—à–µ"
            
            return message
        else:
            error_message = f"‚ùå **–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏**\n\n"
            error_message += f"üîç **–ü—Ä–æ–±–ª–µ–º–∞:** {result['error']}\n"
            
            if result.get('video_id'):
                error_message += f"üÜî **ID –≤–∏–¥–µ–æ:** {result['video_id']}\n"
            
            if result.get('available_languages'):
                error_message += f"üìã **–î–æ—Å—Ç—É–ø–Ω—ã–µ —è–∑—ã–∫–∏:** {', '.join(result['available_languages'])}\n"
            
            # –°–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –æ—à–∏–±–∫–∏
            error_type = result.get('error_type', 'unknown')
            error_message += f"\nüí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**\n"
            
            if error_type == 'no_subtitles':
                error_message += f"‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –≤–∏–¥–µ–æ —Å —Å—É–±—Ç–∏—Ç—Ä–∞–º–∏\n"
                error_message += f"‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –≤–∏–¥–µ–æ –Ω–µ —Å–ª–∏—à–∫–æ–º –Ω–æ–≤–æ–µ\n"
                error_message += f"‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∞–≤—Ç–æ—Ä –Ω–µ –æ—Ç–∫–ª—é—á–∏–ª —Å—É–±—Ç–∏—Ç—Ä—ã\n"
            elif error_type == 'video_unavailable':
                error_message += f"‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Å—Å—ã–ª–∫–∏\n"
                error_message += f"‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤–∏–¥–µ–æ –ø—É–±–ª–∏—á–Ω–æ–µ\n"
                error_message += f"‚Ä¢ –í–æ–∑–º–æ–∂–Ω–æ, –≤–∏–¥–µ–æ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ\n"
            elif error_type == 'transcripts_disabled':
                error_message += f"‚Ä¢ –°—É–±—Ç–∏—Ç—Ä—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã –∞–≤—Ç–æ—Ä–æ–º –≤–∏–¥–µ–æ\n"
                error_message += f"‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –≤–∏–¥–µ–æ\n"
            elif error_type == 'no_transcript':
                error_message += f"‚Ä¢ –í–∏–¥–µ–æ –Ω–µ –∏–º–µ–µ—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π\n"
                error_message += f"‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–∏–¥–µ–æ —Å —Å—É–±—Ç–∏—Ç—Ä–∞–º–∏\n"
            elif error_type == 'no_transcripts_available':
                error_message += f"‚Ä¢ –î–ª—è –¥–∞–Ω–Ω–æ–≥–æ –≤–∏–¥–µ–æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã\n"
                error_message += f"‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –≤–∏–¥–µ–æ\n"
                error_message += f"‚Ä¢ –í–æ–∑–º–æ–∂–Ω–æ, –≤–∏–¥–µ–æ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –∏–ª–∏ –Ω–æ–≤–æ–µ\n"
            else:
                error_message += f"‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ\n"
                error_message += f"‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å –ø–æ–∑–∂–µ\n"
                error_message += f"‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ —Å—Å—ã–ª–∫–∏\n"
            
            error_message += f"\nüîó **–§–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏:** https://www.youtube.com/watch?v=VIDEO_ID"
            
            return error_message


# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
youtube_transcript_service = YouTubeTranscriptService()