"""
–£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π MCP —Å–µ—Ä–≤–∏—Å

–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑—É–µ—Ç –≤—Å—é MCP —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –≤ –æ–¥–Ω–æ–º –º–µ—Å—Ç–µ
"""

import asyncio
import logging
from typing import Dict, Any, Optional, List
from dataclasses import dataclass
from enum import Enum

try:
    from ..core.logging_utils import (
        get_structured_logger, ComponentType, TraceContext,
        log_operation_start, log_operation_success, log_operation_error
    )
    STRUCTURED_LOGGING = True
except ImportError:
    STRUCTURED_LOGGING = False

from ..core.config import config
from ..core.errors import MCPError
from ..formatters.mcp_formatter import MCPFormatter

logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ª–æ–≥–≥–µ—Ä –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
if STRUCTURED_LOGGING:
    structured_logger = get_structured_logger("unified_mcp_service", ComponentType.MCP)
else:
    structured_logger = None


class MCPProvider(str, Enum):
    """–î–æ—Å—Ç—É–ø–Ω—ã–µ MCP –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã"""
    CLAUDE_SDK = "claude_sdk"
    DIGITALOCEAN = "digitalocean"
    CONTEXT7 = "context7"
    SUPABASE = "supabase"
    CLOUDFLARE = "cloudflare"


@dataclass
class MCPCommand:
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ MCP –∫–æ–º–∞–Ω–¥—ã"""
    provider: MCPProvider
    action: str
    params: Dict[str, Any]
    raw_text: Optional[str] = None


class UnifiedMCPService:
    """
    –ï–¥–∏–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å MCP
    
    –û–±—ä–µ–¥–∏–Ω—è–µ—Ç:
    - Claude Code SDK –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥
    - –ü–∞—Ä—Å–∏–Ω–≥ –∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ MCP –∫–æ–º–∞–Ω–¥
    - –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    - –û–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫
    """
    
    def __init__(self):
        self.formatter = MCPFormatter()
        self._claude_sdk_available = False
        self.structured_logger = structured_logger if STRUCTURED_LOGGING else None
        self._init_claude_sdk()
        
    def _init_claude_sdk(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Claude Code SDK"""
        try:
            from claude_code_sdk import claude_code_execute_mcp_tool
            self._claude_sdk_available = True
            logger.info("‚úÖ Claude Code SDK –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except ImportError:
            logger.warning("‚ö†Ô∏è Claude Code SDK –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - MCP –∫–æ–º–∞–Ω–¥—ã –±—É–¥—É—Ç —ç–º—É–ª–∏—Ä–æ–≤–∞—Ç—å—Å—è")
            
    def parse_mcp_command(self, text: str) -> Optional[MCPCommand]:
        """
        –ü–∞—Ä—Å–∏—Ç —Ç–µ–∫—Å—Ç –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç MCP –∫–æ–º–∞–Ω–¥—É
        
        –ü—Ä–∏–º–µ—Ä—ã:
        - /mcp apps list -> MCPCommand(provider=DIGITALOCEAN, action="list_apps")
        - –ø–æ–∫–∞–∂–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è -> MCPCommand(provider=DIGITALOCEAN, action="list_apps")
        """
        text_lower = text.lower().strip()
        
        # –ü—Ä—è–º—ã–µ MCP –∫–æ–º–∞–Ω–¥—ã
        if text_lower.startswith('/mcp'):
            parts = text_lower.split()
            if len(parts) >= 3:
                provider_hint = parts[1]
                action = parts[2]
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
                if provider_hint in ['apps', 'app', 'do', 'digitalocean']:
                    return MCPCommand(
                        provider=MCPProvider.DIGITALOCEAN,
                        action=f"{action}_apps" if not action.endswith('apps') else action,
                        params={},
                        raw_text=text
                    )
                elif provider_hint in ['context', 'context7', 'ctx']:
                    return MCPCommand(
                        provider=MCPProvider.CONTEXT7,
                        action=action,
                        params={},
                        raw_text=text
                    )
                    
        # –ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —è–∑—ã–∫
        if any(word in text_lower for word in ['–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è', 'apps', '–∞–ø–ø', 'application']):
            if any(word in text_lower for word in ['–ø–æ–∫–∞–∂–∏', '—Å–ø–∏—Å–æ–∫', 'list', 'show']):
                return MCPCommand(
                    provider=MCPProvider.DIGITALOCEAN,
                    action="list_apps",
                    params={},
                    raw_text=text
                )
                
        return None
        
    async def execute_command(self, command: MCPCommand) -> Dict[str, Any]:
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç MCP –∫–æ–º–∞–Ω–¥—É
        
        Returns:
            Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        """
        try:
            if self._claude_sdk_available:
                return await self._execute_via_sdk(command)
            else:
                return await self._emulate_command(command)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è MCP –∫–æ–º–∞–Ω–¥—ã: {e}")
            raise MCPError(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: {str(e)}")
            
    async def _execute_via_sdk(self, command: MCPCommand) -> Dict[str, Any]:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Claude Code SDK"""
        try:
            from claude_code_sdk import claude_code_execute_mcp_tool
            
            # –ú–∞–ø–ø–∏–Ω–≥ –∫–æ–º–∞–Ω–¥ –Ω–∞ MCP —Ñ—É–Ω–∫—Ü–∏–∏
            mcp_function_map = {
                (MCPProvider.DIGITALOCEAN, "list_apps"): "mcp__digitalocean__list_apps",
                (MCPProvider.DIGITALOCEAN, "get_app"): "mcp__digitalocean__get_app",
                (MCPProvider.CONTEXT7, "search"): "mcp__context7__search",
            }
            
            mcp_function = mcp_function_map.get((command.provider, command.action))
            if not mcp_function:
                return {
                    "success": False,
                    "error": f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {command.action} –¥–ª—è {command.provider}"
                }
                
            # –í—ã–ø–æ–ª–Ω—è–µ–º —á–µ—Ä–µ–∑ SDK
            result = await asyncio.to_thread(
                claude_code_execute_mcp_tool,
                mcp_function,
                command.params
            )
            
            return {
                "success": True,
                "data": result,
                "provider": command.provider.value,
                "action": command.action
            }
            
        except Exception as e:
            logger.error(f"SDK error: {e}")
            return {
                "success": False,
                "error": str(e)
            }
            
    async def _emulate_command(self, command: MCPCommand) -> Dict[str, Any]:
        """–≠–º—É–ª—è—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)"""
        logger.info(f"üìã –≠–º—É–ª—è—Ü–∏—è MCP –∫–æ–º–∞–Ω–¥—ã: {command.provider} -> {command.action}")
        
        if command.provider == MCPProvider.DIGITALOCEAN and command.action == "list_apps":
            return {
                "success": True,
                "data": {
                    "apps": [
                        {
                            "id": "demo-app-1",
                            "name": "artem-webhook-bot",
                            "status": "active",
                            "created_at": "2024-01-15T10:00:00Z",
                            "region": "fra1"
                        },
                        {
                            "id": "demo-app-2", 
                            "name": "test-deployment",
                            "status": "inactive",
                            "created_at": "2024-01-10T15:30:00Z",
                            "region": "ams3"
                        }
                    ]
                },
                "provider": command.provider.value,
                "action": command.action,
                "emulated": True
            }
            
        return {
            "success": False,
            "error": "–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ —Ä–µ–∂–∏–º–µ —ç–º—É–ª—è—Ü–∏–∏"
        }
        
    def format_result(self, result: Dict[str, Any]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        if not result.get("success"):
            return f"‚ùå –û—à–∏–±–∫–∞: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"
            
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞
        return self.formatter.format_mcp_result(result)
        
    async def process_message(self, text: str) -> Optional[str]:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç MCP –∫–æ–º–∞–Ω–¥—É –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–∞
        
        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ MCP –∫–æ–º–∞–Ω–¥–∞
        """
        command = self.parse_mcp_command(text)
        if not command:
            return None
            
        try:
            result = await self.execute_command(command)
            return self.format_result(result)
        except MCPError as e:
            return f"‚ùå {str(e)}"
        except Exception as e:
            logger.error(f"Unexpected error in MCP processing: {e}")
            return "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã"
            
    def is_mcp_command(self, text: str) -> bool:
        """–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç MCP –∫–æ–º–∞–Ω–¥–æ–π"""
        return self.parse_mcp_command(text) is not None


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
unified_mcp_service = UnifiedMCPService()