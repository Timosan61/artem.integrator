"""
–°–µ—Ä–≤–∏—Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ Simple Agent —Å Telegram –±–æ—Ç–æ–º
–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –±–µ–∑ MCPTool –∏ ToolRegistry
"""
import logging
import os
from typing import Dict, Any, Optional

from agent.core.intelligent_agent import IntelligentAgent
from ..core.interfaces import Message, Response, UserRole
from ..core.config import config

logger = logging.getLogger(__name__)


class IntelligentAgentService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Simple Agent (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞)"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞"""
        self.enabled = False
        self.agent = None
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–µ–π
        openai_key = config.openai.api_key or os.getenv("OPENAI_API_KEY")
        anthropic_key = config.anthropic.api_key or os.getenv("ANTHROPIC_API_KEY")
        
        if not openai_key:
            logger.warning("‚ö†Ô∏è OpenAI API key –Ω–µ –Ω–∞–π–¥–µ–Ω - Simple Agent –æ—Ç–∫–ª—é—á–µ–Ω")
            return
            
        try:
            # –°–æ–∑–¥–∞–µ–º –∞–≥–µ–Ω—Ç–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
            self.agent = IntelligentAgent(
                api_key=openai_key, 
                model="gpt-4o",
                anthropic_api_key=anthropic_key
            )
            self.enabled = True
            
            # –õ–æ–≥–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã
            providers = []
            if openai_key:
                providers.append("OpenAI")
            if anthropic_key:
                providers.append("Anthropic")
            if hasattr(self.agent, 'claude_code_service') and self.agent.claude_code_service:
                providers.append("Claude SDK")
                
            logger.info(f"‚úÖ Simple Agent Service –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º–∏: {', '.join(providers)}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Simple Agent: {e}")
    
    async def process_message(self, message: Message) -> Response:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Simple Agent
        
        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            Response –æ—Ç –∞–≥–µ–Ω—Ç–∞
        """
        if not self.enabled or not self.agent:
            return Response(
                text="‚ùå Simple Agent –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω"
            )
        
        try:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
            agent_response = await self.agent.process_message(
                message=message.text,
                user_id=str(message.user.id)
            )
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            response_text = agent_response.message
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–µ—Ç–∞–ª–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
            metadata = {
                "success": True,
                "agent_type": "simple_agent"
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–µ –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è
            if hasattr(agent_response, 'tool_used') and agent_response.tool_used:
                tool_info = f"\n\n_üîß –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω: {agent_response.tool_used.value}_"
                response_text += tool_info
                metadata["tool_used"] = agent_response.tool_used.value
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ confidence –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞
            if hasattr(agent_response, 'confidence') and agent_response.confidence < 0.7:
                confidence_info = f"\n\n_‚ö†Ô∏è –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {agent_response.confidence:.0%}_"
                response_text += confidence_info
                metadata["confidence"] = agent_response.confidence
            
            return Response(
                text=response_text,
                metadata=metadata
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è Simple Agent: {e}", exc_info=True)
            return Response(
                text=f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}",
                metadata={"success": False, "agent_type": "simple_agent"}
            )
    
    def is_available(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–∞"""
        return self.enabled and self.agent is not None
    
    def get_status(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞"""
        return {
            "enabled": self.enabled,
            "available": self.is_available(),
            "agent_type": "simple_agent",
            "model": "gpt-4o" if self.agent else None
        }


# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
intelligent_agent_service = IntelligentAgentService()


__all__ = ['intelligent_agent_service']