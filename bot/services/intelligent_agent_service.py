"""
–°–µ—Ä–≤–∏—Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ Intelligent Agent —Å Telegram –±–æ—Ç–æ–º
"""
import logging
import os
from typing import Dict, Any, Optional
from datetime import datetime

from agent.core.intelligent_agent import IntelligentAgent
from agent.core.tool_registry import ToolRegistry
from agent.core.confirmation_manager import ConfirmationManager
from agent.tools.mcp_tool import MCPTool
from agent.tools.youtube_tool import YouTubeAnalyzerTool
from ..core.interfaces import Message, Response, UserRole
from ..core.config import config

logger = logging.getLogger(__name__)


class IntelligentAgentService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Intelligent Agent"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞"""
        self.enabled = False
        self.agent = None
        self.tool_registry = None
        self.confirmation_manager = None
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ OpenAI API –∫–ª—é—á–∞
        openai_key = config.openai.api_key or os.getenv("OPENAI_API_KEY")
        if not openai_key:
            logger.warning("‚ö†Ô∏è OpenAI API key –Ω–µ –Ω–∞–π–¥–µ–Ω - Intelligent Agent –æ—Ç–∫–ª—é—á–µ–Ω")
            return
            
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
            self._initialize_components(openai_key)
            self.enabled = True
            logger.info("‚úÖ Intelligent Agent Service –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Intelligent Agent: {e}")
    
    def _initialize_components(self, api_key: str):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∞–≥–µ–Ω—Ç–∞"""
        # –°–æ–∑–¥–∞–µ–º –∞–≥–µ–Ω—Ç–∞
        self.agent = IntelligentAgent(api_key=api_key, model="gpt-4o")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–µ—Å—Ç—Ä –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –∞–≥–µ–Ω—Ç–∞
        self.tool_registry = self.agent.tool_registry
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
        self._register_tools()
        
        # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π
        self.confirmation_manager = ConfirmationManager()
    
    def _register_tools(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã"""
        # MCP Tool
        mcp_tool = MCPTool()
        self.tool_registry.register_tool(mcp_tool)
        
        # YouTube Tool
        youtube_api_key = os.getenv("YOUTUBE_API_KEY")
        if youtube_api_key:
            youtube_tool = YouTubeAnalyzerTool(api_key=youtube_api_key)
            self.tool_registry.register_tool(youtube_tool)
            logger.info("‚úÖ YouTube Analyzer Tool –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
        else:
            logger.warning("‚ö†Ô∏è YouTube API key –Ω–µ –Ω–∞–π–¥–µ–Ω - YouTube Analyzer –æ—Ç–∫–ª—é—á–µ–Ω")
    
    async def process_message(self, message: Message) -> Response:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Intelligent Agent
        
        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            Response –æ—Ç –∞–≥–µ–Ω—Ç–∞
        """
        if not self.enabled or not self.agent:
            return Response(
                text="‚ùå Intelligent Agent –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω"
            )
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            pending_sessions = self.confirmation_manager.get_pending_sessions(str(message.user.id))
            confirmation_state = pending_sessions[0] if pending_sessions else None
            
            if confirmation_state:
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
                return await self._handle_confirmation_response(message, confirmation_state)
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –ø–∞–º—è—Ç–∏
            context = await self._get_user_context(message.user.id)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ –∞–≥–µ–Ω—Ç–∞
            agent_response = await self.agent.process_message(
                message=message.text,
                user_id=str(message.user.id),
                context=context
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            if agent_response.requires_confirmation:
                return await self._handle_confirmation_request(
                    message, 
                    agent_response
                )
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            response_text = agent_response.message
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–æ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–µ
            if agent_response.tool_used:
                tool_info = f"\n\n_üîß –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω: {agent_response.tool_used.value}_"
                response_text += tool_info
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ confidence –µ—Å–ª–∏ –Ω–∏–∑–∫–∞—è
            if agent_response.confidence < 0.7:
                confidence_info = f"\n\n_‚ö†Ô∏è –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {agent_response.confidence:.0%}_"
                response_text += confidence_info
            
            return Response(
                text=response_text,
                metadata={
                    "intent": agent_response.intent.value if agent_response.intent else None,
                    "tool_used": agent_response.tool_used.value if agent_response.tool_used else None,
                    "confidence": agent_response.confidence,
                    "success": True
                }
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}", exc_info=True)
            return Response(
                text=f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}",
                metadata={"success": False}
            )
    
    async def _get_user_context(self, user_id: int) -> Optional[list]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ø–∞–º—è—Ç–∏"""
        # TODO: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å MemoryManager
        return None
    
    async def _handle_confirmation_request(
        self, 
        message: Message, 
        agent_response
    ) -> Response:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
        # –°–æ–∑–¥–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        session_id = self.confirmation_manager.create_confirmation(
            user_id=str(message.user.id),
            tool_name=agent_response.tool_used.value,
            tool_params=agent_response.tool_response.data if agent_response.tool_response else {},
            original_message=message.text
        )
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        confirmation_text = agent_response.message
        confirmation_text += "\n\n‚úÖ –î–∞ / ‚ùå –ù–µ—Ç"
        
        return Response(
            text=confirmation_text,
            metadata={
                "confirmation_required": True,
                "session_id": session_id,
                "success": True
            }
        )
    
    async def _handle_confirmation_response(
        self, 
        message: Message, 
        confirmation_state
    ) -> Response:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ"""
        user_response = message.text.lower().strip()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç
        if user_response in ['–¥–∞', 'yes', '‚úÖ', '–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é', 'ok']:
            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ
            tool = self.tool_registry.get_tool(confirmation_state.tool_name)
            if tool:
                try:
                    result = await tool.execute(confirmation_state.parameters)
                    # –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
                    for session in self.confirmation_manager.get_pending_sessions(str(message.user.id)):
                        self.confirmation_manager.cancel_session(session.session_id)
                    
                    if result.success:
                        return Response(
                            text=f"‚úÖ {result.data.get('message', '–û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ')}",
                            metadata={"success": True}
                        )
                    else:
                        return Response(
                            text=f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {result.error}",
                            metadata={"success": False}
                        )
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞: {e}")
                    return Response(
                        text=f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {str(e)}",
                        metadata={"success": False}
                    )
            else:
                return Response(
                    text="‚ùå –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω",
                    metadata={"success": False}
                )
        elif user_response in ['–Ω–µ—Ç', 'no', '‚ùå', '–æ—Ç–º–µ–Ω–∞', 'cancel']:
            # –û—Ç–º–µ–Ω—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é
            self.confirmation_manager.clear_user_state(str(message.user.id))
            return Response(
                text="‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞",
                metadata={"success": True}
            )
        else:
            # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç
            return Response(
                text="‚ùì –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –î–∞ –∏–ª–∏ –ù–µ—Ç",
                metadata={"success": True}
            )
    
    def is_available(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–∞"""
        return self.enabled and self.agent is not None
    
    def get_status(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞"""
        stats = self.confirmation_manager.get_session_stats() if self.confirmation_manager else {}
        return {
            "enabled": self.enabled,
            "available": self.is_available(),
            "tools": self.tool_registry.list_tools() if self.tool_registry else [],
            "active_confirmations": stats.get("active_sessions", 0)
        }


# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
intelligent_agent_service = IntelligentAgentService()


__all__ = ['intelligent_agent_service']