"""
–§–æ—Ä–º–∞—Ç—Ç–µ—Ä –¥–ª—è Telegram —Å–æ–æ–±—â–µ–Ω–∏–π

–ê–¥–∞–ø—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ SocialMedia —Å–µ—Ä–≤–∏—Å–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Telegram
"""

import logging
from typing import List, Dict, Any
from datetime import datetime, timezone
import re

logger = logging.getLogger(__name__)


class TelegramFormatter:
    """
    –§–æ—Ä–º–∞—Ç—Ç–µ—Ä –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫—Ä–∞—Å–∏–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram
    """
    
    @staticmethod
    def format_youtube_video(video: Dict) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç YouTube –≤–∏–¥–µ–æ –¥–ª—è Telegram
        
        Args:
            video: –î–∞–Ω–Ω—ã–µ –≤–∏–¥–µ–æ
            
        Returns:
            str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        """
        title = video.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
        channel = video.get('channel', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–∞–Ω–∞–ª')
        views = TelegramFormatter._format_number(video.get('views', 0))
        likes = TelegramFormatter._format_number(video.get('likes', 0))
        comments = TelegramFormatter._format_number(video.get('comments', 0))
        duration = TelegramFormatter._format_duration(video.get('duration', 'PT0S'))
        published = TelegramFormatter._format_date(video.get('published_at', ''))
        url = video.get('url', '')
        
        return f"""üé• **{title}**

üë§ **–ö–∞–Ω–∞–ª:** {channel}
‚è±Ô∏è **–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:** {duration}
üìÖ **–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ:** {published}

üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
üëÅÔ∏è {views} –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
üëç {likes} –ª–∞–π–∫–æ–≤
üí¨ {comments} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤

üîó [–°–º–æ—Ç—Ä–µ—Ç—å –≤–∏–¥–µ–æ]({url})"""
    
    @staticmethod
    def format_youtube_channel(channel: Dict) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç YouTube –∫–∞–Ω–∞–ª –¥–ª—è Telegram
        
        Args:
            channel: –î–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª–∞
            
        Returns:
            str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        """
        title = channel.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
        description = channel.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')[:200] + '...' if len(channel.get('description', '')) > 200 else channel.get('description', '')
        subscribers = TelegramFormatter._format_number(channel.get('subscribers', 0))
        video_count = TelegramFormatter._format_number(channel.get('video_count', 0))
        view_count = TelegramFormatter._format_number(channel.get('view_count', 0))
        created = TelegramFormatter._format_date(channel.get('created_at', ''))
        url = channel.get('url', '')
        
        return f"""üì∫ **{title}**

üìù **–û–ø–∏—Å–∞–Ω–∏–µ:** {description}
üìÖ **–°–æ–∑–¥–∞–Ω:** {created}

üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
üë• {subscribers} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
üé¨ {video_count} –≤–∏–¥–µ–æ
üëÅÔ∏è {view_count} –æ–±—â–∏—Ö –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤

üîó [–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ –∫–∞–Ω–∞–ª]({url})"""
    
    @staticmethod
    def format_search_results(results: List[Dict], platform: str, query: str) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –¥–ª—è Telegram
        
        Args:
            results: –°–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            platform: –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ (youtube, instagram, tiktok)
            query: –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
            
        Returns:
            str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        """
        if not results:
            return f"üîç **–ü–æ–∏—Å–∫ –Ω–∞ {platform.upper()}:** `{query}`\n\n‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        
        platform_emoji = {
            'youtube': 'üé•',
            'instagram': 'üì∏',
            'tiktok': 'üéµ'
        }
        
        emoji = platform_emoji.get(platform, 'üîç')
        
        header = f"{emoji} **–ü–æ–∏—Å–∫ –Ω–∞ {platform.upper()}:** `{query}`\n\n"
        header += f"üìä **–ù–∞–π–¥–µ–Ω–æ:** {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤\n\n"
        
        items = []
        for i, result in enumerate(results[:5], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5
            if platform == 'youtube':
                item = TelegramFormatter._format_youtube_short(result, i)
            elif platform == 'instagram':
                item = TelegramFormatter._format_instagram_short(result, i)
            elif platform == 'tiktok':
                item = TelegramFormatter._format_tiktok_short(result, i)
            else:
                item = f"{i}. {result.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}"
            
            items.append(item)
        
        footer = ""
        if len(results) > 5:
            footer = f"\n\nüí° –ü–æ–∫–∞–∑–∞–Ω—ã –ø–µ—Ä–≤—ã–µ 5 –∏–∑ {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"
        
        return header + "\n\n".join(items) + footer
    
    @staticmethod
    def _format_youtube_short(video: Dict, index: int) -> str:
        """
        –ö—Ä–∞—Ç–∫–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ YouTube –≤–∏–¥–µ–æ
        """
        title = video.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')[:50] + '...' if len(video.get('title', '')) > 50 else video.get('title', '')
        channel = video.get('channel', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–∞–Ω–∞–ª')
        views = TelegramFormatter._format_number(video.get('views', 0))
        duration = TelegramFormatter._format_duration(video.get('duration', 'PT0S'))
        url = video.get('url', '')
        
        return f"**{index}.** [{title}]({url})\nüë§ {channel} ‚Ä¢ üëÅÔ∏è {views} ‚Ä¢ ‚è±Ô∏è {duration}"
    
    @staticmethod
    def _format_instagram_short(post: Dict, index: int) -> str:
        """
        –ö—Ä–∞—Ç–∫–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Instagram –ø–æ—Å—Ç–∞
        """
        title = post.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')[:50] + '...' if len(post.get('title', '')) > 50 else post.get('title', '')
        username = post.get('username', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
        likes = TelegramFormatter._format_number(post.get('likes', 0))
        url = post.get('url', '')
        
        return f"**{index}.** [{title}]({url})\nüë§ @{username} ‚Ä¢ ‚ù§Ô∏è {likes}"
    
    @staticmethod
    def _format_tiktok_short(video: Dict, index: int) -> str:
        """
        –ö—Ä–∞—Ç–∫–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ TikTok –≤–∏–¥–µ–æ
        """
        title = video.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')[:50] + '...' if len(video.get('title', '')) > 50 else video.get('title', '')
        username = video.get('username', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
        likes = TelegramFormatter._format_number(video.get('likes', 0))
        url = video.get('url', '')
        
        return f"**{index}.** [{title}]({url})\nüë§ @{username} ‚Ä¢ ‚ù§Ô∏è {likes}"
    
    @staticmethod
    def _format_number(num: int) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –±–æ–ª—å—à–∏–µ —á–∏—Å–ª–∞ (1000 -> 1K, 1000000 -> 1M)
        """
        if num >= 1000000:
            return f"{num / 1000000:.1f}M"
        elif num >= 1000:
            return f"{num / 1000:.1f}K"
        else:
            return str(num)
    
    @staticmethod
    def _format_duration(duration: str) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç YouTube duration (PT1H2M3S -> 1:02:03)
        """
        if not duration or duration == 'PT0S':
            return '0:00'
        
        # –ü–∞—Ä—Å–∏–º ISO 8601 duration
        pattern = r'PT(?:(\d+)H)?(?:(\d+)M)?(?:(\d+)S)?'
        match = re.match(pattern, duration)
        
        if not match:
            return duration
        
        hours = int(match.group(1) or 0)
        minutes = int(match.group(2) or 0)
        seconds = int(match.group(3) or 0)
        
        if hours > 0:
            return f"{hours}:{minutes:02d}:{seconds:02d}"
        else:
            return f"{minutes}:{seconds:02d}"
    
    @staticmethod
    def _format_date(date_str: str) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞—Ç—É –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥
        """
        if not date_str:
            return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
        
        try:
            # –ü–∞—Ä—Å–∏–º ISO 8601 –¥–∞—Ç—É
            dt = datetime.fromisoformat(date_str.replace('Z', '+00:00'))
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è
            now = datetime.now(timezone.utc)
            diff = now - dt
            
            if diff.days == 0:
                return '–°–µ–≥–æ–¥–Ω—è'
            elif diff.days == 1:
                return '–í—á–µ—Ä–∞'
            elif diff.days < 7:
                return f'{diff.days} –¥–Ω–µ–π –Ω–∞–∑–∞–¥'
            elif diff.days < 30:
                weeks = diff.days // 7
                return f'{weeks} –Ω–µ–¥–µ–ª—å –Ω–∞–∑–∞–¥'
            elif diff.days < 365:
                months = diff.days // 30
                return f'{months} –º–µ—Å—è—Ü–µ–≤ –Ω–∞–∑–∞–¥'
            else:
                years = diff.days // 365
                return f'{years} –ª–µ—Ç –Ω–∞–∑–∞–¥'
                
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã '{date_str}': {e}")
            return date_str
    
    @staticmethod
    def format_admin_command_help() -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø—Ä–∞–≤–∫—É –ø–æ –∞–¥–º–∏–Ω—Å–∫–∏–º –∫–æ–º–∞–Ω–¥–∞–º
        """
        return """üîë **–ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã:**

**üé• YouTube:**
‚Ä¢ `/youtube <–∑–∞–ø—Ä–æ—Å>` - –ø–æ–∏—Å–∫ –≤–∏–¥–µ–æ
‚Ä¢ `/channel <–∫–∞–Ω–∞–ª>` - –∞–Ω–∞–ª–∏–∑ –∫–∞–Ω–∞–ª–∞
‚Ä¢ `/youtube_channel <–∫–∞–Ω–∞–ª>` - –≤–∏–¥–µ–æ —Å –∫–∞–Ω–∞–ª–∞

**üì∏ Instagram:**
‚Ä¢ `/instagram <–∑–∞–ø—Ä–æ—Å>` - –ø–æ–∏—Å–∫ –ø–æ—Å—Ç–æ–≤
‚Ä¢ `/insta_user <username>` - –ø–æ—Å—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

**üéµ TikTok:**
‚Ä¢ `/tiktok <–∑–∞–ø—Ä–æ—Å>` - –ø–æ–∏—Å–∫ –≤–∏–¥–µ–æ
‚Ä¢ `/tiktok_user <username>` - –≤–∏–¥–µ–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

**‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:**
‚Ä¢ `/admin_status` - —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
‚Ä¢ `/social_config` - –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è API
‚Ä¢ `/help_admin` - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

üí° –í—Å–µ –∫–æ–º–∞–Ω–¥—ã –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"""
    
    @staticmethod
    def format_error_message(error: str, platform: str = None) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        """
        platform_text = f" –Ω–∞ {platform.upper()}" if platform else ""
        
        return f"""‚ùå **–û—à–∏–±–∫–∞{platform_text}**

üîç **–û–ø–∏—Å–∞–Ω–∏–µ:** {error}

üí° **–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:**
‚Ä¢ –ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á
‚Ä¢ –ü—Ä–µ–≤—ã—à–µ–Ω–∞ –∫–≤–æ—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º
‚Ä¢ –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞

üîß –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –µ—Å–ª–∏ –æ—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è"""
    
    @staticmethod
    def format_admin_status(status: Dict) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç—É—Å –∞–¥–º–∏–Ω—Å–∫–æ–π –ø–∞–Ω–µ–ª–∏
        """
        platforms = status.get('available_platforms', [])
        platforms_text = ', '.join(platforms) if platforms else '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö'
        
        youtube_status = '‚úÖ' if status.get('youtube_enabled') else '‚ùå'
        instagram_status = '‚úÖ' if status.get('instagram_enabled') else '‚ùå'
        tiktok_status = '‚úÖ' if status.get('tiktok_enabled') else '‚ùå'
        
        return f"""üîë **–°—Ç–∞—Ç—É—Å –∞–¥–º–∏–Ω—Å–∫–æ–π –ø–∞–Ω–µ–ª–∏**

üìä **–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã:** {platforms_text}

**üé• YouTube:** {youtube_status}
**üì∏ Instagram:** {instagram_status}
**üéµ TikTok:** {tiktok_status}

‚öôÔ∏è **–°—Ç—Ä–∞—Ç–µ–≥–∏–π –∑–∞–≥—Ä—É–∂–µ–Ω–æ:** {status.get('strategies_count', 0)}

üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/help_admin` –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥"""


# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä–∞
telegram_formatter = TelegramFormatter()