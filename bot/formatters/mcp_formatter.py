"""
MCP Formatter –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤ MCP —Å–µ—Ä–≤–µ—Ä–æ–≤
"""

import logging
from typing import Dict, Any, Optional, List

logger = logging.getLogger(__name__)


class MCPFormatter:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ MCP —Å–µ—Ä–≤–µ—Ä–æ–≤"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤—â–∏–∫–∞"""
        pass
    
    def format_mcp_response(self, response: Dict[str, Any], provider: str = "unknown") -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç MCP —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        
        Args:
            response: –û—Ç–≤–µ—Ç –æ—Ç MCP —Å–µ—Ä–≤–µ—Ä–∞
            provider: –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ MCP
            
        Returns:
            str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
        """
        try:
            if not response:
                return "–ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç MCP —Å–µ—Ä–≤–µ—Ä–∞"
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä—è–º–æ–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç
            if isinstance(response, str):
                return response
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å message –≤ –æ—Ç–≤–µ—Ç–µ
            if isinstance(response, dict) and "message" in response:
                return response["message"]
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å content –≤ –æ—Ç–≤–µ—Ç–µ
            if isinstance(response, dict) and "content" in response:
                content = response["content"]
                if isinstance(content, str):
                    return content
                elif isinstance(content, list) and content:
                    return "\n".join(str(item) for item in content)
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π (–¥–ª—è DigitalOcean)
            if isinstance(response, dict) and "apps" in response:
                return self._format_apps_list(response["apps"])
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å —Å–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤
            if isinstance(response, dict) and "servers" in response:
                return self._format_servers_list(response["servers"])
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å error
            if isinstance(response, dict) and "error" in response:
                return f"‚ùå –û—à–∏–±–∫–∞ MCP: {response['error']}"
            
            # –û–±—â–∏–π —Å–ª—É—á–∞–π - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∫ JSON
            return f"üìä –û—Ç–≤–µ—Ç –æ—Ç {provider}:\n```json\n{response}\n```"
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è MCP –æ—Ç–≤–µ—Ç–∞: {e}")
            return f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞: {str(e)}"
    
    def _format_apps_list(self, apps: List[Dict[str, Any]]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π"""
        if not apps:
            return "üì± –ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        
        result = "üì± **–í–∞—à–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:**\n\n"
        for app in apps:
            name = app.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            status = app.get("status", "unknown")
            url = app.get("url", "")
            
            status_emoji = {
                "running": "üü¢",
                "stopped": "üî¥", 
                "pending": "üü°",
                "unknown": "‚ö™"
            }.get(status, "‚ö™")
            
            result += f"{status_emoji} **{name}**\n"
            if status:
                result += f"   –°—Ç–∞—Ç—É—Å: {status}\n"
            if url:
                result += f"   URL: {url}\n"
            result += "\n"
        
        return result
    
    def _format_servers_list(self, servers: List[Dict[str, Any]]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤"""
        if not servers:
            return "üñ•Ô∏è MCP —Å–µ—Ä–≤–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        
        result = "üñ•Ô∏è **–î–æ—Å—Ç—É–ø–Ω—ã–µ MCP —Å–µ—Ä–≤–µ—Ä—ã:**\n\n"
        for server in servers:
            name = server.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            status = server.get("status", "unknown")
            
            status_emoji = {
                "connected": "üü¢",
                "disconnected": "üî¥",
                "connecting": "üü°",
                "unknown": "‚ö™"
            }.get(status, "‚ö™")
            
            result += f"{status_emoji} **{name}**\n"
            if status:
                result += f"   –°—Ç–∞—Ç—É—Å: {status}\n"
            result += "\n"
        
        return result
    
    def format_error(self, error: str, provider: str = "MCP") -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—à–∏–±–∫—É MCP
        
        Args:
            error: –¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏
            provider: –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
            
        Returns:
            str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞
        """
        return f"‚ùå –û—à–∏–±–∫–∞ {provider}: {error}"
    
    def format_success(self, message: str, provider: str = "MCP") -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
        
        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
            provider: –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
            
        Returns:
            str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        """
        return f"‚úÖ {provider}: {message}"