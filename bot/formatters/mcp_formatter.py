"""
MCP Formatter - –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤ MCP –¥–ª—è Telegram

–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –æ—Ç–≤–µ—Ç—ã –æ—Ç MCP —Å–µ—Ä–≤–µ—Ä–æ–≤ –≤ —É–¥–æ–±–Ω—ã–π –¥–ª—è —á—Ç–µ–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç –≤ Telegram.
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç:
- –¢–∞–±–ª–∏—Ü—ã –¥–ª—è SQL —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
- –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä—ã –¥–ª—è –¥–µ–ø–ª–æ–µ–≤
- –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
- –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
"""

import json
from typing import Dict, Any, List, Optional
from datetime import datetime
import html


class MCPFormatter:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç—ã MCP –¥–ª—è Telegram"""
    
    @staticmethod
    def format_sql_results(result: Dict[str, Any]) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã SQL –∑–∞–ø—Ä–æ—Å–∞
        
        Args:
            result: –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SQL
            
        Returns:
            str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        """
        if not result.get("success"):
            return MCPFormatter.format_error(result)
        
        rows = result.get("rows", [])
        affected_rows = result.get("affected_rows", 0)
        execution_time = result.get("execution_time", 0)
        
        if not rows:
            return f"""üìä **SQL –∑–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω**

‚ö° –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {execution_time:.2f}—Å
üìù –ó–∞—Ç—Ä–æ–Ω—É—Ç–æ —Å—Ç—Ä–æ–∫: {affected_rows}

_–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—É—Å—Ç–æ–π_"""
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—É
        message = "üìä **–†–µ–∑—É–ª—å—Ç–∞—Ç SQL –∑–∞–ø—Ä–æ—Å–∞**\n\n"
        
        # –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫ –º–Ω–æ–≥–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
        display_rows = rows[:10]
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–æ–Ω–∫–∏
        if display_rows:
            columns = list(display_rows[0].keys())
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–∞–∫ –∫–æ–¥ –¥–ª—è –º–æ–Ω–æ—à–∏—Ä–∏–Ω–Ω–æ–≥–æ —à—Ä–∏—Ñ—Ç–∞
            message += "```\n"
            
            # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∫–æ–ª–æ–Ω–æ–∫
            header = " | ".join(str(col)[:15] for col in columns)
            message += header + "\n"
            message += "-" * len(header) + "\n"
            
            # –î–∞–Ω–Ω—ã–µ
            for row in display_rows:
                row_str = " | ".join(
                    str(row.get(col, ""))[:15] 
                    for col in columns
                )
                message += row_str + "\n"
            
            message += "```\n"
            
            if len(rows) > 10:
                message += f"\n_–ü–æ–∫–∞–∑–∞–Ω—ã –ø–µ—Ä–≤—ã–µ 10 –∏–∑ {len(rows)} —Å—Ç—Ä–æ–∫_\n"
        
        message += f"\n‚ö° –í—Ä–µ–º—è: {execution_time:.2f}—Å"
        if affected_rows:
            message += f"\nüìù –ó–∞—Ç—Ä–æ–Ω—É—Ç–æ —Å—Ç—Ä–æ–∫: {affected_rows}"
        
        return message
    
    @staticmethod
    def format_project_list(result: Dict[str, Any]) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤ Supabase
        
        Args:
            result: –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤
            
        Returns:
            str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        """
        if not result.get("success"):
            return MCPFormatter.format_error(result)
        
        projects = result.get("projects", [])
        
        if not projects:
            return "üìÇ **–ü—Ä–æ–µ–∫—Ç—ã Supabase**\n\n_–ü—Ä–æ–µ–∫—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ_"
        
        message = f"üìÇ **–ü—Ä–æ–µ–∫—Ç—ã Supabase** ({len(projects)})\n\n"
        
        for project in projects:
            status_emoji = "üü¢" if project.get("status") == "active" else "üü°"
            name = project.get("name", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
            project_id = project.get("id", "")
            region = project.get("region", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            
            message += f"{status_emoji} **{name}**\n"
            message += f"   üÜî `{project_id}`\n"
            message += f"   üåç –†–µ–≥–∏–æ–Ω: {region}\n\n"
        
        return message
    
    @staticmethod
    def format_app_list(result: Dict[str, Any]) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π DigitalOcean
        
        Args:
            result: –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
            
        Returns:
            str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        """
        if not result.get("success"):
            return MCPFormatter.format_error(result)
        
        apps = result.get("apps", [])
        page = result.get("page", 1)
        
        if not apps:
            return "üåä **–ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è DigitalOcean**\n\n_–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ_"
        
        message = f"üåä **–ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è DigitalOcean** (—Å—Ç—Ä. {page})\n\n"
        
        for app in apps:
            status_emoji = {
                "active": "üü¢",
                "deploying": "üöÄ",
                "error": "üî¥",
                "building": "üî®"
            }.get(app.get("status", ""), "‚ö™")
            
            name = app.get("name", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
            app_id = app.get("id", "")
            updated = app.get("updated_at", "")
            
            message += f"{status_emoji} **{name}**\n"
            message += f"   üÜî `{app_id}`\n"
            
            if updated:
                message += f"   üïê –û–±–Ω–æ–≤–ª–µ–Ω–æ: {MCPFormatter._format_time(updated)}\n"
            
            message += "\n"
        
        return message
    
    @staticmethod
    def format_deployment_status(result: Dict[str, Any]) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç—É—Å –¥–µ–ø–ª–æ—è
        
        Args:
            result: –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
            
        Returns:
            str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        """
        if not result.get("success"):
            return MCPFormatter.format_error(result)
        
        deployment = result.get("deployment", {})
        status = result.get("status", "unknown")
        status_emoji = result.get("status_emoji", "‚ùì")
        progress = result.get("progress", 0)
        
        message = f"{status_emoji} **–°—Ç–∞—Ç—É—Å –¥–µ–ø–ª–æ—è**\n\n"
        message += f"üÜî ID: `{deployment.get('id', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}`\n"
        message += f"üìä –°—Ç–∞—Ç—É—Å: **{status}**\n"
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        if 0 <= progress <= 100:
            filled = int(progress / 10)
            empty = 10 - filled
            progress_bar = "‚ñì" * filled + "‚ñë" * empty
            message += f"üìà –ü—Ä–æ–≥—Ä–µ—Å—Å: [{progress_bar}] {progress}%\n"
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        if deployment.get("created_at"):
            message += f"üïê –ù–∞—á–∞—Ç: {MCPFormatter._format_time(deployment['created_at'])}\n"
        
        if deployment.get("cause"):
            message += f"üìù –ü—Ä–∏—á–∏–Ω–∞: {deployment['cause']}\n"
        
        return message
    
    @staticmethod
    def format_logs(result: Dict[str, Any]) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ª–æ–≥–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        
        Args:
            result: –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤
            
        Returns:
            str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        """
        if not result.get("success"):
            return MCPFormatter.format_error(result)
        
        logs = result.get("logs", "")
        app_id = result.get("app_id", "")
        log_type = result.get("log_type", "")
        
        message = f"üìã **–õ–æ–≥–∏ {log_type}**\n"
        message += f"üÜî App: `{app_id}`\n\n"
        
        if not logs:
            message += "_–õ–æ–≥–∏ –ø—É—Å—Ç—ã_"
            return message
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –ª–æ–≥–æ–≤
        max_length = 3000
        if len(logs) > max_length:
            logs = logs[-max_length:]
            message += "_...–ø–æ–∫–∞–∑–∞–Ω—ã –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3000 —Å–∏–º–≤–æ–ª–æ–≤_\n\n"
        
        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º HTML —Å–∏–º–≤–æ–ª—ã
        logs = html.escape(logs)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–∞–∫ –∫–æ–¥
        message += f"```\n{logs}\n```"
        
        return message
    
    @staticmethod
    def format_doc_search_results(result: Dict[str, Any]) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
        
        Args:
            result: –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞
            
        Returns:
            str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        """
        if not result.get("success"):
            return MCPFormatter.format_error(result)
        
        results = result.get("results", [])
        library = result.get("library", "")
        query = result.get("query", "")
        
        if not results:
            return f"üìö **–ü–æ–∏—Å–∫ –≤ {library}**\n\n–ü–æ –∑–∞–ø—Ä–æ—Å—É ¬´{query}¬ª –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
        
        message = f"üìö **–ü–æ–∏—Å–∫ –≤ {library}**\nüîç –ó–∞–ø—Ä–æ—Å: ¬´{query}¬ª\n\n"
        
        for i, doc in enumerate(results, 1):
            title = doc.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
            url = doc.get("url", "")
            snippet = doc.get("snippet", "")
            
            message += f"**{i}. {title}**\n"
            
            if snippet:
                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Å–Ω–∏–ø–ø–µ—Ç–∞
                if len(snippet) > 200:
                    snippet = snippet[:200] + "..."
                message += f"_{snippet}_\n"
            
            if url:
                message += f"üîó [–ß–∏—Ç–∞—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é]({url})\n"
            
            message += "\n"
        
        return message
    
    @staticmethod
    def format_code_examples(result: Dict[str, Any]) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø—Ä–∏–º–µ—Ä—ã –∫–æ–¥–∞
        
        Args:
            result: –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–º–µ—Ä–æ–≤
            
        Returns:
            str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        """
        if not result.get("success"):
            return MCPFormatter.format_error(result)
        
        examples = result.get("examples", [])
        library = result.get("library", "")
        topic = result.get("topic", "")
        
        if not examples:
            return f"üíª **–ü—Ä–∏–º–µ—Ä—ã {library}**\n\n–ü—Ä–∏–º–µ—Ä–æ–≤ –¥–ª—è ¬´{topic}¬ª –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
        
        message = f"üíª **–ü—Ä–∏–º–µ—Ä—ã {library}**\nüìñ –¢–µ–º–∞: {topic}\n\n"
        
        for i, example in enumerate(examples, 1):
            title = example.get("title", f"–ü—Ä–∏–º–µ—Ä {i}")
            code = example.get("code", "")
            language = example.get("language", "javascript")
            description = example.get("description", "")
            
            message += f"**{title}**\n"
            
            if description:
                message += f"_{description}_\n\n"
            
            if code:
                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –∫–æ–¥–∞
                if len(code) > 1000:
                    code = code[:1000] + "\n// ..."
                
                message += f"```{language}\n{code}\n```\n\n"
        
        return message
    
    @staticmethod
    def format_error(result: Dict[str, Any]) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        
        Args:
            result: –†–µ–∑—É–ª—å—Ç–∞—Ç —Å –æ—à–∏–±–∫–æ–π
            
        Returns:
            str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        """
        error = result.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
        message = result.get("message", "")
        
        if message:
            return message
        
        return f"‚ùå **–û—à–∏–±–∫–∞**\n\n{error}"
    
    @staticmethod
    def format_mcp_status(status: Dict[str, Any]) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ–±—â–∏–π —Å—Ç–∞—Ç—É—Å MCP —Å–∏—Å—Ç–µ–º—ã
        
        Args:
            status: –°—Ç–∞—Ç—É—Å MCP
            
        Returns:
            str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        """
        message = "üîå **–°—Ç–∞—Ç—É—Å MCP**\n\n"
        
        enabled = status.get("mcp_enabled", False)
        message += f"üìä MCP: {'‚úÖ –í–∫–ª—é—á–µ–Ω' if enabled else '‚ùå –í—ã–∫–ª—é—á–µ–Ω'}\n"
        
        if status.get("anthropic_available"):
            message += "ü§ñ Claude: ‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω\n"
        
        if status.get("openai_available"):
            message += "ü§ñ OpenAI: ‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω\n"
        
        total_functions = status.get("total_functions", 0)
        message += f"üîß –§—É–Ω–∫—Ü–∏–π: {total_functions}\n\n"
        
        # –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–æ–≤
        servers = status.get("servers", {})
        if servers:
            message += "**–°–µ—Ä–≤–µ—Ä—ã:**\n"
            for server_name, server_status in servers.items():
                emoji = "‚úÖ" if server_status.get("enabled") else "‚ùå"
                display_name = server_status.get("display_name", server_name)
                functions = server_status.get("functions_count", 0)
                
                message += f"{emoji} {display_name} ({functions} —Ñ—É–Ω–∫—Ü–∏–π)\n"
        
        return message
    
    @staticmethod
    def format_server_metrics(metrics: Dict[str, Any]) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è MCP
        
        Args:
            metrics: –ú–µ—Ç—Ä–∏–∫–∏
            
        Returns:
            str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        """
        message = "üìä **–ú–µ—Ç—Ä–∏–∫–∏ MCP**\n\n"
        
        total_calls = metrics.get("total_calls", 0)
        successful = metrics.get("total_successful", 0)
        failed = metrics.get("total_failed", 0)
        avg_time = metrics.get("average_execution_time", 0)
        
        message += f"üìà –í—Å–µ–≥–æ –≤—ã–∑–æ–≤–æ–≤: {total_calls}\n"
        if total_calls > 0:
            success_rate = (successful / total_calls) * 100
            message += f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: {successful} ({success_rate:.1f}%)\n"
            message += f"‚ùå –û—à–∏–±–æ–∫: {failed}\n"
            message += f"‚ö° –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {avg_time:.2f}—Å\n\n"
        
        # –î–µ—Ç–∞–ª–∏ –ø–æ —Å–µ—Ä–≤–µ—Ä–∞–º
        servers = metrics.get("servers", {})
        if servers:
            message += "**–ü–æ —Å–µ—Ä–≤–µ—Ä–∞–º:**\n"
            for server_name, server_metrics in servers.items():
                calls = server_metrics.get("total_calls", 0)
                if calls > 0:
                    message += f"\n**{server_name}**: {calls} –≤—ã–∑–æ–≤–æ–≤\n"
                    
                    # –¢–æ–ø —Ñ—É–Ω–∫—Ü–∏–π
                    functions = server_metrics.get("functions", {})
                    if functions:
                        sorted_funcs = sorted(
                            functions.items(), 
                            key=lambda x: x[1]["total_calls"], 
                            reverse=True
                        )[:3]
                        
                        for func_name, func_metrics in sorted_funcs:
                            func_calls = func_metrics["total_calls"]
                            message += f"  ‚Ä¢ {func_name}: {func_calls}\n"
        
        return message
    
    @staticmethod
    def format_help_message() -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–º–æ—â–∏ –ø–æ MCP –∫–æ–º–∞–Ω–¥–∞–º
        
        Returns:
            str: –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–º–æ—â–∏
        """
        return """üîå **MCP –ö–æ–º–∞–Ω–¥—ã**

**Supabase:**
‚Ä¢ `/mcp projects` - —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤
‚Ä¢ `/db <–∑–∞–ø—Ä–æ—Å>` –∏–ª–∏ `/sql <–∑–∞–ø—Ä–æ—Å>` - –≤—ã–ø–æ–ª–Ω–∏—Ç—å SQL
‚Ä¢ `/mcp tables <project_id>` - —Å–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü

**DigitalOcean:**
‚Ä¢ `/mcp apps` - —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
‚Ä¢ `/deploy <app_id>` - –∑–∞–ø—É—Å—Ç–∏—Ç—å –¥–µ–ø–ª–æ–π
‚Ä¢ `/logs <app_id>` - –ø—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤

**Context7:**
‚Ä¢ `/docs <–±–∏–±–ª–∏–æ—Ç–µ–∫–∞> <–∑–∞–ø—Ä–æ—Å>` - –ø–æ–∏—Å–∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
‚Ä¢ `/mcp examples <–±–∏–±–ª–∏–æ—Ç–µ–∫–∞> <—Ç–µ–º–∞>` - –ø—Ä–∏–º–µ—Ä—ã –∫–æ–¥–∞

**–°–∏—Å—Ç–µ–º–∞:**
‚Ä¢ `/mcp status` - —Å—Ç–∞—Ç—É—Å MCP —Å–µ—Ä–≤–µ—Ä–æ–≤
‚Ä¢ `/mcp metrics` - –º–µ—Ç—Ä–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
‚Ä¢ `/mcp help` - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞"""
    
    @staticmethod
    def _format_time(timestamp: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É"""
        try:
            dt = datetime.fromisoformat(timestamp.replace('Z', '+00:00'))
            return dt.strftime("%d.%m.%Y %H:%M")
        except:
            return timestamp


# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä–∞
mcp_formatter = MCPFormatter()