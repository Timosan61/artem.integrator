"""
Legacy agent.py - —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏

–≠—Ç–æ—Ç —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é myassistant
"""

import json
import asyncio
import logging
from datetime import datetime
from typing import Optional, Dict, Any

import openai
from zep_cloud.client import AsyncZep
from zep_cloud.types import Message

from .config import INSTRUCTION_FILE, OPENAI_API_KEY, OPENAI_MODEL, ZEP_API_KEY

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)


class myassistant:
    def __init__(self):
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º OpenAI –∫–ª–∏–µ–Ω—Ç –µ—Å–ª–∏ API –∫–ª—é—á –¥–æ—Å—Ç—É–ø–µ–Ω
        if OPENAI_API_KEY:
            self.openai_client = openai.AsyncOpenAI(api_key=OPENAI_API_KEY)
            print("‚úÖ OpenAI –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        else:
            self.openai_client = None
            print("‚ö†Ô∏è OpenAI API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Zep –∫–ª–∏–µ–Ω—Ç –µ—Å–ª–∏ API –∫–ª—é—á –¥–æ—Å—Ç—É–ø–µ–Ω
        if ZEP_API_KEY and ZEP_API_KEY != "test_key":
            try:
                self.zep_client = AsyncZep(api_key=ZEP_API_KEY)
                print(f"‚úÖ Zep –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –∫–ª—é—á–æ–º –¥–ª–∏–Ω–æ–π {len(ZEP_API_KEY)} —Å–∏–º–≤–æ–ª–æ–≤")
                print(f"üîë Zep API Key –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å: {ZEP_API_KEY[:8]}...")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Zep –∫–ª–∏–µ–Ω—Ç–∞: {e}")
                self.zep_client = None
        else:
            self.zep_client = None
            if not ZEP_API_KEY:
                print("‚ö†Ô∏è ZEP_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω–∞—è –ø–∞–º—è—Ç—å")
            else:
                print(f"‚ö†Ô∏è ZEP_API_KEY –∏–º–µ–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ 'test_key', –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω–∞—è –ø–∞–º—è—Ç—å")
        self.instruction = self._load_instruction()
        self.user_sessions = {}  # –†–µ–∑–µ—Ä–≤–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ—Å—Å–∏–π –≤ –ø–∞–º—è—Ç–∏
    
    def _load_instruction(self) -> Dict[str, Any]:
        try:
            with open(INSTRUCTION_FILE, 'r', encoding='utf-8') as f:
                instruction = json.load(f)
                logger.info(f"‚úÖ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ {INSTRUCTION_FILE}")
                logger.info(f"üìù –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {instruction.get('last_updated', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
                return instruction
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π: {e}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω
            return {
                "instructions": {
                    "main": "–¢—ã - AI-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ –∏–º–µ–Ω–∏ –ê—Ä—Ç—ë–º. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ –ø–æ–º–æ–≥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å –∏—Ö –≤–æ–ø—Ä–æ—Å–∞–º–∏.",
                    "behavior": [
                        "–ë—É–¥—å –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º",
                        "–î–∞–≤–∞–π –ø–æ–ª–µ–∑–Ω—ã–µ –∏ —Ç–æ—á–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã",
                        "–ï—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—à—å –æ—Ç–≤–µ—Ç–∞ - —á–µ—Å—Ç–Ω–æ —Å–∫–∞–∂–∏ –æ–± —ç—Ç–æ–º"
                    ]
                },
                "name": "–ê—Ä—Ç—ë–º"
            }
    
    async def add_to_zep_memory(self, user_id: int, user_name: str, user_message: str, ai_response: str):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–≤–µ—Ç –≤ –ø–∞–º—è—Ç—å Zep"""
        if not self.zep_client:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω—É—é –ø–∞–º—è—Ç—å –µ—Å–ª–∏ Zep –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
            if user_id not in self.user_sessions:
                self.user_sessions[user_id] = []
            self.user_sessions[user_id].append({
                "user": user_message,
                "assistant": ai_response,
                "timestamp": datetime.now().isoformat()
            })
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ 20 —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
            if len(self.user_sessions[user_id]) > 20:
                self.user_sessions[user_id] = self.user_sessions[user_id][-20:]
            return
        
        session_id = f"telegram_user_{user_id}"
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏
            try:
                await self.zep_client.memory.get(session_id=session_id)
            except Exception:
                # –°–µ—Å—Å–∏—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
                from zep_cloud import Session
                session = Session(
                    session_id=session_id,
                    user_id=str(user_id),
                    metadata={
                        "user_name": user_name,
                        "platform": "telegram",
                        "created_at": datetime.now().isoformat()
                    }
                )
                await self.zep_client.sessions.add(session=session)
                logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è —Å–µ—Å—Å–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_name} (ID: {user_id})")
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ø–∞–º—è—Ç—å
            from zep_cloud import Memory
            messages = [
                Message(
                    role="user",
                    role_type="user",
                    content=user_message,
                    metadata={"timestamp": datetime.now().isoformat()}
                ),
                Message(
                    role="assistant",
                    role_type="assistant", 
                    content=ai_response,
                    metadata={"timestamp": datetime.now().isoformat()}
                )
            ]
            
            memory = Memory(messages=messages)
            await self.zep_client.memory.add(session_id=session_id, memory=memory)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ Zep: {e}")
            # Fallback –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—É—é –ø–∞–º—è—Ç—å
            if user_id not in self.user_sessions:
                self.user_sessions[user_id] = []
            self.user_sessions[user_id].append({
                "user": user_message,
                "assistant": ai_response,
                "timestamp": datetime.now().isoformat()
            })
    
    async def get_zep_memory_context(self, user_id: int, limit: int = 10) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –∏–∑ –ø–∞–º—è—Ç–∏ Zep"""
        if not self.zep_client:
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –ø–∞–º—è—Ç–∏
            if user_id in self.user_sessions:
                context = []
                for msg in self.user_sessions[user_id][-limit:]:
                    context.append(f"User: {msg['user']}")
                    context.append(f"Assistant: {msg['assistant']}")
                return "\n".join(context)
            return ""
        
        session_id = f"telegram_user_{user_id}"
        
        try:
            memory = await self.zep_client.memory.get(session_id=session_id, limit=limit)
            
            if not memory or not memory.messages:
                return ""
            
            # –ü–æ—Å–ª–µ–¥–Ω–∏–µ limit —Å–µ—Å—Å–∏–π
            recent_sessions = memory.messages[-limit*2:] if memory.messages else []
            
            context_parts = []
            for msg in recent_sessions:
                if msg.role == "user":
                    context_parts.append(f"User: {msg.content}")
                else:
                    context_parts.append(f"Assistant: {msg.content}")
            
            return "\n".join(context_parts[-6:])  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 6 —Å–æ–æ–±—â–µ–Ω–∏–π (3 –ø–∞—Ä—ã)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏–∑ Zep: {e}")
            # Fallback –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—É—é –ø–∞–º—è—Ç—å
            if user_id in self.user_sessions:
                context = []
                for msg in self.user_sessions[user_id][-limit:]:
                    context.append(f"User: {msg['user']}")
                    context.append(f"Assistant: {msg['assistant']}")
                return "\n".join(context)
            return ""
    
    def detect_social_media_intent(self, text: str) -> dict:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –Ω–∞–º–µ—Ä–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö –º–µ–¥–∏–∞"""
        text_lower = text.lower()
        
        # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º
        keywords = {
            'youtube': ['youtube', '—é—Ç—É–±', '–≤–∏–¥–µ–æ', '—Ä–æ–ª–∏–∫', '–∫–∞–Ω–∞–ª', '–ø–æ–¥–ø–∏—Å—á–∏–∫', 
                       '–ø—Ä–æ—Å–º–æ—Ç—Ä', '–ª–∞–π–∫', '–¥–∏–∑–ª–∞–π–∫', '–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π', '—Ç—Ä–µ–∫', '–∫–ª–∏–ø',
                       '—Å—Ç—Ä–∏–º', 'stream', '–≤–ª–æ–≥', 'vlog', '–∫–æ–Ω—Ç–µ–Ω—Ç'],
            'instagram': ['instagram', '–∏–Ω—Å—Ç–∞–≥—Ä–∞–º', '–∏–Ω—Å—Ç–∞', '–ø–æ—Å—Ç', '—Å—Ç–æ—Ä–∏—Å', 'stories',
                         '—Ä–∏–ª—Å', 'reels', '—Ñ–æ—Ç–æ', '–ø–æ–¥–ø–∏—Å—á–∏–∫', '–ª–∞–π–∫', '—Ö–µ—à—Ç–µ–≥', 'hashtag'],
            'tiktok': ['tiktok', '—Ç–∏–∫—Ç–æ–∫', '—Ç–∏–∫ —Ç–æ–∫', '–∫–æ—Ä–æ—Ç–∫–æ–µ –≤–∏–¥–µ–æ', '—á–µ–ª–ª–µ–Ω–¥–∂',
                      'challenge', '—Ç—Ä–µ–Ω–¥', 'trend', '–¥—É—ç—Ç', 'duet']
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
        detected_platforms = []
        for platform, platform_keywords in keywords.items():
            for keyword in platform_keywords:
                if keyword in text_lower:
                    detected_platforms.append(platform)
                    break
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –¥–µ–π—Å—Ç–≤–∏—è
        actions = {
            'analyze': ['–∞–Ω–∞–ª–∏–∑', '–ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π', '–ø–æ—Å–º–æ—Ç—Ä–∏', '–ø—Ä–æ–≤–µ—Ä—å', '–∏–∑—É—á–∏', 
                       '—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', '–º–µ—Ç—Ä–∏–∫–∏', '–ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏'],
            'download': ['—Å–∫–∞—á–∞–π', '–∑–∞–≥—Ä—É–∑–∏', 'download', '—Å–æ—Ö—Ä–∞–Ω–∏'],
            'create': ['—Å–æ–∑–¥–∞–π', '—Å–¥–µ–ª–∞–π', '—Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π', '–ø—Ä–∏–¥—É–º–∞–π', '–Ω–∞–ø–∏—à–∏'],
            'optimize': ['–æ–ø—Ç–∏–º–∏–∑–∏—Ä—É–π', '—É–ª—É—á—à–∏', '–ø–æ–≤—ã—Å—å', '—É–≤–µ–ª–∏—á—å'],
            'search': ['–Ω–∞–π–¥–∏', '–ø–æ–∏—â–∏', 'search', '–ø–æ–∫–∞–∂–∏']
        }
        
        detected_actions = []
        for action, action_keywords in actions.items():
            for keyword in action_keywords:
                if keyword in text_lower:
                    detected_actions.append(action)
                    break
        
        return {
            'has_social_media_intent': len(detected_platforms) > 0,
            'platforms': detected_platforms,
            'actions': detected_actions,
            'confidence': min(len(detected_platforms) + len(detected_actions), 5) / 5.0
        }
    
    async def generate_response(self, user_message: str, user_id: int, user_name: str, 
                              is_admin: bool = False, social_media_response: Optional[str] = None) -> str:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–º–µ—Ä–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        intent = self.detect_social_media_intent(user_message)
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –≥–æ—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –æ—Ç Social Media —Å–µ—Ä–≤–∏—Å–∞
        if social_media_response:
            return social_media_response
            
        if not self.openai_client:
            return self._get_fallback_response(user_message, intent)
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
            context = await self.get_zep_memory_context(user_id)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            system_message = self._create_system_message(user_name, is_admin, intent)
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è API
            messages = [
                {"role": "system", "content": system_message}
            ]
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –µ—Å–ª–∏ –µ—Å—Ç—å
            if context:
                messages.append({"role": "system", "content": f"–ö–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞:\n{context}"})
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            messages.append({"role": "user", "content": user_message})
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ OpenAI
            response = await self.openai_client.chat.completions.create(
                model=OPENAI_MODEL,
                messages=messages,
                temperature=0.7,
                max_tokens=800
            )
            
            ai_response = response.choices[0].message.content
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–∞–º—è—Ç—å
            await self.add_to_zep_memory(user_id, user_name, user_message, ai_response)
            
            return ai_response
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: {e}")
            return self._get_fallback_response(user_message, intent)
    
    def _create_system_message(self, user_name: str, is_admin: bool, intent: dict) -> str:
        """–°–æ–∑–¥–∞–µ—Ç —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è OpenAI"""
        base_instruction = self.instruction.get('instructions', {}).get('main', '')
        behavior_rules = self.instruction.get('instructions', {}).get('behavior', [])
        name = self.instruction.get('name', '–ê—Ä—Ç—ë–º')
        
        system_message = f"{base_instruction}\n\n–¢–≤–æ–µ –∏–º—è: {name}\n"
        system_message += f"–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_name}\n"
        
        if is_admin:
            system_message += "–°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä (–∏–º–µ–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø—Ä–∞–≤–∞)\n"
        
        if behavior_rules:
            system_message += "\n–ü—Ä–∞–≤–∏–ª–∞ –ø–æ–≤–µ–¥–µ–Ω–∏—è:\n"
            for rule in behavior_rules:
                system_message += f"- {rule}\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–º–µ—Ä–µ–Ω–∏—è—Ö –µ—Å–ª–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã
        if intent['has_social_media_intent']:
            system_message += f"\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç—Å—è —Å–æ—Ü–∏–∞–ª—å–Ω—ã–º–∏ –º–µ–¥–∏–∞: {', '.join(intent['platforms'])}\n"
            if intent['actions']:
                system_message += f"–í–æ–∑–º–æ–∂–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è: {', '.join(intent['actions'])}\n"
            system_message += "–ü–æ–¥—Å–∫–∞–∂–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–æ—Ü–∏–∞–ª—å–Ω—ã–º–∏ –º–µ–¥–∏–∞ –Ω—É–∂–Ω—ã —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã.\n"
        
        return system_message
    
    def _get_fallback_response(self, user_message: str, intent: dict) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–≤–µ—Ç –∫–æ–≥–¥–∞ OpenAI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"""
        if intent['has_social_media_intent']:
            platforms_str = ", ".join(intent['platforms'])
            return f"–Ø –≤–∏–∂—É, —á—Ç–æ –≤—ã –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç–µ—Å—å {platforms_str}. –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ–π—á–∞—Å —è —Ä–∞–±–æ—Ç–∞—é –≤ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        
        responses = [
            "–ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–µ–π—á–∞—Å —è —Ä–∞–±–æ—Ç–∞—é –≤ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –ø–æ–∑–∂–µ.",
            "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ –º–æ–≥—É –¥–∞—Ç—å —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –æ—Ç–≤–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            "–Ø –ø–æ–Ω–∏–º–∞—é –≤–∞—à –≤–æ–ø—Ä–æ—Å, –Ω–æ —Å–µ–π—á–∞—Å –º–æ–≥—É —Ä–∞–±–æ—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ –±–∞–∑–æ–≤–æ–º —Ä–µ–∂–∏–º–µ. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞."
        ]
        
        # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –≤—ã–±–æ—Ä–∞ –æ—Ç–≤–µ—Ç–∞
        if "?" in user_message:
            return responses[0]
        elif len(user_message) > 50:
            return responses[1]
        else:
            return responses[2]
    
    async def ensure_user_exists(self, user_id: int, user_name: str) -> None:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Zep –∏ —Å–æ–∑–¥–∞–µ—Ç –µ—Å–ª–∏ –Ω—É–∂–Ω–æ"""
        if not self.zep_client:
            return
            
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = await self.zep_client.users.get(user_id=str(user_id))
            logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name} (ID: {user_id}) —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ Zep")
        except Exception:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º
            try:
                from zep_cloud import User
                user = User(
                    user_id=str(user_id),
                    first_name=user_name,
                    metadata={
                        "platform": "telegram",
                        "created_at": datetime.now().isoformat()
                    }
                )
                await self.zep_client.users.add(user=user)
                logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ Zep: {user_name} (ID: {user_id})")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Zep: {e}")
    
    async def clear_user_memory(self, user_id: int) -> bool:
        """–û—á–∏—â–∞–µ—Ç –ø–∞–º—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if self.zep_client:
            session_id = f"telegram_user_{user_id}"
            try:
                await self.zep_client.memory.delete(session_id=session_id)
                logger.info(f"‚úÖ –ü–∞–º—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ—á–∏—â–µ–Ω–∞ –≤ Zep")
                return True
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ø–∞–º—è—Ç–∏ –≤ Zep: {e}")
        
        # –û—á–∏—â–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –ø–∞–º—è—Ç—å
        if user_id in self.user_sessions:
            del self.user_sessions[user_id]
            logger.info(f"‚úÖ –õ–æ–∫–∞–ª—å–Ω–∞—è –ø–∞–º—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ—á–∏—â–µ–Ω–∞")
            return True
            
        return False