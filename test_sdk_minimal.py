#!/usr/bin/env python3
"""
–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç Claude Code SDK —Å —è–≤–Ω—ã–º MCP
"""
import asyncio
import os
import json
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Moonshot API
os.environ["ANTHROPIC_BASE_URL"] = "https://api.moonshot.ai/anthropic"
os.environ["ANTHROPIC_AUTH_TOKEN"] = "sk-QNnXEpPxnV9OCIhr6IMUcXQu2b4Vsuq2biZVAFce0KIoUTsx"

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–ª—é—á–∏ –∏–∑ .env
from dotenv import load_dotenv
load_dotenv()

# –ò–º–ø–æ—Ä—Ç Claude Code SDK
try:
    from claude_code_sdk import query, ClaudeCodeOptions, Message
    print("‚úÖ Claude Code SDK –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ Claude Code SDK: {e}")
    exit(1)

async def test_direct_mcp():
    """–¢–µ—Å—Ç –ø—Ä—è–º–æ–≥–æ –≤—ã–∑–æ–≤–∞ MCP"""
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è MCP
    mcp_servers = {
        "digitalocean": {
            "command": "npx",
            "args": ["-y", "@anysphere/digitalocean-mcp"],
            "env": {
                "DIGITALOCEAN_API_TOKEN": os.getenv("DIGITALOCEAN_API_TOKEN", "")
            }
        }
    }
    
    # –û–ø—Ü–∏–∏ SDK
    options = ClaudeCodeOptions(
        max_turns=1,
        system_prompt="""You MUST use mcp__digitalocean__list_apps function.
DO NOT use TodoWrite, Task, or any other tools.
Just call the MCP function directly.""",
        allowed_tools=["mcp__digitalocean__list_apps"],
        disallowed_tools=["TodoWrite", "Task", "ExitPlanMode", "WebSearch", "WebFetch"],
        mcp_servers=mcp_servers,
        permission_mode="acceptEdits"
    )
    
    # –ü—Ä–æ–º–ø—Ç
    prompt = "Use mcp__digitalocean__list_apps function to list all DigitalOcean apps. Call it with parameter {\"query\": {}}."
    
    print(f"\nüì® –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–º–ø—Ç: {prompt}")
    print("-" * 60)
    
    messages = []
    async for message in query(prompt=prompt, options=options):
        messages.append(message)
        print(f"\nüì© –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {type(message).__name__}")
        if hasattr(message, 'content') and message.content:
            print(f"   –°–æ–¥–µ—Ä–∂–∏–º–æ–µ: {str(message.content)[:200]}...")
    
    print(f"\n‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    for msg in messages:
        if hasattr(msg, 'content') and isinstance(msg.content, list):
            for block in msg.content:
                if hasattr(block, 'name'):
                    print(f"\nüîß –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: {block.name}")
                    if hasattr(block, 'input'):
                        print(f"   –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {block.input}")

if __name__ == "__main__":
    asyncio.run(test_direct_mcp())