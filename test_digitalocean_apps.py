#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–ø—Ä–æ—Å–∞ –æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è—Ö DigitalOcean
"""
import asyncio
import logging
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥—É–ª–∏
from bot.webhook.handlers import webhook_handler
from bot.services.intelligent_agent_service import intelligent_agent_service

async def test_digitalocean_apps():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–æ–ø—Ä–æ—Å–∞ –æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è—Ö DigitalOcean"""
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∞
    test_update = {
        "update_id": 87654321,
        "message": {
            "message_id": 4321,
            "from": {
                "id": 229838448,  # Admin ID
                "is_bot": False,
                "first_name": "Artem",
                "username": "aaatema",
                "language_code": "ru"
            },
            "chat": {
                "id": 229838448,
                "first_name": "Artem",
                "username": "aaatema",
                "type": "private"
            },
            "date": int(datetime.now().timestamp()),
            "text": "–ø–æ–∫–∞–∂–∏ –º–æ–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ digitalocean"
        }
    }
    
    logger.info("=" * 80)
    logger.info("–¢–ï–°–¢: –í–æ–ø—Ä–æ—Å –æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è—Ö DigitalOcean")
    logger.info("=" * 80)
    
    logger.info(f"\nüì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: '{test_update['message']['text']}'")
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    result = await webhook_handler.handle_update(test_update)
    
    logger.info(f"\nüì• –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏ –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ MCP
    if result.get("ok"):
        logger.info("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ")
        if result.get("response_sent"):
            logger.info("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
            logger.info(f"   Message ID: {result.get('message_id')}")
        else:
            logger.error("‚ùå –û—Ç–≤–µ—Ç –ù–ï –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
    else:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {result.get('error')}")


async def test_direct_mcp_command():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä—è–º–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ MCP –∫–æ–º–∞–Ω–¥—ã"""
    logger.info("\n" + "=" * 80)
    logger.info("–ü–†–Ø–ú–û–ô –¢–ï–°–¢ MCP –ö–û–ú–ê–ù–î–´")
    logger.info("=" * 80)
    
    if intelligent_agent_service and intelligent_agent_service.agent:
        agent = intelligent_agent_service.agent
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–æ–º–∞–Ω–¥—ã –Ω–∞–ø—Ä—è–º—É—é
        response = await agent.process_message(
            message="–ø–æ–∫–∞–∂–∏ —Å–ø–∏—Å–æ–∫ –º–æ–∏—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –Ω–∞ digitalocean",
            user_id="229838448",
            context=None
        )
        
        logger.info(f"\nAgent Response:")
        logger.info(f"   Message: {response.message[:200]}...")
        logger.info(f"   Tool Used: {response.tool_used}")
        logger.info(f"   Intent: {response.intent}")
        logger.info(f"   Confidence: {response.confidence}")
        
        if response.tool_response:
            logger.info(f"\nTool Response:")
            logger.info(f"   Success: {response.tool_response.success}")
            if response.tool_response.data:
                logger.info(f"   Command: {response.tool_response.data.get('command')}")
                logger.info(f"   Response: {response.tool_response.data.get('response', '')[:200]}...")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # –¢–µ—Å—Ç 1: –ß–µ—Ä–µ–∑ webhook handler
    await test_digitalocean_apps()
    
    # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞
    await asyncio.sleep(2)
    
    # –¢–µ—Å—Ç 2: –ù–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ Intelligent Agent
    await test_direct_mcp_command()


if __name__ == "__main__":
    asyncio.run(main())