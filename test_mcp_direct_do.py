#!/usr/bin/env python3
"""
–ü—Ä—è–º–æ–π —Ç–µ—Å—Ç DigitalOcean MCP –∫–æ–º–∞–Ω–¥—ã
"""

import asyncio
import logging
import sys
from pathlib import Path
import os

# –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('mcp_direct_do.log'),
        logging.StreamHandler()
    ]
)

sys.path.insert(0, str(Path(__file__).parent))

from dotenv import load_dotenv
load_dotenv()

# Moonshot API
os.environ["ANTHROPIC_BASE_URL"] = "https://api.moonshot.ai/anthropic"
os.environ["ANTHROPIC_AUTH_TOKEN"] = "sk-QNnXEpPxnV9OCIhr6IMUcXQu2b4Vsuq2biZVAFce0KIoUTsx"

# –û—Ç–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏ –æ—Ç urllib3
import urllib3
urllib3.disable_warnings()
logging.getLogger("urllib3").setLevel(logging.WARNING)

from bot.services.claude_code_service import ClaudeCodeService

async def test_direct_do():
    """–¢–µ—Å—Ç –ø—Ä—è–º–æ–π –∫–æ–º–∞–Ω–¥—ã DigitalOcean"""
    
    print("\nüöÄ –¢–µ—Å—Ç –ø—Ä—è–º–æ–π –∫–æ–º–∞–Ω–¥—ã DigitalOcean")
    print("=" * 60)
    
    service = ClaudeCodeService()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    print("\nüìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:")
    print(f"  - MCP –≤–∫–ª—é—á–µ–Ω: {service.enabled}")
    print(f"  - –ö–æ–Ω—Ñ–∏–≥ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {service.mcp_config_path.exists()}")
    
    if service.mcp_config_path.exists():
        import json
        with open(service.mcp_config_path) as f:
            config = json.load(f)
            servers = list(config.get("mcpServers", {}).keys())
            print(f"  - MCP —Å–µ—Ä–≤–µ—Ä—ã: {servers}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º DigitalOcean
            do_config = config.get("mcpServers", {}).get("digitalocean", {})
            if do_config:
                print("\n‚úÖ DigitalOcean MCP –Ω–∞—Å—Ç—Ä–æ–µ–Ω:")
                print(f"  - Command: {do_config.get('command')}")
                print(f"  - Env token: {'DIGITALOCEAN_API_TOKEN' in do_config.get('env', {})}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É
    print("\nüì® –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É: /mcp apps")
    print("-" * 60)
    
    result = await service.execute_mcp_command("/mcp apps")
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç:")
    print(f"  - –£—Å–ø–µ—à–Ω–æ: {result.get('success')}")
    print(f"  - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {result.get('message_count', 0)}")
    
    if result.get('error'):
        print(f"  - ‚ùå –û—à–∏–±–∫–∞: {result.get('error')}")
    
    if result.get('response'):
        print(f"\nüìù –û—Ç–≤–µ—Ç:")
        print("-" * 60)
        print(result.get('response'))
        
    if result.get('data'):
        print(f"\nüì¶ –î–∞–Ω–Ω—ã–µ:")
        print("-" * 60)
        print(result.get('data'))

if __name__ == "__main__":
    asyncio.run(test_direct_do())