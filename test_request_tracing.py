#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É —Å–∏—Å—Ç–µ–º—ã —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏ —á–µ—Ä–µ–∑ –≤—Å—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É –±–æ—Ç–∞
"""

import asyncio
import sys
import os
from dataclasses import dataclass
from typing import Optional

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º –±–æ—Ç–∞
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'bot'))

try:
    from bot.core.request_tracer import request_tracer, ComponentType, ComponentStep, TraceStatus
    from bot.core.interfaces import Message, User, UserRole
    from bot.core.base_agent import ChainedAgent
    from bot.core.agent_adapters import IntelligentAgentAdapter, DefaultAgentAdapter
    IMPORTS_OK = True
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    IMPORTS_OK = False

@dataclass
class TestResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞"""
    test_name: str
    success: bool
    error: Optional[str] = None
    duration_ms: Optional[float] = None

async def test_basic_tracing():
    """–¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏"""
    print("\nüß™ –¢–µ—Å—Ç 1: –ë–∞–∑–æ–≤–∞—è —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤")
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫—É
        trace_id = request_tracer.create_trace(
            user_id="test_user_123",
            session_id="test_session_456",
            metadata={"test": "basic_tracing"}
        )
        
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞: {trace_id}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏—è
        request_tracer.add_event(
            trace_id, ComponentType.WEBHOOK, ComponentStep.WEBHOOK_RECEIVED,
            details={"message": "test message"}, duration_ms=5.0
        )
        
        request_tracer.add_event(
            trace_id, ComponentType.AGENT, ComponentStep.AGENT_ROUTING,
            details={"available_agents": 2}, duration_ms=10.0
        )
        
        request_tracer.add_event(
            trace_id, ComponentType.AGENT, ComponentStep.AGENT_PROCESSING,
            details={"selected_agent": "IntelligentAgent"}, duration_ms=150.0
        )
        
        print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã —Å–æ–±—ã—Ç–∏—è —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏")
        
        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫—É
        request_tracer.complete_trace(
            trace_id, TraceStatus.COMPLETED,
            final_metadata={"result": "success", "response_length": 100}
        )
        
        print("‚úÖ –¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏
        trace = request_tracer.get_trace(trace_id)
        if trace:
            print(f"üìä –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏: {trace.duration_ms:.1f}ms")
            print(f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–±—ã—Ç–∏–π: {len(trace.events)}")
            print(f"üìä –°—Ç–∞—Ç—É—Å: {trace.status.value}")
            print(f"üìä –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º: {trace.component_durations}")
        
        return TestResult("basic_tracing", True, duration_ms=trace.duration_ms if trace else None)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –±–∞–∑–æ–≤–æ–º —Ç–µ—Å—Ç–µ: {e}")
        return TestResult("basic_tracing", False, error=str(e))

async def test_context_manager():
    """–¢–µ—Å—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–ª—è —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏"""
    print("\nüß™ –¢–µ—Å—Ç 2: –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏")
    
    try:
        trace_id = request_tracer.create_trace("test_user_456", metadata={"test": "context_manager"})
        
        # –¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
        async with request_tracer.trace_operation(
            trace_id, ComponentType.MCP, ComponentStep.TOOL_EXECUTION,
            details={"tool": "test_tool"}
        ):
            await asyncio.sleep(0.01)  # –ò–º–∏—Ç–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç—É
            print("‚úÖ –£—Å–ø–µ—à–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä")
        
        # –¢–µ—Å—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –æ—à–∏–±–∫–æ–π
        try:
            async with request_tracer.trace_operation(
                trace_id, ComponentType.AGENT, ComponentStep.AGENT_PROCESSING,
                details={"agent": "test_agent"}
            ):
                await asyncio.sleep(0.005)
                raise ValueError("–¢–µ—Å—Ç–æ–≤–∞—è –æ—à–∏–±–∫–∞")
        except ValueError:
            print("‚úÖ –û—à–∏–±–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º")
        
        request_tracer.complete_trace(trace_id, TraceStatus.COMPLETED)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–±—ã—Ç–∏—è
        trace = request_tracer.get_trace(trace_id)
        if trace and len(trace.events) >= 2:
            success_event = trace.events[0]
            error_event = trace.events[1]
            
            print(f"üìä –£—Å–ø–µ—à–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ: {success_event.success}, –≤—Ä–µ–º—è: {success_event.duration_ms:.1f}ms")
            print(f"üìä –°–æ–±—ã—Ç–∏–µ —Å –æ—à–∏–±–∫–æ–π: {error_event.success}, –æ—à–∏–±–∫–∞: {error_event.error}")
            
        return TestResult("context_manager", True)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞: {e}")
        return TestResult("context_manager", False, error=str(e))

async def test_performance_metrics():
    """–¢–µ—Å—Ç –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    print("\nüß™ –¢–µ—Å—Ç 3: –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
    
    try:
        # –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–æ–∫ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        for i in range(3):
            trace_id = request_tracer.create_trace(f"test_user_{i}", metadata={"test": "performance"})
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
            request_tracer.add_event(
                trace_id, ComponentType.WEBHOOK, ComponentStep.WEBHOOK_RECEIVED,
                duration_ms=2.0 + i
            )
            request_tracer.add_event(
                trace_id, ComponentType.AGENT, ComponentStep.AGENT_PROCESSING,
                duration_ms=50.0 + i * 10
            )
            
            if i % 2 == 0:
                request_tracer.complete_trace(trace_id, TraceStatus.COMPLETED)
            else:
                request_tracer.complete_trace(trace_id, TraceStatus.FAILED)
        
        # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
        metrics = request_tracer.get_performance_metrics()
        
        print("üìä –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:")
        print(f"   –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {metrics['total_requests']}")
        print(f"   –£—Å–ø–µ—à–Ω—ã—Ö: {metrics['successful_requests']}")
        print(f"   –ù–µ—É—Å–ø–µ—à–Ω—ã—Ö: {metrics['failed_requests']}")
        print(f"   –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {metrics['success_rate']:.1%}")
        print(f"   –°—Ä–µ–¥–Ω—è—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {metrics['avg_duration_ms']:.1f}ms")
        print(f"   –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–æ–∫: {metrics['active_traces']}")
        print(f"   –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–æ–∫: {metrics['completed_traces']}")
        
        if metrics['component_performance']:
            print("   –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º:")
            for component, stats in metrics['component_performance'].items():
                print(f"     {component}: {stats['avg_ms']:.1f}ms (—Å—Ä–µ–¥–Ω–µ–µ)")
        
        return TestResult("performance_metrics", True)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –º–µ—Ç—Ä–∏–∫: {e}")
        return TestResult("performance_metrics", False, error=str(e))

async def test_agent_integration():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —Å–∏—Å—Ç–µ–º–æ–π –∞–≥–µ–Ω—Ç–æ–≤"""
    print("\nüß™ –¢–µ—Å—Ç 4: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å–∏—Å—Ç–µ–º–æ–π –∞–≥–µ–Ω—Ç–æ–≤")
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        test_user = User(id=12345, role=UserRole.ADMIN)
        test_message = Message(
            text="–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏",
            user=test_user,
            chat_id=67890
        )
        
        # –°–æ–∑–¥–∞–µ–º –∞–≥–µ–Ω—Ç–æ–≤ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã)
        agents = []
        
        try:
            intelligent_agent = IntelligentAgentAdapter()
            agents.append(intelligent_agent)
            print("‚úÖ IntelligentAgentAdapter —Å–æ–∑–¥–∞–Ω")
        except Exception as e:
            print(f"‚ö†Ô∏è IntelligentAgent –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        
        try:
            default_agent = DefaultAgentAdapter()
            agents.append(default_agent)
            print("‚úÖ DefaultAgentAdapter —Å–æ–∑–¥–∞–Ω")
        except Exception as e:
            print(f"‚ö†Ô∏è DefaultAgent –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        
        if not agents:
            print("‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∞")
            return TestResult("agent_integration", False, error="No agents available")
        
        # –°–æ–∑–¥–∞–µ–º ChainedAgent
        chained_agent = ChainedAgent(agents)
        print(f"‚úÖ ChainedAgent —Å–æ–∑–¥–∞–Ω —Å {len(agents)} –∞–≥–µ–Ω—Ç–∞–º–∏")
        
        # –î–æ–±–∞–≤–ª—è–µ–º trace_id –∫ —Å–æ–æ–±—â–µ–Ω–∏—é
        trace_id = request_tracer.create_trace(
            str(test_user.id), 
            session_id=str(test_message.chat_id),
            metadata={"test": "agent_integration"}
        )
        test_message.trace_id = trace_id
        
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –¥–ª—è –∞–≥–µ–Ω—Ç–æ–≤: {trace_id}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Ü–µ—Å—Å can_handle (–Ω–µ process_message, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤)
        print("\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∞–≥–µ–Ω—Ç–æ–≤...")
        for i, agent in enumerate(agents):
            try:
                can_handle = await agent.can_handle(test_message)
                print(f"   –ê–≥–µ–Ω—Ç {i+1} ({agent.get_name()}): can_handle = {can_handle}")
            except Exception as e:
                print(f"   –ê–≥–µ–Ω—Ç {i+1} ({agent.get_name()}): –æ—à–∏–±–∫–∞ = {e}")
        
        request_tracer.complete_trace(trace_id, TraceStatus.COMPLETED)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫—É
        trace = request_tracer.get_trace(trace_id)
        if trace:
            print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏ –∞–≥–µ–Ω—Ç–æ–≤:")
            print(f"   –°–æ–±—ã—Ç–∏—è: {len(trace.events)}")
            for event in trace.events:
                print(f"   - {event.component.value} -> {event.step.value}: {event.success}")
        
        return TestResult("agent_integration", True)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∞–≥–µ–Ω—Ç–æ–≤: {e}")
        return TestResult("agent_integration", False, error=str(e))

async def test_cleanup():
    """–¢–µ—Å—Ç –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–æ–∫"""
    print("\nüß™ –¢–µ—Å—Ç 5: –û—á–∏—Å—Ç–∫–∞ —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–æ–∫")
    
    try:
        initial_metrics = request_tracer.get_performance_metrics()
        initial_completed = initial_metrics['completed_traces']
        
        print(f"üìä –ù–∞—á–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–æ–∫: {initial_completed}")
        
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞
        request_tracer._cleanup_old_traces()
        
        after_cleanup_metrics = request_tracer.get_performance_metrics()
        after_completed = after_cleanup_metrics['completed_traces']
        
        print(f"üìä –ü–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏: {after_completed}")
        print("‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        
        return TestResult("cleanup", True)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –æ—á–∏—Å—Ç–∫–∏: {e}")
        return TestResult("cleanup", False, error=str(e))

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤")
    print("=" * 60)
    
    if not IMPORTS_OK:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥—É–ª–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∫—É.")
        return
    
    # –°–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤
    tests = [
        test_basic_tracing,
        test_context_manager,
        test_performance_metrics,
        test_agent_integration,
        test_cleanup
    ]
    
    results = []
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    for test_func in tests:
        try:
            result = await test_func()
            results.append(result)
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ {test_func.__name__}: {e}")
            results.append(TestResult(test_func.__name__, False, error=str(e)))
    
    # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–∏
    print("\n" + "=" * 60)
    print("üìä –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 60)
    
    successful = 0
    failed = 0
    
    for result in results:
        status = "‚úÖ –£–°–ü–ï–•" if result.success else "‚ùå –û–®–ò–ë–ö–ê"
        duration_info = f" ({result.duration_ms:.1f}ms)" if result.duration_ms else ""
        error_info = f" - {result.error}" if result.error else ""
        
        print(f"{status}: {result.test_name}{duration_info}{error_info}")
        
        if result.success:
            successful += 1
        else:
            failed += 1
    
    print("\n" + "-" * 40)
    print(f"–£—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {successful}")
    print(f"–ù–µ—É—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {failed}")
    print(f"–û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {'‚úÖ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò' if failed == 0 else '‚ùå –ï–°–¢–¨ –û–®–ò–ë–ö–ò'}")
    
    # –§–∏–Ω–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    try:
        final_metrics = request_tracer.get_performance_metrics()
        print(f"\nüìä –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤—â–∏–∫–∞:")
        print(f"   –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {final_metrics['total_requests']}")
        print(f"   –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–æ–∫: {final_metrics['active_traces']}")
        print(f"   –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–æ–∫: {final_metrics['completed_traces']}")
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏: {e}")

if __name__ == "__main__":
    asyncio.run(main())