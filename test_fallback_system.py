#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã fallback LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
OpenAI ‚Üí Anthropic ‚Üí Claude SDK
"""
import asyncio
import os
import sys
from pathlib import Path
from typing import Dict, Any

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.append(str(Path(__file__).parent))

from agent.core.intelligent_agent import IntelligentAgent

async def test_normal_operation():
    """–¢–µ—Å—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å OpenAI"""
    print("\nüß™ === –¢–ï–°–¢ 1: –ù–æ—Ä–º–∞–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å OpenAI ===")
    
    openai_key = os.getenv("OPENAI_API_KEY")
    anthropic_key = os.getenv("ANTHROPIC_API_KEY")
    
    if not openai_key:
        print("‚ùå OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç")
        return False
    
    print(f"‚úÖ OpenAI –∫–ª—é—á: {'***' + openai_key[-4:] if openai_key else '–ù–µ—Ç'}")
    print(f"‚úÖ Anthropic –∫–ª—é—á: {'***' + anthropic_key[-4:] if anthropic_key else '–ù–µ—Ç'}")
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∞–≥–µ–Ω—Ç–∞ —Å –æ–±–æ–∏–º–∏ –∫–ª—é—á–∞–º–∏
        agent = IntelligentAgent(
            api_key=openai_key,
            model="gpt-4o-mini",  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –¥–µ—à–µ–≤—É—é –º–æ–¥–µ–ª—å –¥–ª—è —Ç–µ—Å—Ç–æ–≤
            anthropic_api_key=anthropic_key
        )
        
        print("‚úÖ IntelligentAgent —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
        print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {agent.provider_stats}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        response = await agent.process_message(
            message="–ü—Ä–∏–≤–µ—Ç! –°–∫–∞–∂–∏ –ø—Ä–æ—Å—Ç–æ '–ü—Ä–∏–≤–µ—Ç –æ—Ç –∞–≥–µ–Ω—Ç–∞'",
            user_id="test_user"
        )
        
        print(f"üìù –û—Ç–≤–µ—Ç: {response.message[:100]}...")
        print(f"üìä –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {response.confidence}")
        print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å–ª–µ: {agent.provider_stats}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ: {e}")
        return False

async def test_openai_failure():
    """–¢–µ—Å—Ç fallback –ø—Ä–∏ –æ—Ç–∫–∞–∑–µ OpenAI"""
    print("\nüß™ === –¢–ï–°–¢ 2: Fallback –ø—Ä–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º OpenAI –∫–ª—é—á–µ ===")
    
    anthropic_key = os.getenv("ANTHROPIC_API_KEY")
    
    if not anthropic_key:
        print("‚ùå ANTHROPIC_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç fallback")
        return False
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∞–≥–µ–Ω—Ç–∞ —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º OpenAI –∫–ª—é—á–æ–º
        agent = IntelligentAgent(
            api_key="sk-invalid_key_to_test_fallback",  # –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–ª—é—á
            model="gpt-4o-mini",
            anthropic_api_key=anthropic_key
        )
        
        print("‚úÖ IntelligentAgent —Å–æ–∑–¥–∞–Ω —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º OpenAI –∫–ª—é—á–æ–º")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º fallback –Ω–∞ Anthropic
        response = await agent.process_message(
            message="–°–∫–∞–∂–∏ '–ü—Ä–∏–≤–µ—Ç –æ—Ç Anthropic fallback'",
            user_id="test_user"
        )
        
        print(f"üìù –û—Ç–≤–µ—Ç: {response.message[:100]}...")
        print(f"üìä –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {response.confidence}")
        print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {agent.provider_stats}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –±—ã–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω Anthropic
        if agent.provider_stats["anthropic_calls"] > 0:
            print("‚úÖ Fallback –Ω–∞ Anthropic —Ä–∞–±–æ—Ç–∞–µ—Ç!")
            return True
        else:
            print("‚ùå Fallback –Ω–∞ Anthropic –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª")
            return False
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ fallback: {e}")
        return False

async def test_claude_sdk_fallback():
    """–¢–µ—Å—Ç fallback –Ω–∞ Claude SDK –ø—Ä–∏ –æ—Ç–∫–∞–∑–µ –≤—Å–µ—Ö LLM"""
    print("\nüß™ === –¢–ï–°–¢ 3: Fallback –Ω–∞ Claude SDK ===")
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∞–≥–µ–Ω—Ç–∞ –±–µ–∑ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –∫–ª—é—á–µ–π
        agent = IntelligentAgent(
            api_key="sk-invalid_openai_key",
            model="gpt-4o-mini",
            anthropic_api_key="sk-ant-invalid_anthropic_key"
        )
        
        print("‚úÖ IntelligentAgent —Å–æ–∑–¥–∞–Ω –±–µ–∑ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –∫–ª—é—á–µ–π")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Claude SDK
        if agent.claude_code_service:
            print("‚úÖ Claude Code Service –¥–æ—Å—Ç—É–ø–µ–Ω")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º fallback –Ω–∞ Claude SDK
            response = await agent.process_message(
                message="—Å–ø–∏—Å–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π",  # MCP –∫–æ–º–∞–Ω–¥–∞
                user_id="test_user"
            )
            
            print(f"üìù –û—Ç–≤–µ—Ç: {response.message[:100]}...")
            print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {agent.provider_stats}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –±—ã–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω Claude SDK
            if agent.provider_stats["claude_sdk_calls"] > 0:
                print("‚úÖ Fallback –Ω–∞ Claude SDK —Ä–∞–±–æ—Ç–∞–µ—Ç!")
                return True
            else:
                print("‚ö†Ô∏è Claude SDK –Ω–µ –±—ã–ª –≤—ã–∑–≤–∞–Ω (–≤–æ–∑–º–æ–∂–Ω–æ, –∏–∑-–∑–∞ –æ—à–∏–±–æ–∫ API)")
                return False
        else:
            print("‚ö†Ô∏è Claude Code Service –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return False
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ Claude SDK: {e}")
        return False

async def test_provider_statistics():
    """–¢–µ—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤"""
    print("\nüß™ === –¢–ï–°–¢ 4: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ ===")
    
    openai_key = os.getenv("OPENAI_API_KEY")
    anthropic_key = os.getenv("ANTHROPIC_API_KEY")
    
    if not openai_key:
        print("‚ùå OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    try:
        agent = IntelligentAgent(
            api_key=openai_key,
            model="gpt-4o-mini",
            anthropic_api_key=anthropic_key
        )
        
        print("üìä –ù–∞—á–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:", agent.provider_stats)
        
        # –î–µ–ª–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø—Ä–æ—Å–æ–≤
        messages = [
            "–ü—Ä–∏–≤–µ—Ç",
            "–ö–∞–∫ –¥–µ–ª–∞?", 
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–≤–µ—Ç—ã"
        ]
        
        for i, msg in enumerate(messages, 1):
            print(f"\nüì® –ó–∞–ø—Ä–æ—Å {i}: {msg}")
            response = await agent.process_message(msg, user_id="test_user")
            print(f"üì® –û—Ç–≤–µ—Ç {i}: {response.message[:50]}...")
            print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {agent.provider_stats}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        return False

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ === –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´ FALLBACK LLM –ü–†–û–í–ê–ô–î–ï–†–û–í ===")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    print("\nüîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
    print(f"OPENAI_API_KEY: {'‚úÖ –ï—Å—Ç—å' if os.getenv('OPENAI_API_KEY') else '‚ùå –ù–µ—Ç'}")
    print(f"ANTHROPIC_API_KEY: {'‚úÖ –ï—Å—Ç—å' if os.getenv('ANTHROPIC_API_KEY') else '‚ùå –ù–µ—Ç'}")
    print(f"MCP_ENABLED: {os.getenv('MCP_ENABLED', 'false')}")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º .env —Ñ–∞–π–ª
    try:
        from dotenv import load_dotenv
        load_dotenv()
        print("‚úÖ .env —Ñ–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω")
    except ImportError:
        print("‚ö†Ô∏è python-dotenv –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º .env")
    
    results = []
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    test_functions = [
        ("–ù–æ—Ä–º–∞–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ OpenAI", test_normal_operation),
        ("Fallback –Ω–∞ Anthropic", test_openai_failure),
        ("Fallback –Ω–∞ Claude SDK", test_claude_sdk_fallback),
        ("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤", test_provider_statistics)
    ]
    
    for test_name, test_func in test_functions:
        try:
            result = await test_func()
            results.append((test_name, "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"))
        except Exception as e:
            results.append((test_name, f"üí• –û–®–ò–ë–ö–ê: {e}"))
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "="*60)
    print("üìã –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢:")
    for test_name, status in results:
        print(f"  {status}: {test_name}")
    
    passed = sum(1 for _, status in results if "‚úÖ" in status)
    total = len(results)
    print(f"\nüéØ –†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –°–∏—Å—Ç–µ–º–∞ fallback —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
    else:
        print("‚ö†Ô∏è –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–∏—Å—Ç–µ–º–æ–π fallback")

if __name__ == "__main__":
    asyncio.run(main())