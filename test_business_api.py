#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ Business API —Ñ—É–Ω–∫—Ü–∏–π
"""

import asyncio
import sys
import os
from unittest.mock import Mock, patch
from datetime import datetime
from dataclasses import dataclass
from enum import Enum
from typing import Dict, Any, Optional

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ç–∏–ø—ã –ª–æ–∫–∞–ª—å–Ω–æ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –∏–º–ø–æ—Ä—Ç–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
class UserRole(Enum):
    USER = "user"
    ADMIN = "admin"

class MessageType(Enum):
    TEXT = "text"
    VOICE = "voice"
    OTHER = "other"

@dataclass
class User:
    id: int
    username: Optional[str] = None
    first_name: Optional[str] = None
    last_name: Optional[str] = None
    role: UserRole = UserRole.USER

@dataclass
class Message:
    id: int
    user: User
    chat_id: int
    text: Optional[str] = None
    type: MessageType = MessageType.TEXT
    timestamp: Optional[datetime] = None
    metadata: Dict[str, Any] = None
    is_business_message: bool = False
    
    def __post_init__(self):
        if self.metadata is None:
            self.metadata = {}

# –ú–æ–∫–∞–µ–º config –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π
mock_config = Mock()
mock_config.telegram.token = "test_token"

# –°–æ–∑–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
def send_business_message_test(chat_id: int, text: str, business_connection_id: str) -> Dict[str, Any]:
    """–¢–µ—Å—Ç–æ–≤–∞—è –≤–µ—Ä—Å–∏—è send_business_message"""
    import requests
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if not chat_id:
        return {"success": False, "error": "Invalid chat_id", "details": "chat_id is required"}
    
    if not text or not text.strip():
        return {"success": False, "error": "Invalid text", "details": "text is required and cannot be empty"}
    
    if not business_connection_id:
        return {"success": False, "error": "Invalid business_connection_id", "details": "business_connection_id is required"}
    
    # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª–∏–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏—è
    if len(text) > 4096:
        text = text[:4093] + "..."
    
    url = f"https://api.telegram.org/bot{mock_config.telegram.token}/sendMessage"
    data = {
        "chat_id": chat_id,
        "text": text,
        "business_connection_id": business_connection_id,
        "parse_mode": "HTML"
    }
    
    try:
        response = requests.post(url, json=data, timeout=15)
        result = response.json()
        
        if response.status_code == 200 and result.get("ok"):
            message_id = result.get('result', {}).get('message_id', 'Unknown')
            return {
                "success": True, 
                "message_id": message_id,
                "api_response": result
            }
        else:
            error_code = result.get("error_code", "Unknown")
            error_description = result.get("description", "Unknown error")
            
            return {
                "success": False, 
                "error": f"Telegram API Error {error_code}",
                "details": error_description,
                "api_response": result
            }
            
    except requests.exceptions.Timeout:
        return {"success": False, "error": "Request timeout", "details": "Request took longer than 15 seconds"}
    except requests.exceptions.ConnectionError as e:
        return {"success": False, "error": "Connection error", "details": str(e)}
    except requests.exceptions.RequestException as e:
        return {"success": False, "error": "HTTP error", "details": str(e)}
    except ValueError as e:
        return {"success": False, "error": "JSON parse error", "details": str(e)}
    except Exception as e:
        return {"success": False, "error": "Unexpected error", "details": str(e)}


def test_send_business_message_validation():
    """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é send_business_message...")
    
    # –¢–µ—Å—Ç –ø—É—Å—Ç–æ–≥–æ chat_id
    result = send_business_message_test(None, "test", "conn_123")
    assert not result["success"], "–î–æ–ª–∂–µ–Ω –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –ø—É—Å—Ç–æ–π chat_id"
    assert "chat_id" in result["error"], f"–û—à–∏–±–∫–∞ –¥–æ–ª–∂–Ω–∞ —É–ø–æ–º–∏–Ω–∞—Ç—å chat_id: {result}"
    print("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è chat_id —Ä–∞–±–æ—Ç–∞–µ—Ç")
    
    # –¢–µ—Å—Ç –ø—É—Å—Ç–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
    result = send_business_message_test(123, "", "conn_123")
    assert not result["success"], "–î–æ–ª–∂–µ–Ω –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –ø—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç"
    assert "text" in result["error"], f"–û—à–∏–±–∫–∞ –¥–æ–ª–∂–Ω–∞ —É–ø–æ–º–∏–Ω–∞—Ç—å text: {result}"
    print("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è text —Ä–∞–±–æ—Ç–∞–µ—Ç")
    
    # –¢–µ—Å—Ç –ø—É—Å—Ç–æ–≥–æ business_connection_id
    result = send_business_message_test(123, "test", "")
    assert not result["success"], "–î–æ–ª–∂–µ–Ω –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –ø—É—Å—Ç–æ–π business_connection_id"
    assert "business_connection_id" in result["error"], f"–û—à–∏–±–∫–∞ –¥–æ–ª–∂–Ω–∞ —É–ø–æ–º–∏–Ω–∞—Ç—å business_connection_id: {result}"
    print("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è business_connection_id —Ä–∞–±–æ—Ç–∞–µ—Ç")
    
    print("‚úÖ –í—Å–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")


def test_message_length_limit():
    """–¢–µ—Å—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–ª–∏–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏—è"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª–∏–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏—è...")
    
    # –ú–æ–∫–∞–µ–º requests –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ API –≤—ã–∑–æ–≤–∞
    with patch('requests.post') as mock_post:
        mock_response = Mock()
        mock_response.status_code = 200
        mock_response.json.return_value = {"ok": True, "result": {"message_id": 123}}
        mock_post.return_value = mock_response
        
        # –¢–µ—Å—Ç –¥–ª–∏–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        long_text = "A" * 5000  # 5000 —Å–∏–º–≤–æ–ª–æ–≤
        result = send_business_message_test(123, long_text, "conn_123")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –±—ã–ª–∞ –≤—ã–∑–≤–∞–Ω–∞
        assert mock_post.called, "API –¥–æ–ª–∂–µ–Ω –±—ã–ª –±—ã—Ç—å –≤—ã–∑–≤–∞–Ω"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ç–µ–∫—Å—Ç –±—ã–ª –æ–±—Ä–µ–∑–∞–Ω
        call_args = mock_post.call_args
        sent_data = call_args[1]['json'] if 'json' in call_args[1] else call_args[0][1]
        sent_text = sent_data['text']
        
        assert len(sent_text) <= 4096, f"–¢–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–±—Ä–µ–∑–∞–Ω –¥–æ 4096 —Å–∏–º–≤–æ–ª–æ–≤, –ø–æ–ª—É—á–∏–ª–∏ {len(sent_text)}"
        assert sent_text.endswith("..."), "–û–±—Ä–µ–∑–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω –∑–∞–∫–∞–Ω—á–∏–≤–∞—Ç—å—Å—è –Ω–∞ '...'"
        
    print("‚úÖ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª–∏–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")


def test_business_message_structure():
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è Business —Å–æ–æ–±—â–µ–Ω–∏—è"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ Business —Å–æ–æ–±—â–µ–Ω–∏—è...")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    user = User(
        id=123456,
        username="testuser",
        first_name="Test",
        last_name="User",
        role=UserRole.USER
    )
    
    message = Message(
        id=1,
        user=user,
        chat_id=123456,
        text="–¢–µ—Å—Ç–æ–≤–æ–µ Business —Å–æ–æ–±—â–µ–Ω–∏–µ",
        type=MessageType.TEXT,
        timestamp=datetime.now(),
        metadata={"business_connection_id": "test_connection_123"},
        is_business_message=True
    )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∞–≥ Business —Å–æ–æ–±—â–µ–Ω–∏—è
    assert message.is_business_message == True, "–§–ª–∞–≥ is_business_message –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å True"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ business_connection_id –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
    assert "business_connection_id" in message.metadata, "business_connection_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö"
    assert message.metadata["business_connection_id"] == "test_connection_123", "business_connection_id –¥–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å"
    
    print("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ Business —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞!")


def test_error_handling():
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫...")
    
    # –ú–æ–∫–∞–µ–º requests –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏ –æ—à–∏–±–∫–∏ API
    with patch('requests.post') as mock_post:
        mock_response = Mock()
        mock_response.status_code = 400
        mock_response.json.return_value = {
            "ok": False, 
            "error_code": 400,
            "description": "Bad Request: business connection not found"
        }
        mock_post.return_value = mock_response
        
        result = send_business_message_test(123, "test", "invalid_connection")
        
        assert not result["success"], "–î–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å –æ—à–∏–±–∫—É –¥–ª—è –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"
        assert "400" in result["error"], f"–û—à–∏–±–∫–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–æ–¥ 400: {result}"
        assert "business connection not found" in result["details"], f"–î–µ—Ç–∞–ª–∏ –¥–æ–ª–∂–Ω—ã —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –æ—à–∏–±–∫–∏: {result}"
        
    print("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")


def main():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ Business API...\n")
    
    try:
        test_send_business_message_validation()
        test_message_length_limit()
        test_business_message_structure()
        test_error_handling()
        
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        print("\nüìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
        print("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
        print("‚úÖ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª–∏–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏–π")
        print("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ Business —Å–æ–æ–±—â–µ–Ω–∏–π")
        print("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ API")
        
        print("\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        print("1. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É —Ä–µ–∞–ª—å–Ω–æ–≥–æ Business —Å–æ–æ–±—â–µ–Ω–∏—è")
        print("2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ business_message")
        print("3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /business_status –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏")
        
        return True
        
    except Exception as e:
        print(f"\n‚ùå –¢–µ—Å—Ç —É–ø–∞–ª —Å –æ—à–∏–±–∫–æ–π: {e}")
        import traceback
        traceback.print_exc()
        return False


if __name__ == "__main__":
    success = main()
    exit(0 if success else 1)