#!/usr/bin/env python3
"""
–ü—Ä—è–º–æ–π —Ç–µ—Å—Ç MCP —á–µ—Ä–µ–∑ Claude Code SDK —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
"""

import asyncio
import os
from pathlib import Path
from claude_code_sdk import query, ClaudeCodeOptions

# –ó–∞–≥—Ä—É–∂–∞–µ–º .env
from dotenv import load_dotenv
load_dotenv()

async def test_direct_mcp():
    """–ü—Ä—è–º–æ–π —Ç–µ—Å—Ç MCP"""
    
    print("\nüîç –ü—Ä—è–º–æ–π —Ç–µ—Å—Ç MCP —á–µ—Ä–µ–∑ Claude Code SDK")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–æ–≤
    tokens = {
        "DIGITALOCEAN_TOKEN": os.getenv("DIGITALOCEAN_TOKEN"),
        "DIGITALOCEAN_API_TOKEN": os.getenv("DIGITALOCEAN_API_TOKEN"),
        "ANTHROPIC_API_KEY": os.getenv("ANTHROPIC_API_KEY")
    }
    
    for name, value in tokens.items():
        if value:
            print(f"‚úÖ {name}: {value[:10]}...")
        else:
            print(f"‚ùå {name}: –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º
    do_token = tokens["DIGITALOCEAN_TOKEN"] or tokens["DIGITALOCEAN_API_TOKEN"]
    
    if not do_token:
        print("\n‚ùå DigitalOcean —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é MCP —Å –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–æ–π —Ç–æ–∫–µ–Ω–∞
    mcp_config = {
        "mcpServers": {
            "digitalocean": {
                "command": "node",
                "args": [str(Path(__file__).parent / "docker/mcp/servers/digitalocean/server.js")],
                "env": {
                    "DIGITALOCEAN_API_TOKEN": do_token  # –ü—Ä—è–º–∞—è –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–æ–∫–µ–Ω–∞
                }
            }
        }
    }
    
    print(f"\nüìã MCP –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:")
    print(f"   Command: {mcp_config['mcpServers']['digitalocean']['command']}")
    print(f"   Args: {mcp_config['mcpServers']['digitalocean']['args']}")
    print(f"   Token: {do_token[:10]}...")
    
    # –û–ø—Ü–∏–∏ SDK
    options = ClaudeCodeOptions(
        max_turns=1,
        mcp_servers=mcp_config["mcpServers"],
        mcp_tools=["*"],
        permission_mode="acceptEdits"
    )
    
    print("\nüöÄ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞...")
    
    try:
        messages = []
        async for message in query(prompt="List DigitalOcean apps using MCP", options=options):
            msg_type = type(message).__name__
            content = str(getattr(message, 'content', ''))[:200] if hasattr(message, 'content') else 'No content'
            print(f"\nüì® {msg_type}:")
            print(f"   {content}")
            messages.append(message)
            
        print(f"\n‚úÖ –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {len(messages)}")
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(test_direct_mcp())