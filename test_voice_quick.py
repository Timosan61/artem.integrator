#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ MCP
"""

import asyncio
import sys
import os

sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from bot.services.claude_code_service import claude_code_service

async def quick_test():
    """–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –æ–¥–Ω–æ–π –≥–æ–ª–æ—Å–æ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã"""
    
    print("üöÄ –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ MCP")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–¥–Ω—É –∫–æ–º–∞–Ω–¥—É
    command = "/voice –∫–∞–∫–∏–µ —É –º–µ–Ω—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ DigitalOcean"
    
    try:
        result = await asyncio.wait_for(
            claude_code_service.execute_mcp_command(command, user_id="test_user"),
            timeout=30  # 30 —Å–µ–∫—É–Ω–¥ –º–∞–∫—Å–∏–º—É–º
        )
        
        if result["success"]:
            print("‚úÖ –£—Å–ø–µ—à–Ω–æ!")
            print(f"üìù –û—Ç–≤–µ—Ç: {result['response']}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {result.get('error')}")
            
    except asyncio.TimeoutError:
        print("‚è∞ –¢–∞–π–º-–∞—É—Ç —Ç–µ—Å—Ç–∞")
    except Exception as e:
        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")

if __name__ == "__main__":
    asyncio.run(quick_test())