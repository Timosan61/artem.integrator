"""
–¢–µ—Å—Ç—ã –¥–ª—è –≠—Ç–∞–ø–∞ 7: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è Intelligent Agent —Å Telegram
"""
import pytest
import asyncio
from unittest.mock import Mock, patch, AsyncMock, MagicMock
from datetime import datetime
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω—é –ø—Ä–æ–µ–∫—Ç–∞
import sys
sys.path.append(str(Path(__file__).parent.parent))

from bot.webhook.handlers import WebhookHandler
from bot.services.intelligent_agent_service import IntelligentAgentService
from bot.core.interfaces import Message, User, UserRole, MessageType, Response
from agent.core.models import AgentResponse, ToolResponse, ToolType
from agent.core.intents import Intent


class TestIntelligentAgentService:
    """–¢–µ—Å—Ç—ã –¥–ª—è IntelligentAgentService"""
    
    @pytest.fixture
    def mock_agent(self):
        """–°–æ–∑–¥–∞–µ—Ç –º–æ–∫ IntelligentAgent"""
        agent = Mock()
        agent.process_message = AsyncMock()
        return agent
    
    @pytest.fixture
    def mock_tool_registry(self):
        """–°–æ–∑–¥–∞–µ—Ç –º–æ–∫ ToolRegistry"""
        registry = Mock()
        registry.list_tools = Mock(return_value=["mcp_executor", "youtube_analyzer"])
        registry.get_tool = Mock()
        return registry
    
    @pytest.fixture
    def mock_confirmation_manager(self):
        """–°–æ–∑–¥–∞–µ—Ç –º–æ–∫ ConfirmationManager"""
        manager = Mock()
        manager.get_user_state = Mock(return_value=None)
        manager.get_active_confirmations_count = Mock(return_value=0)
        manager.create_confirmation = Mock(return_value="session_123")
        manager.clear_user_state = Mock()
        return manager
    
    @pytest.fixture
    def intelligent_agent_service(self, mock_agent, mock_tool_registry, mock_confirmation_manager):
        """–°–æ–∑–¥–∞–µ—Ç IntelligentAgentService —Å –º–æ–∫–∞–º–∏"""
        service = IntelligentAgentService()
        # –ó–∞–º–µ–Ω—è–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –º–æ–∫–∞–º–∏
        service.agent = mock_agent
        service.tool_registry = mock_tool_registry
        service.confirmation_manager = mock_confirmation_manager
        service.enabled = True
        return service
    
    @pytest.fixture
    def admin_message(self):
        """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∞"""
        user = User(
            id=123456,
            username="admin_user",
            first_name="Admin",
            last_name="User",
            role=UserRole.ADMIN
        )
        
        return Message(
            id=1,
            user=user,
            chat_id=123456,
            text="–ø–æ–∫–∞–∂–∏ –≤—Å–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è",
            type=MessageType.TEXT,
            timestamp=datetime.now()
        )
    
    @pytest.mark.asyncio
    async def test_process_message_success(self, intelligent_agent_service, admin_message, mock_agent):
        """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫ –æ—Ç–≤–µ—Ç–∞ –∞–≥–µ–Ω—Ç–∞
        agent_response = AgentResponse(
            message="–í–æ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π:\n- app1\n- app2",
            intent=Intent.MCP_COMMAND,
            confidence=0.95,
            tool_used=ToolType.MCP,
            requires_confirmation=False
        )
        mock_agent.process_message.return_value = agent_response
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        response = await intelligent_agent_service.process_message(admin_message)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        assert response.metadata["success"] is True
        assert "–í–æ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π" in response.text
        assert "_üîß –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω: mcp_" in response.text
        assert response.metadata["intent"] == "mcp_command"
        assert response.metadata["tool_used"] == "mcp_executor"
        assert response.metadata["confidence"] == 0.95
    
    @pytest.mark.asyncio
    async def test_process_message_with_confirmation(self, intelligent_agent_service, admin_message, mock_agent):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å –∑–∞–ø—Ä–æ—Å–æ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫ –æ—Ç–≤–µ—Ç–∞ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
        tool_response = ToolResponse(
            success=True,
            data={"command": "delete app", "app_name": "test-app"}
        )
        
        agent_response = AgentResponse(
            message="–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ test-app?",
            intent=Intent.MCP_COMMAND,
            confidence=0.9,
            tool_used=ToolType.MCP,
            requires_confirmation=True,
            tool_response=tool_response
        )
        mock_agent.process_message.return_value = agent_response
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        response = await intelligent_agent_service.process_message(admin_message)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        assert response.metadata["success"] is True
        assert "–í—ã —É–≤–µ—Ä–µ–Ω—ã" in response.text
        assert "‚úÖ –î–∞ / ‚ùå –ù–µ—Ç" in response.text
        assert response.metadata["confirmation_required"] is True
        assert response.metadata["session_id"] == "session_123"
    
    @pytest.mark.asyncio
    async def test_handle_confirmation_positive(self, intelligent_agent_service, mock_confirmation_manager, mock_tool_registry):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        confirmation_state = Mock()
        confirmation_state.tool_name = "mcp_executor"
        confirmation_state.parameters = Mock(command="delete app")
        mock_confirmation_manager.get_user_state.return_value = confirmation_state
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
        mock_tool = Mock()
        mock_tool.execute = AsyncMock(return_value=ToolResponse(
            success=True,
            data={"message": "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ"}
        ))
        mock_tool_registry.get_tool.return_value = mock_tool
        
        # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
        confirm_message = Mock()
        confirm_message.text = "–¥–∞"
        confirm_message.user = Mock(id=123)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        response = await intelligent_agent_service.process_message(confirm_message)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        assert response.metadata["success"] is True
        assert "‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ" in response.text
        mock_confirmation_manager.clear_user_state.assert_called_once_with("123")
    
    @pytest.mark.asyncio
    async def test_handle_confirmation_negative(self, intelligent_agent_service, mock_confirmation_manager):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        confirmation_state = Mock()
        mock_confirmation_manager.get_user_state.return_value = confirmation_state
        
        # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Ç–∫–∞–∑–æ–º
        cancel_message = Mock()
        cancel_message.text = "–Ω–µ—Ç"
        cancel_message.user = Mock(id=123)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–∫–∞–∑
        response = await intelligent_agent_service.process_message(cancel_message)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        assert response.metadata["success"] is True
        assert "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞" in response.text
        mock_confirmation_manager.clear_user_state.assert_called_once_with("123")
    
    @pytest.mark.asyncio
    async def test_service_not_available(self):
        """–¢–µ—Å—Ç –∫–æ–≥–¥–∞ —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"""
        service = IntelligentAgentService()
        service.enabled = False
        
        message = Mock()
        response = await service.process_message(message)
        
        assert response.metadata is None or response.metadata.get("success", False) is False
        assert "Intelligent Agent –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω" in response.text
    
    def test_get_status(self, intelligent_agent_service):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–∞"""
        status = intelligent_agent_service.get_status()
        
        assert status["enabled"] is True
        assert status["available"] is True
        assert status["tools"] == ["mcp_executor", "youtube_analyzer"]
        assert status["active_confirmations"] == 0


class TestWebhookIntegration:
    """–¢–µ—Å—Ç—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å webhook handlers"""
    
    @pytest.fixture
    def webhook_handler(self):
        """–°–æ–∑–¥–∞–µ—Ç WebhookHandler"""
        return WebhookHandler()
    
    @pytest.fixture
    def admin_update(self):
        """–°–æ–∑–¥–∞–µ—Ç update –æ—Ç –∞–¥–º–∏–Ω–∞"""
        return {
            "update_id": 123,
            "message": {
                "message_id": 1,
                "from": {
                    "id": 123456,
                    "username": "admin_user",
                    "first_name": "Admin"
                },
                "chat": {"id": 123456},
                "text": "–ø–æ–∫–∞–∂–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è",
                "date": int(datetime.now().timestamp())
            }
        }
    
    @pytest.fixture
    def regular_user_update(self):
        """–°–æ–∑–¥–∞–µ—Ç update –æ—Ç –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return {
            "update_id": 124,
            "message": {
                "message_id": 2,
                "from": {
                    "id": 789012,
                    "username": "regular_user",
                    "first_name": "User"
                },
                "chat": {"id": 789012},
                "text": "–ø—Ä–∏–≤–µ—Ç",
                "date": int(datetime.now().timestamp())
            }
        }
    
    @pytest.mark.asyncio
    @patch('bot.webhook.handlers.intelligent_agent_service')
    @patch('bot.webhook.handlers.is_admin')
    @patch('bot.telegram_bot.bot')
    async def test_admin_uses_intelligent_agent(self, mock_bot, mock_is_admin, mock_intelligent_service, webhook_handler, admin_update):
        """–¢–µ—Å—Ç —á—Ç–æ –∞–¥–º–∏–Ω—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç Intelligent Agent"""
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫–∏
        mock_is_admin.return_value = True
        mock_intelligent_service.is_available.return_value = True
        mock_intelligent_service.process_message = AsyncMock(return_value=Response(
            text="–†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç Intelligent Agent",
            metadata={"success": True}
        ))
        mock_bot.send_message = Mock()
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º update
        result = await webhook_handler.handle_update(admin_update)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è Intelligent Agent
        mock_intelligent_service.process_message.assert_called_once()
        mock_bot.send_message.assert_called_with(123456, "–†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç Intelligent Agent")
        assert result["ok"] is True
    
    @pytest.mark.asyncio
    @patch('bot.webhook.handlers.intelligent_agent_service')
    @patch('bot.webhook.handlers.is_admin')
    @patch('bot.core.agent.AgentFactory.get_agent')
    @patch('bot.telegram_bot.bot')
    async def test_regular_user_uses_standard_agent(self, mock_bot, mock_agent_factory, mock_is_admin, mock_intelligent_service, webhook_handler, regular_user_update):
        """–¢–µ—Å—Ç —á—Ç–æ –æ–±—ã—á–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∞–≥–µ–Ω—Ç"""
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫–∏
        mock_is_admin.return_value = False
        mock_intelligent_service.is_available.return_value = True
        
        # –°–æ–∑–¥–∞–µ–º –º–æ–∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
        standard_agent = Mock()
        standard_agent.process_message = AsyncMock(return_value=Response(
            text="–†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞",
            metadata={"success": True}
        ))
        mock_agent_factory.return_value = standard_agent
        webhook_handler.agent = standard_agent
        
        mock_bot.send_message = Mock()
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º update
        result = await webhook_handler.handle_update(regular_user_update)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ù–ï –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è Intelligent Agent
        mock_intelligent_service.process_message.assert_not_called()
        standard_agent.process_message.assert_called_once()
        mock_bot.send_message.assert_called_with(789012, "–†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞")
        assert result["ok"] is True
    
    @pytest.mark.asyncio
    @patch('bot.webhook.handlers.intelligent_agent_service')
    @patch('bot.webhook.handlers.is_admin')
    @patch('bot.telegram_bot.bot')
    async def test_agent_command(self, mock_bot, mock_is_admin, mock_intelligent_service, webhook_handler):
        """–¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã /agent"""
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫–∏
        mock_is_admin.return_value = True
        mock_intelligent_service.get_status.return_value = {
            "enabled": True,
            "available": True,
            "tools": ["mcp_executor", "youtube_analyzer"],
            "active_confirmations": 2
        }
        mock_bot.send_message = Mock()
        
        # –°–æ–∑–¥–∞–µ–º update —Å –∫–æ–º–∞–Ω–¥–æ–π /agent
        agent_command_update = {
            "update_id": 125,
            "message": {
                "message_id": 3,
                "from": {
                    "id": 123456,
                    "username": "admin_user",
                    "first_name": "Admin"
                },
                "chat": {"id": 123456},
                "text": "/agent",
                "date": int(datetime.now().timestamp())
            }
        }
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É
        result = await webhook_handler.handle_update(agent_command_update)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç
        call_args = mock_bot.send_message.call_args
        assert call_args[0][0] == 123456  # chat_id
        status_text = call_args[0][1]
        assert "üß† **Intelligent Agent Status**" in status_text
        assert "Enabled: ‚úÖ" in status_text
        assert "Available: ‚úÖ" in status_text
        assert "mcp_executor" in status_text
        assert "youtube_analyzer" in status_text
        assert "**Active Confirmations:** 2" in status_text
    
    @pytest.mark.asyncio
    @patch('bot.webhook.handlers.intelligent_agent_service', None)
    @patch('bot.webhook.handlers.is_admin')
    @patch('bot.telegram_bot.bot')
    async def test_agent_command_not_available(self, mock_bot, mock_is_admin, webhook_handler):
        """–¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã /agent –∫–æ–≥–¥–∞ —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"""
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫–∏
        mock_is_admin.return_value = True
        mock_bot.send_message = Mock()
        
        # –°–æ–∑–¥–∞–µ–º update —Å –∫–æ–º–∞–Ω–¥–æ–π /agent
        agent_command_update = {
            "update_id": 126,
            "message": {
                "message_id": 4,
                "from": {
                    "id": 123456,
                    "username": "admin_user",
                    "first_name": "Admin"
                },
                "chat": {"id": 123456},
                "text": "/agent",
                "date": int(datetime.now().timestamp())
            }
        }
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É
        result = await webhook_handler.handle_update(agent_command_update)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç
        call_args = mock_bot.send_message.call_args
        assert call_args[0][0] == 123456  # chat_id
        assert "‚ùå Intelligent Agent Service –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω" in call_args[0][1]


class TestHelperIntegration:
    """–¢–µ—Å—Ç—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å help —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏"""
    
    @pytest.mark.asyncio
    @patch('bot.webhook.handlers.intelligent_agent_service')
    @patch('bot.webhook.handlers.claude_code_service', Mock())
    @patch('bot.webhook.handlers.is_admin')
    @patch('bot.telegram_bot.bot')
    async def test_help_shows_agent_info_for_admin(self, mock_bot, mock_is_admin, mock_intelligent_service):
        """–¢–µ—Å—Ç —á—Ç–æ help –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≥–µ–Ω—Ç–µ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤"""
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫–∏
        mock_is_admin.return_value = True
        mock_intelligent_service.is_available.return_value = True
        mock_bot.send_message = Mock()
        
        webhook_handler = WebhookHandler()
        
        # –°–æ–∑–¥–∞–µ–º update —Å –∫–æ–º–∞–Ω–¥–æ–π /help
        help_update = {
            "update_id": 127,
            "message": {
                "message_id": 5,
                "from": {
                    "id": 123456,
                    "username": "admin_user",
                    "first_name": "Admin"
                },
                "chat": {"id": 123456},
                "text": "/help",
                "date": int(datetime.now().timestamp())
            }
        }
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É
        await webhook_handler.handle_update(help_update)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤ help –µ—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–≥–µ–Ω—Ç–µ
        call_args = mock_bot.send_message.call_args
        help_text = call_args[0][1]
        assert "üß† Intelligent Agent:" in help_text
        assert "/agent - –°—Ç–∞—Ç—É—Å Intelligent Agent" in help_text
        assert "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–∞–º–µ—Ä–µ–Ω–∏–π" in help_text
        assert "–û–±—É—á–µ–Ω–∏–µ –Ω–∞ –≤–∞—à–∏—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è—Ö" in help_text


if __name__ == "__main__":
    pytest.main([__file__, "-v", "--tb=short"])