"""
–¢–µ—Å—Ç—ã –¥–ª—è MCP Formatter

–ü—Ä–æ–≤–µ—Ä—è–µ—Ç:
- –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ SQL —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
- –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–æ–≤ –ø—Ä–æ–µ–∫—Ç–æ–≤/–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
- –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤ –¥–µ–ø–ª–æ–µ–≤
- –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–æ–≤
- –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
- –û–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫
"""

import pytest
from datetime import datetime
import pandas as pd
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω—é –ø—Ä–æ–µ–∫—Ç–∞
sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))))

from bot.formatters.mcp_formatter import MCPFormatter


class TestMCPFormatter:
    """–¢–µ—Å—Ç—ã –¥–ª—è MCPFormatter"""
    
    def test_format_sql_results_success(self):
        """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É—Å–ø–µ—à–Ω—ã—Ö SQL —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        result = {
            "success": True,
            "rows": [
                {"id": 1, "name": "User 1", "email": "user1@test.com"},
                {"id": 2, "name": "User 2", "email": "user2@test.com"}
            ],
            "affected_rows": 0,
            "execution_time": 0.123
        }
        
        formatted = MCPFormatter.format_sql_results(result)
        
        assert "üìä **–†–µ–∑—É–ª—å—Ç–∞—Ç SQL –∑–∞–ø—Ä–æ—Å–∞**" in formatted
        assert "User 1" in formatted
        assert "user1@test.com" in formatted
        assert "‚ö° –í—Ä–µ–º—è: 0.12—Å" in formatted
    
    def test_format_sql_results_empty(self):
        """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—É—Å—Ç—ã—Ö SQL —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        result = {
            "success": True,
            "rows": [],
            "affected_rows": 5,
            "execution_time": 0.05
        }
        
        formatted = MCPFormatter.format_sql_results(result)
        
        assert "üìä **SQL –∑–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω**" in formatted
        assert "üìù –ó–∞—Ç—Ä–æ–Ω—É—Ç–æ —Å—Ç—Ä–æ–∫: 5" in formatted
        assert "_–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—É—Å—Ç–æ–π_" in formatted
    
    def test_format_sql_results_many_rows(self):
        """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–æ–ª—å—à–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ç—Ä–æ–∫"""
        # –°–æ–∑–¥–∞–µ–º 15 —Å—Ç—Ä–æ–∫
        rows = [{"id": i, "value": f"value_{i}"} for i in range(15)]
        result = {
            "success": True,
            "rows": rows,
            "execution_time": 0.5
        }
        
        formatted = MCPFormatter.format_sql_results(result)
        
        assert "_–ü–æ–∫–∞–∑–∞–Ω—ã –ø–µ—Ä–≤—ã–µ 10 –∏–∑ 15 —Å—Ç—Ä–æ–∫_" in formatted
        assert "value_9" in formatted  # 10-—è —Å—Ç—Ä–æ–∫–∞
        assert "value_14" not in formatted  # 15-—è —Å—Ç—Ä–æ–∫–∞
    
    def test_format_project_list(self):
        """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤"""
        result = {
            "success": True,
            "projects": [
                {"id": "proj1", "name": "Production", "status": "active", "region": "us-east-1"},
                {"id": "proj2", "name": "Staging", "status": "paused", "region": "eu-west-1"}
            ]
        }
        
        formatted = MCPFormatter.format_project_list(result)
        
        assert "üìÇ **–ü—Ä–æ–µ–∫—Ç—ã Supabase** (2)" in formatted
        assert "üü¢ **Production**" in formatted
        assert "üü° **Staging**" in formatted
        assert "üÜî `proj1`" in formatted
        assert "üåç –†–µ–≥–∏–æ–Ω: us-east-1" in formatted
    
    def test_format_app_list(self):
        """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π"""
        result = {
            "success": True,
            "apps": [
                {
                    "id": "app1",
                    "name": "Web App",
                    "status": "active",
                    "updated_at": "2024-01-20T10:30:00Z"
                },
                {
                    "id": "app2",
                    "name": "API Server",
                    "status": "deploying"
                }
            ],
            "page": 1
        }
        
        formatted = MCPFormatter.format_app_list(result)
        
        assert "üåä **–ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è DigitalOcean** (—Å—Ç—Ä. 1)" in formatted
        assert "üü¢ **Web App**" in formatted
        assert "üöÄ **API Server**" in formatted
        assert "üÜî `app1`" in formatted
    
    def test_format_deployment_status(self):
        """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –¥–µ–ø–ª–æ—è"""
        result = {
            "success": True,
            "deployment": {
                "id": "deploy123",
                "created_at": "2024-01-20T10:00:00Z",
                "cause": "Manual deployment"
            },
            "status": "building",
            "status_emoji": "üî®",
            "progress": 45
        }
        
        formatted = MCPFormatter.format_deployment_status(result)
        
        assert "üî® **–°—Ç–∞—Ç—É—Å –¥–µ–ø–ª–æ—è**" in formatted
        assert "üìä –°—Ç–∞—Ç—É—Å: **building**" in formatted
        assert "üìà –ü—Ä–æ–≥—Ä–µ—Å—Å: [‚ñì‚ñì‚ñì‚ñì‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë] 45%" in formatted
        assert "üìù –ü—Ä–∏—á–∏–Ω–∞: Manual deployment" in formatted
    
    def test_format_logs(self):
        """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ª–æ–≥–æ–≤"""
        log_content = """[2024-01-20 10:00:00] Starting application...
[2024-01-20 10:00:01] Connecting to database...
[2024-01-20 10:00:02] Server listening on port 8080"""
        
        result = {
            "success": True,
            "logs": log_content,
            "app_id": "app123",
            "log_type": "RUN"
        }
        
        formatted = MCPFormatter.format_logs(result)
        
        assert "üìã **–õ–æ–≥–∏ RUN**" in formatted
        assert "üÜî App: `app123`" in formatted
        assert "Starting application..." in formatted
        assert "```" in formatted  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞
    
    def test_format_logs_truncated(self):
        """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª–∏–Ω–Ω—ã—Ö –ª–æ–≥–æ–≤"""
        # –°–æ–∑–¥–∞–µ–º –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–π –ª–æ–≥
        long_log = "A" * 4000
        
        result = {
            "success": True,
            "logs": long_log,
            "app_id": "app123",
            "log_type": "BUILD"
        }
        
        formatted = MCPFormatter.format_logs(result)
        
        assert "_...–ø–æ–∫–∞–∑–∞–Ω—ã –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3000 —Å–∏–º–≤–æ–ª–æ–≤_" in formatted
        assert len(formatted) < 4000  # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –ª–æ–≥ –æ–±—Ä–µ–∑–∞–Ω
    
    def test_format_doc_search_results(self):
        """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏"""
        result = {
            "success": True,
            "results": [
                {
                    "title": "React Hooks Guide",
                    "url": "https://docs.example.com/hooks",
                    "snippet": "Learn how to use React hooks effectively..."
                },
                {
                    "title": "useState Hook",
                    "url": "https://docs.example.com/usestate",
                    "snippet": "The useState hook allows you to add state to functional components."
                }
            ],
            "library": "react",
            "query": "hooks"
        }
        
        formatted = MCPFormatter.format_doc_search_results(result)
        
        assert "üìö **–ü–æ–∏—Å–∫ –≤ react**" in formatted
        assert "üîç –ó–∞–ø—Ä–æ—Å: ¬´hooks¬ª" in formatted
        assert "**1. React Hooks Guide**" in formatted
        assert "_Learn how to use React hooks effectively..._" in formatted
        assert "üîó [–ß–∏—Ç–∞—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é](https://docs.example.com/hooks)" in formatted
    
    def test_format_code_examples(self):
        """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏–º–µ—Ä–æ–≤ –∫–æ–¥–∞"""
        result = {
            "success": True,
            "examples": [
                {
                    "title": "Basic useState",
                    "code": "const [count, setCount] = useState(0);",
                    "language": "javascript",
                    "description": "Simple counter example"
                },
                {
                    "title": "useEffect Example",
                    "code": "useEffect(() => {\n  console.log('Component mounted');\n}, []);",
                    "language": "javascript"
                }
            ],
            "library": "react",
            "topic": "hooks"
        }
        
        formatted = MCPFormatter.format_code_examples(result)
        
        assert "üíª **–ü—Ä–∏–º–µ—Ä—ã react**" in formatted
        assert "üìñ –¢–µ–º–∞: hooks" in formatted
        assert "**Basic useState**" in formatted
        assert "_Simple counter example_" in formatted
        assert "```javascript" in formatted
        assert "const [count, setCount] = useState(0);" in formatted
    
    def test_format_error(self):
        """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫"""
        result = {
            "success": False,
            "error": "Connection timeout",
            "message": "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"
        }
        
        formatted = MCPFormatter.format_error(result)
        
        assert formatted == "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"
        
        # –¢–µ—Å—Ç —Å —Ç–æ–ª—å–∫–æ error
        result_error_only = {
            "success": False,
            "error": "Internal server error"
        }
        
        formatted2 = MCPFormatter.format_error(result_error_only)
        assert "‚ùå **–û—à–∏–±–∫–∞**" in formatted2
        assert "Internal server error" in formatted2
    
    def test_format_mcp_status(self):
        """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ MCP"""
        status = {
            "mcp_enabled": True,
            "anthropic_available": True,
            "openai_available": True,
            "total_functions": 15,
            "servers": {
                "supabase": {
                    "enabled": True,
                    "display_name": "Supabase",
                    "functions_count": 8
                },
                "digitalocean": {
                    "enabled": False,
                    "display_name": "DigitalOcean",
                    "functions_count": 0
                }
            }
        }
        
        formatted = MCPFormatter.format_mcp_status(status)
        
        assert "üîå **–°—Ç–∞—Ç—É—Å MCP**" in formatted
        assert "üìä MCP: ‚úÖ –í–∫–ª—é—á–µ–Ω" in formatted
        assert "ü§ñ Claude: ‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω" in formatted
        assert "üîß –§—É–Ω–∫—Ü–∏–π: 15" in formatted
        assert "‚úÖ Supabase (8 —Ñ—É–Ω–∫—Ü–∏–π)" in formatted
        assert "‚ùå DigitalOcean" in formatted
    
    def test_format_server_metrics(self):
        """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ—Ç—Ä–∏–∫"""
        metrics = {
            "total_calls": 100,
            "total_successful": 95,
            "total_failed": 5,
            "average_execution_time": 1.23,
            "servers": {
                "supabase": {
                    "total_calls": 60,
                    "functions": {
                        "list_projects": {"total_calls": 30},
                        "execute_sql": {"total_calls": 20},
                        "list_tables": {"total_calls": 10}
                    }
                },
                "digitalocean": {
                    "total_calls": 40,
                    "functions": {
                        "list_apps": {"total_calls": 25},
                        "create_deployment": {"total_calls": 15}
                    }
                }
            }
        }
        
        formatted = MCPFormatter.format_server_metrics(metrics)
        
        assert "üìä **–ú–µ—Ç—Ä–∏–∫–∏ MCP**" in formatted
        assert "üìà –í—Å–µ–≥–æ –≤—ã–∑–æ–≤–æ–≤: 100" in formatted
        assert "‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: 95 (95.0%)" in formatted
        assert "‚ùå –û—à–∏–±–æ–∫: 5" in formatted
        assert "‚ö° –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: 1.23—Å" in formatted
        assert "**supabase**: 60 –≤—ã–∑–æ–≤–æ–≤" in formatted
        assert "‚Ä¢ list_projects: 30" in formatted
    
    def test_format_help_message(self):
        """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏"""
        help_msg = MCPFormatter.format_help_message()
        
        assert "üîå **MCP –ö–æ–º–∞–Ω–¥—ã**" in help_msg
        assert "**Supabase:**" in help_msg
        assert "/mcp projects" in help_msg
        assert "**DigitalOcean:**" in help_msg
        assert "/deploy <app_id>" in help_msg
        assert "**Context7:**" in help_msg
        assert "/docs <–±–∏–±–ª–∏–æ—Ç–µ–∫–∞> <–∑–∞–ø—Ä–æ—Å>" in help_msg
    
    def test_format_time(self):
        """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏"""
        # ISO —Ñ–æ—Ä–º–∞—Ç —Å Z
        iso_time = "2024-01-20T15:30:45Z"
        formatted = MCPFormatter._format_time(iso_time)
        assert "20.01.2024" in formatted
        assert "15:30" in formatted
        
        # –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        invalid_time = "invalid-date"
        formatted_invalid = MCPFormatter._format_time(invalid_time)
        assert formatted_invalid == "invalid-date"
    
    def test_edge_cases(self):
        """–¢–µ—Å—Ç –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤"""
        # –ü—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        empty_result = {"success": True}
        
        # SQL –±–µ–∑ —Å—Ç—Ä–æ–∫
        formatted = MCPFormatter.format_sql_results(empty_result)
        assert "–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—É—Å—Ç–æ–π" in formatted
        
        # –ü—Ä–æ–µ–∫—Ç—ã –±–µ–∑ –¥–∞–Ω–Ω—ã—Ö
        empty_projects = {"success": True, "projects": []}
        formatted = MCPFormatter.format_project_list(empty_projects)
        assert "_–ü—Ä–æ–µ–∫—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ_" in formatted
        
        # –õ–æ–≥–∏ –±–µ–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        empty_logs = {"success": True, "logs": "", "app_id": "test", "log_type": "RUN"}
        formatted = MCPFormatter.format_logs(empty_logs)
        assert "_–õ–æ–≥–∏ –ø—É—Å—Ç—ã_" in formatted


# –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
if __name__ == "__main__":
    pytest.main([__file__, "-v"])