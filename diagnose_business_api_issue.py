#!/usr/bin/env python3
"""
–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø—Ä–æ–±–ª–µ–º—ã —Å Business API:
"–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞—é—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∞–≥–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ Business API"
"""

import sys
import os
import json
from typing import Dict, Any, List

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

def print_colored(text: str, color: str = "white"):
    """–ü–µ—á–∞—Ç—å —Å —Ü–≤–µ—Ç–∞–º–∏"""
    colors = {
        "red": "\033[0;31m",
        "green": "\033[0;32m", 
        "yellow": "\033[1;33m",
        "blue": "\033[0;34m",
        "white": "\033[0m"
    }
    reset = "\033[0m"
    print(f"{colors.get(color, colors['white'])}{text}{reset}")

def check_webhook_config():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é webhook –≤ –∫–æ–¥–µ"""
    print_colored("üîç –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ webhook –≤ –∫–æ–¥–µ...", "blue")
    
    try:
        from bot.core.config import config
        
        print("üìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è webhook:")
        print(f"   Base URL: {config.webhook.base_url}")
        print(f"   Secret Token: {'–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if config.webhook.secret_token else '–ù–ï —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")
        print(f"   Allowed Updates: {config.webhook.allowed_updates}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Business API —Å–æ–±—ã—Ç–∏—è
        business_events = ['business_message', 'business_connection']
        missing_events = []
        
        for event in business_events:
            if event not in config.webhook.allowed_updates:
                missing_events.append(event)
        
        if not missing_events:
            print_colored("‚úÖ Business API —Å–æ–±—ã—Ç–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏", "green")
        else:
            print_colored(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç Business —Å–æ–±—ã—Ç–∏—è: {missing_events}", "red")
            return False
            
        return True
        
    except Exception as e:
        print_colored(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}", "red")
        return False

def check_business_handlers():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ Business API"""
    print_colored("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ Business API...", "blue")
    
    try:
        from bot.webhook.handlers import WebhookHandler
        
        handler = WebhookHandler()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–µ—Ç–æ–¥–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Business API
        business_methods = [
            '_handle_business_message',
            '_handle_business_connection'
        ]
        
        missing_methods = []
        for method in business_methods:
            if not hasattr(handler, method):
                missing_methods.append(method)
        
        if not missing_methods:
            print_colored("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ Business API –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç", "green")
        else:
            print_colored(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –º–µ—Ç–æ–¥—ã: {missing_methods}", "red")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ—Ç–ø—Ä–∞–≤–∫–∏ Business —Å–æ–æ–±—â–µ–Ω–∏–π
        try:
            from bot.webhook.handlers import send_business_message
            print_colored("‚úÖ –§—É–Ω–∫—Ü–∏—è send_business_message() –Ω–∞–π–¥–µ–Ω–∞", "green")
        except ImportError:
            print_colored("‚ùå –§—É–Ω–∫—Ü–∏—è send_business_message() –ù–ï –Ω–∞–π–¥–µ–Ω–∞", "red")
            return False
            
        return True
        
    except Exception as e:
        print_colored(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤: {e}", "red")
        return False

def check_agent_routing():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏ –∫ –∞–≥–µ–Ω—Ç–∞–º"""
    print_colored("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏ –∞–≥–µ–Ω—Ç–æ–≤...", "blue")
    
    try:
        from bot.core.unified_agent import unified_agent
        from bot.core.interfaces import Message, User, UserRole, MessageType
        from datetime import datetime
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ Business —Å–æ–æ–±—â–µ–Ω–∏–µ
        test_user = User(
            id=123456,
            username="test_business_user",
            first_name="Test",
            role=UserRole.USER
        )
        
        business_message = Message(
            id=1,
            user=test_user,
            chat_id=123456,
            text="–¢–µ—Å—Ç–æ–≤–æ–µ Business —Å–æ–æ–±—â–µ–Ω–∏–µ",
            type=MessageType.TEXT,
            timestamp=datetime.now(),
            metadata={"business_connection_id": "test_connection_123"},
            is_business_message=True
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫–æ–π –∞–≥–µ–Ω—Ç –ø–æ–ª—É—á–∏—Ç —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
        # –ù–µ –≤—ã–∑—ã–≤–∞–µ–º process_message (—á—Ç–æ–±—ã –Ω–µ –¥–µ–ª–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤),
        # –∞ —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º get_agent_for_message
        
        # –ü–†–ò–ú–ï–ß–ê–ù–ò–ï: –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –º–æ–∂–µ—Ç –±—ã—Ç—å async, –ø–æ—ç—Ç–æ–º—É –æ–±—Ä–∞–±–æ—Ç–∞–µ–º –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ
        agent_info = "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏ —Ç—Ä–µ–±—É–µ—Ç –∑–∞–ø—É—â–µ–Ω–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è"
        
        print(f"üì® –¢–µ—Å—Ç–æ–≤–æ–µ Business —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ:")
        print(f"   User ID: {business_message.user.id}")
        print(f"   Is Business: {business_message.is_business_message}")
        print(f"   Connection ID: {business_message.metadata.get('business_connection_id')}")
        print(f"   Text: {business_message.text}")
        
        print_colored("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞ –¥–ª—è Business API", "green")
        return True
        
    except Exception as e:
        print_colored(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏: {e}", "red")
        return False

def check_send_business_function():
    """–î–µ—Ç–∞–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –æ—Ç–ø—Ä–∞–≤–∫–∏ Business —Å–æ–æ–±—â–µ–Ω–∏–π"""
    print_colored("üîç –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ send_business_message()...", "blue")
    
    try:
        from bot.webhook.handlers import send_business_message
        import inspect
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–∏–≥–Ω–∞—Ç—É—Ä—É —Ñ—É–Ω–∫—Ü–∏–∏
        sig = inspect.signature(send_business_message)
        print(f"üìù –°–∏–≥–Ω–∞—Ç—É—Ä–∞ —Ñ—É–Ω–∫—Ü–∏–∏: {sig}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        expected_params = ['chat_id', 'text', 'business_connection_id']
        actual_params = list(sig.parameters.keys())
        
        missing_params = [p for p in expected_params if p not in actual_params]
        if missing_params:
            print_colored(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: {missing_params}", "red")
            return False
        
        print_colored("‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ—É–Ω–∫—Ü–∏–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã", "green")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã–π —Ç–∏–ø (–≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏)
        source = inspect.getsource(send_business_message)
        if "Dict[str, Any]" in source or "return {" in source:
            print_colored("‚úÖ –§—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å (–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ)", "green")
        else:
            print_colored("‚ö†Ô∏è –í–æ–∑–≤—Ä–∞—â–∞–µ–º—ã–π —Ç–∏–ø –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω", "yellow")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        if "chat_id" in source and "business_connection_id" in source:
            print_colored("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç", "green")
        else:
            print_colored("‚ö†Ô∏è –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –Ω–µ–ø–æ–ª–Ω–∞—è", "yellow")
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ requests –¥–ª—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤
        if "requests.post" in source:
            print_colored("‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä—è–º—ã–µ HTTP –∑–∞–ø—Ä–æ—Å—ã (–ø—Ä–∞–≤–∏–ª—å–Ω–æ –¥–ª—è Business API)", "green")
        else:
            print_colored("‚ùå –ù–ï –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä—è–º—ã–µ HTTP –∑–∞–ø—Ä–æ—Å—ã (–ø—Ä–æ–±–ª–µ–º–∞!)", "red")
            return False
            
        return True
        
    except Exception as e:
        print_colored(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü–∏–∏: {e}", "red")
        return False

def analyze_potential_issues():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã"""
    print_colored("üîç –ê–Ω–∞–ª–∏–∑ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º...", "blue")
    
    issues_found = []
    
    print("üìã –ß–µ–∫-–ª–∏—Å—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º:")
    
    # 1. Webhook –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Å Business —Å–æ–±—ã—Ç–∏—è–º–∏
    print("   1. ‚ùì Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –±–µ–∑ Business —Å–æ–±—ã—Ç–∏–π")
    print("      –†–µ—à–µ–Ω–∏–µ: –ó–∞–ø—É—Å—Ç–∏—Ç—å ./check_and_setup_webhook.py")
    
    # 2. Business API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ Telegram
    print("   2. ‚ùì Business API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ Telegram Premium –∞–∫–∫–∞—É–Ω—Ç–µ")
    print("      –†–µ—à–µ–Ω–∏–µ: Settings ‚Üí Business ‚Üí Chatbots ‚Üí –ø–æ–¥–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞")
    
    # 3. pyTelegramBotAPI –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç Business API
    print("   3. ‚ùì –ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å bot.send_message() –¥–ª—è Business")
    print("      –†–µ—à–µ–Ω–∏–µ: –î–æ–ª–∂–Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ñ—É–Ω–∫—Ü–∏—è send_business_message()")
    
    # 4. –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π business_connection_id
    print("   4. ‚ùì –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–π business_connection_id")
    print("      –†–µ—à–µ–Ω–∏–µ: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å webhook –ø–æ–ª—É—á–∞–µ—Ç business_connection_id")
    
    # 5. –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ –Ω–∞ DigitalOcean
    print("   5. ‚ùì –ö–æ–¥ –Ω–µ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç –Ω–∞ DigitalOcean –∏–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∏ –¥–µ–ø–ª–æ—è")
    print("      –†–µ—à–µ–Ω–∏–µ: –ó–∞–ø—É—Å—Ç–∏—Ç—å ./get_digitalocean_logs.sh")
    
    # 6. –û—à–∏–±–∫–∏ –≤ –æ—Ç–ø—Ä–∞–≤–∫–µ HTTP –∑–∞–ø—Ä–æ—Å–æ–≤
    print("   6. ‚ùì –û—à–∏–±–∫–∏ –≤ send_business_message() –∏–ª–∏ timeout")
    print("      –†–µ—à–µ–Ω–∏–µ: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏ –∏ —É–ª—É—á—à–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫")
    
    print()
    print_colored("üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –ø–æ—Ä—è–¥–æ–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:", "yellow")
    print("   1. –ó–∞–ø—É—Å—Ç–∏—Ç—å ./get_digitalocean_logs.sh - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–µ–ø–ª–æ–π")
    print("   2. –ó–∞–ø—É—Å—Ç–∏—Ç—å ./check_and_setup_webhook.py - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å webhook")
    print("   3. –í –±–æ—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å /business_status - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
    print("   4. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —Ä–µ–∞–ª—å–Ω–æ–≥–æ Business —Å–æ–æ–±—â–µ–Ω–∏—è")
    print("   5. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏ DigitalOcean –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏")

def create_test_script():
    """–°–æ–∑–¥–∞–µ—Ç —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Business API"""
    print_colored("üìù –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç-—Å–∫—Ä–∏–ø—Ç–∞ –¥–ª—è Business API...", "blue")
    
    test_script = '''#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –¥–ª—è Business API –æ—Ç–ø—Ä–∞–≤–∫–∏
"""

import requests
import json
import os

def test_business_api_send():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É —á–µ—Ä–µ–∑ Business API"""
    
    # –í–ê–ñ–ù–û: –≠—Ç–æ —Ç–æ–ª—å–∫–æ —Ç–µ—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∑–∞–ø—Ä–æ—Å–∞!
    # –î–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –Ω—É–∂–Ω—ã –Ω–∞—Å—Ç–æ—è—â–∏–µ —Ç–æ–∫–µ–Ω –∏ connection_id
    
    bot_token = "YOUR_BOT_TOKEN"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –Ω–∞—Å—Ç–æ—è—â–∏–π
    business_connection_id = "YOUR_CONNECTION_ID"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –Ω–∞—Å—Ç–æ—è—â–∏–π
    chat_id = 123456  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –Ω–∞—Å—Ç–æ—è—â–∏–π
    
    url = f"https://api.telegram.org/bot{bot_token}/sendMessage"
    data = {
        "chat_id": chat_id,
        "text": "–¢–µ—Å—Ç Business API –æ—Ç–ø—Ä–∞–≤–∫–∏",
        "business_connection_id": business_connection_id
    }
    
    print("üì§ –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∫ Telegram Business API:")
    print(f"URL: {url}")
    print(f"Data: {json.dumps(data, indent=2)}")
    
    # –ù–ï –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –≤ —Ç–µ—Å—Ç–µ
    print("‚ö†Ô∏è –†–µ–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –ù–ï –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è (—ç—Ç–æ —Ç–æ–ª—å–∫–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞)")
    print("–î–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –∑–∞–º–µ–Ω–∏—Ç–µ —Ç–æ–∫–µ–Ω—ã –∏ —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –∫–æ–¥ –Ω–∏–∂–µ:")
    print()
    print("# response = requests.post(url, json=data)")
    print("# result = response.json()")
    print("# print(f'–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}')")

if __name__ == "__main__":
    test_business_api_send()
'''
    
    try:
        with open("test_business_api_send.py", "w", encoding="utf-8") as f:
            f.write(test_script)
        
        os.chmod("test_business_api_send.py", 0o755)
        print_colored("‚úÖ –°–æ–∑–¥–∞–Ω test_business_api_send.py", "green")
        
    except Exception as e:
        print_colored(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç-—Å–∫—Ä–∏–ø—Ç–∞: {e}", "red")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    print_colored("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–†–û–ë–õ–ï–ú–´ BUSINESS API", "blue")
    print_colored("–ü—Ä–æ–±–ª–µ–º–∞: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞—é—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∞–≥–µ–Ω—Ç–∞", "yellow")
    print("=" * 60)
    
    issues_count = 0
    
    # –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    if not check_webhook_config():
        issues_count += 1
    print()
    
    # –®–∞–≥ 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    if not check_business_handlers():
        issues_count += 1
    print()
    
    # –®–∞–≥ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏
    if not check_agent_routing():
        issues_count += 1
    print()
    
    # –®–∞–≥ 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
    if not check_send_business_function():
        issues_count += 1
    print()
    
    # –®–∞–≥ 5: –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º
    analyze_potential_issues()
    print()
    
    # –®–∞–≥ 6: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç-—Å–∫—Ä–∏–ø—Ç–∞
    create_test_script()
    print()
    
    # –ó–∞–∫–ª—é—á–µ–Ω–∏–µ
    if issues_count == 0:
        print_colored("üéâ –ö–æ–¥ Business API –≤—ã–≥–ª—è–¥–∏—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!", "green")
        print_colored("–ü—Ä–æ–±–ª–µ–º–∞ —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–ª–∏ –¥–µ–ø–ª–æ–µ", "yellow")
    else:
        print_colored(f"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ {issues_count} –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º –≤ –∫–æ–¥–µ", "yellow")
    
    print()
    print_colored("üöÄ –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:", "blue")
    print("1. ./get_digitalocean_logs.sh - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
    print("2. ./check_and_setup_webhook.py - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å webhook")
    print("3. –í –±–æ—Ç–µ: /business_status - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
    print("4. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å —Ä–µ–∞–ª—å–Ω—ã–º Business —Å–æ–æ–±—â–µ–Ω–∏–µ–º")
    
    return issues_count

if __name__ == "__main__":
    issues = main()
    sys.exit(issues)