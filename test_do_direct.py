#!/usr/bin/env python3
"""
–ü—Ä—è–º–æ–π —Ç–µ—Å—Ç DigitalOcean MCP —Ñ—É–Ω–∫—Ü–∏–π
"""
import asyncio
import os
import json
from pathlib import Path
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Moonshot API
os.environ["ANTHROPIC_BASE_URL"] = "https://api.moonshot.ai/anthropic"
os.environ["ANTHROPIC_AUTH_TOKEN"] = "sk-QNnXEpPxnV9OCIhr6IMUcXQu2b4Vsuq2biZVAFce0KIoUTsx"

# –ò–º–ø–æ—Ä—Ç Claude Code SDK
from claude_code_sdk import query, ClaudeCodeOptions, Message

async def test_digitalocean_functions():
    """–¢–µ—Å—Ç —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π DigitalOcean MCP"""
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è MCP
    mcp_servers = {
        "digitalocean": {
            "command": "npx",
            "args": ["-y", "@digitalocean/mcp"],
            "env": {
                "DIGITALOCEAN_API_TOKEN": os.getenv("DIGITALOCEAN_API_TOKEN", "")
            }
        }
    }
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    test_cases = [
        {
            "name": "List Apps",
            "prompt": "Use mcp__digitalocean__list_apps with parameter {\"query\": {}} to list all apps",
            "expected_function": "mcp__digitalocean__list_apps"
        },
        {
            "name": "List Database Clusters", 
            "prompt": "Use mcp__digitalocean__list_databases_cluster with parameter {\"query\": {}} to list all database clusters",
            "expected_function": "mcp__digitalocean__list_databases_cluster"
        },
        {
            "name": "Get Database Options",
            "prompt": "Use mcp__digitalocean__get_database_options with no parameters to get database options",
            "expected_function": "mcp__digitalocean__get_database_options"
        }
    ]
    
    for test in test_cases:
        print(f"\n{'='*60}")
        print(f"üß™ –¢–µ—Å—Ç: {test['name']}")
        print(f"üìù –ü—Ä–æ–º–ø—Ç: {test['prompt']}")
        print("-" * 60)
        
        # –û–ø—Ü–∏–∏ SDK
        options = ClaudeCodeOptions(
            max_turns=1,
            system_prompt=f"You MUST use {test['expected_function']} function. Do not use any other tools.",
            allowed_tools=[test['expected_function']],
            disallowed_tools=["TodoWrite", "Task", "Bash", "Read", "Write"],
            mcp_servers=mcp_servers,
            permission_mode="acceptEdits"
        )
        
        messages = []
        try:
            async for message in query(prompt=test['prompt'], options=options):
                messages.append(message)
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
                if hasattr(message, 'content') and isinstance(message.content, list):
                    for block in message.content:
                        if hasattr(block, 'name'):
                            print(f"‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è: {block.name}")
                            if hasattr(block, 'input'):
                                print(f"   –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {json.dumps(block.input, indent=2)}")
                        elif hasattr(block, 'text'):
                            print(f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: {block.text}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã tool_result
                if hasattr(message, 'content') and isinstance(message.content, list):
                    for item in message.content:
                        if isinstance(item, dict) and item.get('type') == 'tool_result':
                            print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç:")
                            content = item.get('content', '')
                            if len(content) > 500:
                                print(f"{content[:500]}...")
                            else:
                                print(content)
                            
                            if item.get('is_error'):
                                print(f"‚ùå –û—à–∏–±–∫–∞: {content}")
                            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {e}")
        
        print(f"\nüìà –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {len(messages)}")

if __name__ == "__main__":
    asyncio.run(test_digitalocean_functions())