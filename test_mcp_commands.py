#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ MCP –∫–æ–º–∞–Ω–¥ —á–µ—Ä–µ–∑ Telegram –±–æ—Ç–∞
"""

import asyncio
import aiohttp
import json
import time
from datetime import datetime
from colorama import init, Fore, Style
import subprocess

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è colorama
init(autoreset=True)

class MCPTester:
    """–¢–µ—Å—Ç–µ—Ä MCP —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏"""
    
    def __init__(self):
        self.webhook_url = "https://16bf5c25554f.ngrok-free.app/webhook"
        self.bot_token = "6658269281:AAETA0vTXiRCMPcL1y_DzEeU_Fc6DiqdpFk"
        self.chat_id = 229838448
        self.admin_username = "aaatema"
        self.update_id = int(time.time() * 1000)
        self.log_process = None
        
    def start_log_monitoring(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ª–æ–≥–æ–≤"""
        self.log_process = subprocess.Popen(
            ['tail', '-f', 'webhook.log'],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            text=True
        )
        
    def stop_log_monitoring(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ª–æ–≥–æ–≤"""
        if self.log_process:
            self.log_process.terminate()
            
    def print_logs(self):
        """–í—ã–≤–æ–¥–∏—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –ª–æ–≥–æ–≤ —Å MCP"""
        try:
            result = subprocess.run(
                ['grep', '-E', 'MCP|mcp|supabase|digitalocean|context7', 'webhook.log', '-A', '2', '-B', '2'],
                capture_output=True,
                text=True
            )
            if result.stdout:
                print(f"\n{Fore.CYAN}üìã –õ–æ–≥–∏ MCP:{Style.RESET_ALL}")
                for line in result.stdout.split('\n')[-20:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Å—Ç—Ä–æ–∫
                    if 'ERROR' in line or '‚ùå' in line:
                        print(f"{Fore.RED}{line}")
                    elif 'SUCCESS' in line or '‚úÖ' in line:
                        print(f"{Fore.GREEN}{line}")
                    elif 'MCP' in line or 'mcp' in line:
                        print(f"{Fore.YELLOW}{line}")
                    else:
                        print(line)
        except Exception as e:
            print(f"{Fore.RED}–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ª–æ–≥–æ–≤: {e}")
    
    def _create_update(self, text: str) -> dict:
        """–°–æ–∑–¥–∞–µ—Ç Telegram Update –æ–±—ä–µ–∫—Ç"""
        self.update_id += 1
        return {
            "update_id": self.update_id,
            "message": {
                "message_id": self.update_id,
                "from": {
                    "id": self.chat_id,
                    "is_bot": False,
                    "first_name": "Test",
                    "username": self.admin_username,
                    "language_code": "ru"
                },
                "chat": {
                    "id": self.chat_id,
                    "first_name": "Test",
                    "username": self.admin_username,
                    "type": "private"
                },
                "date": int(time.time()),
                "text": text
            }
        }
    
    async def send_command(self, command: str, description: str):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç MCP –∫–æ–º–∞–Ω–¥—É –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
        print(f"\n{Fore.CYAN}{'='*60}")
        print(f"{Fore.CYAN}üß™ –¢–µ—Å—Ç: {description}")
        print(f"{Fore.CYAN}üìù –ö–æ–º–∞–Ω–¥–∞: {command}")
        print(f"{Fore.CYAN}{'='*60}")
        
        update = self._create_update(command)
        headers = {
            "Content-Type": "application/json",
            "X-Telegram-Bot-Api-Secret-Token": "artyom_integrator_secret_2025"
        }
        
        async with aiohttp.ClientSession() as session:
            try:
                async with session.post(
                    self.webhook_url,
                    json=update,
                    headers=headers,
                    timeout=aiohttp.ClientTimeout(total=10)
                ) as response:
                    result = await response.json()
                    if response.status == 200:
                        print(f"{Fore.GREEN}‚úÖ Webhook –ø—Ä–∏–Ω—è–ª –∑–∞–ø—Ä–æ—Å: {result}")
                    else:
                        print(f"{Fore.RED}‚ùå –û—à–∏–±–∫–∞ webhook: {response.status}")
                        
            except Exception as e:
                print(f"{Fore.RED}‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
        
        # –ñ–¥–µ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏
        await asyncio.sleep(3)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–æ–≥–∏
        self.print_logs()
    
    async def run_tests(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ MCP —Ç–µ—Å—Ç—ã"""
        print(f"{Fore.MAGENTA}üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ MCP —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏")
        print(f"{Fore.MAGENTA}üìç Webhook URL: {self.webhook_url}")
        print(f"{Fore.MAGENTA}üë§ Admin User: @{self.admin_username} ({self.chat_id})")
        print(f"{Fore.MAGENTA}{'='*60}")
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ MCP –≤–∫–ª—é—á–µ–Ω
        print(f"\n{Fore.YELLOW}üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ MCP...")
        result = subprocess.run(['grep', 'MCP_ENABLED', '.env'], capture_output=True, text=True)
        if 'true' in result.stdout:
            print(f"{Fore.GREEN}‚úÖ MCP –≤–∫–ª—é—á–µ–Ω –≤ .env")
        else:
            print(f"{Fore.RED}‚ùå MCP –æ—Ç–∫–ª—é—á–µ–Ω –≤ .env!")
            
        # –¢–µ—Å—Ç—ã MCP –∫–æ–º–∞–Ω–¥
        mcp_tests = [
            # –ë–∞–∑–æ–≤—ã–µ MCP –∫–æ–º–∞–Ω–¥—ã
            ("/mcp status", "–°—Ç–∞—Ç—É—Å MCP —Å–µ—Ä–≤–µ—Ä–æ–≤"),
            ("/mcp help", "–°–ø—Ä–∞–≤–∫–∞ –ø–æ MCP"),
            
            # Supabase –∫–æ–º–∞–Ω–¥—ã
            ("/mcp projects", "–°–ø–∏—Å–æ–∫ Supabase –ø—Ä–æ–µ–∫—Ç–æ–≤"),
            ("/mcp organizations", "–°–ø–∏—Å–æ–∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π"),
            ("/db SELECT version()", "SQL –∑–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ"),
            
            # DigitalOcean –∫–æ–º–∞–Ω–¥—ã  
            ("/mcp apps", "–°–ø–∏—Å–æ–∫ DigitalOcean –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π"),
            ("/mcp do apps", "–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ DO apps"),
            
            # Context7 –∫–æ–º–∞–Ω–¥—ã
            ("/docs react hooks", "–ü–æ–∏—Å–∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ React"),
            ("/mcp context7 vue composition", "–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è Vue"),
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
            ("/admin status", "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–∞–≤"),
        ]
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ª–æ–≥–æ–≤
        self.start_log_monitoring()
        
        try:
            for command, description in mcp_tests:
                await self.send_command(command, description)
                await asyncio.sleep(2)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
                
        finally:
            self.stop_log_monitoring()
        
        # –ò—Ç–æ–≥–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑
        print(f"\n{Fore.MAGENTA}{'='*60}")
        print(f"{Fore.MAGENTA}üìä –ò–¢–û–ì–û–í–´–ô –ê–ù–ê–õ–ò–ó MCP")
        print(f"{Fore.MAGENTA}{'='*60}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ MCP –≤ –ª–æ–≥–∞—Ö
        result = subprocess.run(
            ['grep', '-c', 'MCP', 'webhook.log'],
            capture_output=True,
            text=True
        )
        mcp_count = int(result.stdout.strip() or 0)
        
        if mcp_count > 0:
            print(f"{Fore.GREEN}‚úÖ MCP —É–ø–æ–º–∏–Ω–∞–µ—Ç—Å—è –≤ –ª–æ–≥–∞—Ö {mcp_count} —Ä–∞–∑")
        else:
            print(f"{Fore.RED}‚ùå MCP –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ª–æ–≥–∞—Ö - –≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω")
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—à–∏–±–∫–∏ MCP
        result = subprocess.run(
            ['grep', '-E', 'MCP.*ERROR|MCP.*error|MCP.*failed', 'webhook.log'],
            capture_output=True,
            text=True
        )
        if result.stdout:
            print(f"{Fore.RED}‚ùå –ù–∞–π–¥–µ–Ω—ã –æ—à–∏–±–∫–∏ MCP:")
            print(result.stdout)
        else:
            print(f"{Fore.GREEN}‚úÖ –û—à–∏–±–æ–∫ MCP –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    tester = MCPTester()
    await tester.run_tests()


if __name__ == "__main__":
    asyncio.run(main())