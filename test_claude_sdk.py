#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã Claude Code SDK
"""

import asyncio
import logging
import sys
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ bot –º–æ–¥—É–ª—é
sys.path.insert(0, str(Path(__file__).parent))

async def test_claude_sdk():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Claude Code SDK"""
    
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ Claude Code SDK...")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–∞
    try:
        from claude_code_sdk import query, ClaudeCodeOptions, Message
        print("‚úÖ Claude Code SDK —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
        print(f"   –í–µ—Ä—Å–∏—è: {getattr(query, '__version__', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ Claude Code SDK: {e}")
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–∏—Å–∞
    try:
        from bot.services.claude_code_service import ClaudeCodeService, CLAUDE_CODE_SDK_AVAILABLE
        print(f"‚úÖ ClaudeCodeService –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
        print(f"   SDK –¥–æ—Å—Ç—É–ø–µ–Ω: {CLAUDE_CODE_SDK_AVAILABLE}")
        
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
        service = ClaudeCodeService()
        print(f"‚úÖ –°–µ—Ä–≤–∏—Å —Å–æ–∑–¥–∞–Ω")
        print(f"   Enabled: {service.enabled}")
        print(f"   MCP Config Path: {service.mcp_config_path}")
        
        # –¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞
        if service.enabled:
            print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã MCP status...")
            result = await service.execute_mcp_command("/mcp status")
            print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
        else:
            print("‚ö†Ô∏è –°–µ—Ä–≤–∏—Å –æ—Ç–∫–ª—é—á–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å —Å–µ—Ä–≤–∏—Å–æ–º: {e}")
        import traceback
        traceback.print_exc()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    try:
        from bot.core.config import config
        print(f"\nüìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:")
        print(f"   MCP enabled: {config.mcp.enabled}")
        print(f"   Anthropic enabled: {config.anthropic.enabled}")
        print(f"   Anthropic API key: {'‚úÖ' if config.anthropic.api_key else '‚ùå'}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ MCP —Å–µ—Ä–≤–µ—Ä–æ–≤
    try:
        import json
        mcp_config_path = Path("data/mcp-servers.json")
        if mcp_config_path.exists():
            with open(mcp_config_path) as f:
                mcp_config = json.load(f)
            print(f"\nüì¶ MCP —Å–µ—Ä–≤–µ—Ä—ã:")
            for server, config in mcp_config.get("mcpServers", {}).items():
                print(f"   - {server}: {config.get('command', 'N/A')}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è MCP –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")

if __name__ == "__main__":
    asyncio.run(test_claude_sdk())