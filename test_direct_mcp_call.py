#!/usr/bin/env python3
"""
–ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤ MCP —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
"""

import asyncio
import subprocess
import json
import os
from pathlib import Path

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
from dotenv import load_dotenv
load_dotenv()

async def call_digitalocean_mcp():
    """–ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤ DigitalOcean MCP"""
    
    print("\nüöÄ –ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤ DigitalOcean MCP —Å–µ—Ä–≤–µ—Ä–∞")
    print("=" * 60)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–∫–µ–Ω
    env = os.environ.copy()
    env["DIGITALOCEAN_API_TOKEN"] = os.getenv("DIGITALOCEAN_API_TOKEN")
    
    # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ MCP —Å–µ—Ä–≤–µ—Ä–∞
    cmd = ["npx", "-y", "@anysphere/digitalocean-mcp"]
    
    print("üì° –ó–∞–ø—É—Å–∫–∞–µ–º MCP —Å–µ—Ä–≤–µ—Ä...")
    print(f"üîß –ö–æ–º–∞–Ω–¥–∞: {' '.join(cmd)}")
    print(f"üîë –¢–æ–∫–µ–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {'‚úÖ' if env.get('DIGITALOCEAN_API_TOKEN') else '‚ùå'}")
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
    process = await asyncio.create_subprocess_exec(
        *cmd,
        stdin=asyncio.subprocess.PIPE,
        stdout=asyncio.subprocess.PIPE,
        stderr=asyncio.subprocess.PIPE,
        env=env
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
    request = {
        "jsonrpc": "2.0",
        "method": "mcp__digitalocean__list_apps",
        "params": {
            "query": {
                "page": 1,
                "per_page": 10
            }
        },
        "id": 1
    }
    
    print(f"\nüì® –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å: {request['method']}")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏ –ø–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º JSON-RPC –∑–∞–ø—Ä–æ—Å
        process.stdin.write(json.dumps(request).encode() + b'\n')
        await process.stdin.drain()
        
        # –ß–∏—Ç–∞–µ–º –æ—Ç–≤–µ—Ç
        response_line = await asyncio.wait_for(process.stdout.readline(), timeout=10.0)
        
        if response_line:
            response = json.loads(response_line.decode())
            
            print("\n‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç MCP —Å–µ—Ä–≤–µ—Ä–∞!")
            
            if "result" in response:
                apps = response["result"].get("apps", [])
                print(f"\nüì± –ù–∞–π–¥–µ–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π: {len(apps)}")
                
                for app in apps:
                    print(f"\n  üåä {app.get('spec', {}).get('name', 'Unknown')}")
                    print(f"     ID: {app.get('id', 'N/A')}")
                    print(f"     –†–µ–≥–∏–æ–Ω: {app.get('region', {}).get('slug', 'N/A')}")
                    print(f"     –°—Ç–∞—Ç—É—Å: {app.get('phase', 'N/A')}")
                    
            elif "error" in response:
                print(f"\n‚ùå –û—à–∏–±–∫–∞: {response['error']}")
        else:
            print("\n‚ùå –ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞")
            
    except asyncio.TimeoutError:
        print("\n‚ùå –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞")
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
    finally:
        # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
        process.terminate()
        await process.wait()

async def test_with_telegram_format():
    """–¢–µ—Å—Ç —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º –¥–ª—è Telegram"""
    
    print("\nüì± –°–∏–º—É–ª—è—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –¥–ª—è Telegram")
    print("=" * 60)
    
    # –≠–º—É–ª–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
    mock_apps = [
        {
            "id": "app-12345",
            "spec": {"name": "artem-integrator"},
            "region": {"slug": "fra1"},
            "phase": "ACTIVE",
            "created_at": "2024-01-15T10:30:00Z",
            "updated_at": "2024-01-23T14:45:00Z"
        },
        {
            "id": "app-67890",
            "spec": {"name": "admin-panel"},
            "region": {"slug": "nyc1"},
            "phase": "ACTIVE",
            "created_at": "2024-01-10T08:00:00Z",
            "updated_at": "2024-01-22T16:30:00Z"
        }
    ]
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–ª—è Telegram
    message = "üåä **DigitalOcean Apps**\n\n"
    
    for i, app in enumerate(mock_apps, 1):
        message += f"{i}. **{app['spec']['name']}**\n"
        message += f"   üìç Region: `{app['region']['slug']}`\n"
        message += f"   ‚úÖ Status: `{app['phase']}`\n"
        message += f"   üÜî ID: `{app['id']}`\n"
        message += f"   üìÖ Updated: {app['updated_at'][:10]}\n\n"
    
    message += f"_Total apps: {len(mock_apps)}_"
    
    print("\nüì® –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram:")
    print("-" * 60)
    print(message)
    
    return message

if __name__ == "__main__":
    print("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ—Å—Ç:")
    print("1. –ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤ MCP —Å–µ—Ä–≤–µ—Ä–∞ (–º–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å –≤ —ç—Ç–æ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏)")
    print("2. –°–∏–º—É–ª—è—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏")
    
    choice = input("\n–í–∞—à –≤—ã–±–æ—Ä (1 –∏–ª–∏ 2): ").strip()
    
    if choice == "1":
        asyncio.run(call_digitalocean_mcp())
    else:
        asyncio.run(test_with_telegram_format())