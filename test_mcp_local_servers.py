#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –ª–æ–∫–∞–ª—å–Ω—ã—Ö MCP —Å–µ—Ä–≤–µ—Ä–æ–≤ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º–∏ –ø—É—Ç—è–º–∏
"""

import asyncio
import json
import os
from pathlib import Path
from claude_code_sdk import query, ClaudeCodeOptions
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º .env
load_dotenv()

async def test_local_mcp_servers():
    """–¢–µ—Å—Ç —Å –ª–æ–∫–∞–ª—å–Ω—ã–º–∏ MCP —Å–µ—Ä–≤–µ—Ä–∞–º–∏"""
    
    print("\nüîç –¢–µ—Å—Ç –ª–æ–∫–∞–ª—å–Ω—ã—Ö MCP —Å–µ—Ä–≤–µ—Ä–æ–≤")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Node.js
    print("üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
    os.system("which node")
    os.system("node --version")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–∞–∑–æ–≤—ã–π –ø—É—Ç—å
    base_path = Path(__file__).parent
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π MCP —Å–µ—Ä–≤–µ—Ä
    test_server_js = base_path / "test_mcp_server.js"
    
    # –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π MCP —Å–µ—Ä–≤–µ—Ä –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    test_server_content = """#!/usr/bin/env node

const { Server } = require('@modelcontextprotocol/sdk/server/index.js');
const { StdioServerTransport } = require('@modelcontextprotocol/sdk/server/stdio.js');

const server = new Server(
  {
    name: 'test-local-server',
    version: '1.0.0',
  },
  {
    capabilities: {
      tools: {},
    },
  }
);

// –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
server.setRequestHandler('tools/list', async () => {
  return {
    tools: [
      {
        name: 'test_tool',
        description: 'Test tool for MCP',
        inputSchema: {
          type: 'object',
          properties: {
            message: {
              type: 'string',
              description: 'Test message'
            }
          }
        }
      }
    ]
  };
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–∑–æ–≤–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
server.setRequestHandler('tools/call', async (request) => {
  if (request.params.name === 'test_tool') {
    return {
      content: [
        {
          type: 'text',
          text: `Test response: ${request.params.arguments.message || 'Hello from MCP!'}`
        }
      ]
    };
  }
});

const transport = new StdioServerTransport();
server.connect(transport);

console.error('Test MCP server started');
"""
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä
    with open(test_server_js, 'w') as f:
        f.write(test_server_content)
    
    os.chmod(test_server_js, 0o755)
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä: {test_server_js}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ MCP —Å–µ—Ä–≤–µ—Ä—ã
    official_servers = {
        "filesystem": {
            "command": "npx",
            "args": ["-y", "@modelcontextprotocol/server-filesystem", "/tmp"]
        }
    }
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä –µ—Å–ª–∏ –Ω–µ—Ç npm
    local_servers = {
        "test-local": {
            "command": str(test_server_js),
            "args": [],
            "env": {}
        }
    }
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è MCP
    mcp_config = local_servers  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä
    
    print(f"\nüì¶ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è MCP —Å–µ—Ä–≤–µ—Ä–æ–≤:")
    print(json.dumps(mcp_config, indent=2))
    
    # –û–ø—Ü–∏–∏ SDK
    options = ClaudeCodeOptions(
        max_turns=1,
        mcp_servers=mcp_config,
        mcp_tools=["*"],
        permission_mode="acceptEdits"
    )
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    test_prompts = [
        "Use the test_tool from test-local server with message 'Hello MCP'",
        "List available MCP tools"
    ]
    
    for prompt in test_prompts:
        print(f"\nüß™ –ó–∞–ø—Ä–æ—Å: {prompt}")
        print("-" * 40)
        
        try:
            messages = []
            async for message in query(prompt=prompt, options=options):
                msg_type = type(message).__name__
                print(f"üì® {msg_type}")
                
                if hasattr(message, 'content'):
                    content = str(message.content)[:200]
                    print(f"   {content}")
                    
                messages.append(message)
                
            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {len(messages)}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            import traceback
            traceback.print_exc()
    
    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    if test_server_js.exists():
        os.remove(test_server_js)
        print(f"\nüßπ –£–¥–∞–ª–µ–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {test_server_js}")

if __name__ == "__main__":
    asyncio.run(test_local_mcp_servers())