#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞ - –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç—É –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
"""

import asyncio
import logging
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)


async def test_new_config():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    print("\nüîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
    
    try:
        from bot.core.config import config
        
        print(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        print(f"üìä –°—Ç–∞—Ç—É—Å: {config.get_status_info()}")
        print(f"üîç –û–∫—Ä—É–∂–µ–Ω–∏–µ: {config.environment.value}")
        print(f"ü§ñ Bot ID: {config.telegram.bot_id}")
        print(f"üë§ –ê–¥–º–∏–Ω—ã: {config.admin.user_ids}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—Ä–∞—Ç–Ω—É—é —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
        from bot.config import TELEGRAM_BOT_TOKEN, BOT_ID
        print(f"\n‚úÖ –û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å:")
        print(f"   TELEGRAM_BOT_TOKEN: {TELEGRAM_BOT_TOKEN[:10]}...")
        print(f"   BOT_ID: {BOT_ID}")
        
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        logger.error(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}", exc_info=True)
        return False


async def test_new_agent():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–æ–≤—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É –∞–≥–µ–Ω—Ç–∞"""
    print("\nü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞–≥–µ–Ω—Ç–∞...")
    
    try:
        from bot.core.agent import ArtemAgent
        from bot.core.interfaces import Message, User, MessageType, UserRole
        
        # –°–æ–∑–¥–∞–µ–º –∞–≥–µ–Ω—Ç–∞
        agent = ArtemAgent()
        print("‚úÖ –ê–≥–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
        status = await agent.get_agent_status()
        print(f"üìä –°—Ç–∞—Ç—É—Å –∞–≥–µ–Ω—Ç–∞: {status}")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        test_user = User(
            id=123456,
            username="test_user",
            first_name="Test",
            last_name="User",
            role=UserRole.USER
        )
        
        test_message = Message(
            id=1,
            user=test_user,
            chat_id=123456,
            text="–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?",
            type=MessageType.TEXT,
            timestamp=datetime.now()
        )
        
        print(f"\nüì® –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: '{test_message.text}'")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        response = await agent.process_message(test_message)
        print(f"üí¨ –û—Ç–≤–µ—Ç: {response.text[:100]}...")
        print(f"üìä –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ: {response.metadata}")
        
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        logger.error(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–≥–µ–Ω—Ç–∞: {e}", exc_info=True)
        return False


async def test_legacy_compatibility():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞—Ç–Ω—É—é —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å"""
    print("\nüîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏...")
    
    try:
        from bot.agent import myassistant
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ç–∞—Ä—ã–π –∞–≥–µ–Ω—Ç
        agent = myassistant()
        print("‚úÖ Legacy –∞–≥–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ä—ã–π API
        intent = agent.detect_social_media_intent("–ü–æ—Å–º–æ—Ç—Ä–∏ –≤–∏–¥–µ–æ –Ω–∞ YouTube")
        print(f"üìä Intent detection: {intent}")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ —Å—Ç–∞—Ä—ã–π API
        response = await agent.generate_response(
            user_message="–ü—Ä–∏–≤–µ—Ç, —á—Ç–æ —É–º–µ–µ—à—å?",
            user_id=123456,
            user_name="Test User",
            is_admin=False
        )
        print(f"üí¨ Legacy –æ—Ç–≤–µ—Ç: {response[:100]}...")
        
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        logger.error(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏: {e}", exc_info=True)
        return False


async def test_services():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ —Å–µ—Ä–≤–∏—Å—ã"""
    print("\nüîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–æ–≤...")
    
    try:
        # –¢–µ—Å—Ç Intent Detector
        from bot.services.intent_detector import IntentDetector, IntentType
        from bot.core.interfaces import Message, User, MessageType, UserRole
        
        detector = IntentDetector()
        print("‚úÖ Intent Detector —Å–æ–∑–¥–∞–Ω")
        
        test_messages = [
            "–ü—Ä–∏–≤–µ—Ç!",
            "–ü–æ–º–æ–≥–∏ –º–Ω–µ",
            "–°–ø–∞—Å–∏–±–æ –±–æ–ª—å—à–æ–µ",
            "–ü–æ—Å–º–æ—Ç—Ä–∏ —ç—Ç–æ –≤–∏–¥–µ–æ https://youtube.com/watch?v=dQw4w9WgXcQ",
            "/help",
            "–ß—Ç–æ –Ω–æ–≤–æ–≥–æ –≤ Instagram?"
        ]
        
        for text in test_messages:
            user = User(id=1, username="test", first_name="Test", last_name="User")
            msg = Message(
                id=1, user=user, chat_id=1, text=text,
                type=MessageType.TEXT, timestamp=datetime.now()
            )
            
            intent = await detector.detect(msg)
            print(f"üìù '{text}' -> {intent['type']} (confidence: {intent['confidence']})")
        
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        logger.error(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤: {e}", exc_info=True)
        return False


async def main():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞...")
    print("=" * 50)
    
    results = []
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    results.append(("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è", await test_new_config()))
    results.append(("–ù–æ–≤—ã–π –∞–≥–µ–Ω—Ç", await test_new_agent()))
    results.append(("–û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å", await test_legacy_compatibility()))
    results.append(("–°–µ—Ä–≤–∏—Å—ã", await test_services()))
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print("\n" + "=" * 50)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–û–í:")
    print("=" * 50)
    
    all_passed = True
    for name, passed in results:
        status = "‚úÖ PASSED" if passed else "‚ùå FAILED"
        print(f"{name}: {status}")
        if not passed:
            all_passed = False
    
    print("=" * 50)
    
    if all_passed:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        return 0
    else:
        print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏")
        return 1


if __name__ == "__main__":
    exit_code = asyncio.run(main())
    exit(exit_code)