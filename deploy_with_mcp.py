#!/usr/bin/env python3
"""
Deploy Artem Integrator using MCP DigitalOcean
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç MCP –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º –≤ DigitalOcean
"""

import asyncio
import json
import os
import sys
from pathlib import Path
from typing import Dict, Any, Optional

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º –±–æ—Ç–∞
sys.path.append(str(Path(__file__).parent))

from bot.services.claude_code_service import claude_code_service
from bot.core.config import config


class MCPDeployer:
    """–ö–ª–∞—Å—Å –¥–ª—è –¥–µ–ø–ª–æ—è —á–µ—Ä–µ–∑ MCP DigitalOcean"""
    
    def __init__(self):
        self.claude_service = claude_code_service
        self.app_name = "artem-integrator"
        self.region = "fra"  # Frankfurt region
        self.github_repo = "anetov/artem.integrator"
        self.github_branch = "main"
        
    async def check_mcp_status(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å MCP"""
        print("üîå –ü—Ä–æ–≤–µ—Ä–∫–∞ MCP —Å—Ç–∞—Ç—É—Å–∞...")
        
        result = await self.claude_service.execute_mcp_command("/mcp status")
        
        if result.get("success"):
            print("‚úÖ MCP –ø–æ–¥–∫–ª—é—á–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            print(f"üìù –û—Ç–≤–µ—Ç: {result.get('response', '')[:200]}...")
            return True
        else:
            print(f"‚ùå MCP –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {result.get('error')}")
            return False
    
    async def list_apps(self) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –≤ DigitalOcean"""
        print("\nüì± –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π...")
        
        result = await self.claude_service.execute_mcp_command("/mcp apps")
        
        if result.get("success"):
            print("‚úÖ –°–ø–∏—Å–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –ø–æ–ª—É—á–µ–Ω")
            return result
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {result.get('error')}")
            return None
    
    async def create_app_spec(self) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–µ—Ç —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è DigitalOcean"""
        return {
            "name": self.app_name,
            "region": self.region,
            "services": [
                {
                    "name": "web",
                    "github": {
                        "repo": self.github_repo,
                        "branch": self.github_branch,
                        "deploy_on_push": True
                    },
                    "build_command": "pip install -r requirements.txt",
                    "run_command": "python -m uvicorn bot.webhook:app --host 0.0.0.0 --port 8080",
                    "environment_slug": "python",
                    "instance_size_slug": "basic-xs",
                    "instance_count": 1,
                    "http_port": 8080,
                    "health_check": {
                        "http_path": "/",
                        "initial_delay_seconds": 10,
                        "period_seconds": 30,
                        "timeout_seconds": 5,
                        "success_threshold": 1,
                        "failure_threshold": 3
                    },
                    "envs": [
                        {"key": "PYTHON_VERSION", "value": "3.10"},
                        {"key": "TELEGRAM_TOKEN", "value": "${TELEGRAM_TOKEN}", "type": "SECRET"},
                        {"key": "TELEGRAM_WEBHOOK_SECRET", "value": "${TELEGRAM_WEBHOOK_SECRET}", "type": "SECRET"},
                        {"key": "OPENAI_API_KEY", "value": "${OPENAI_API_KEY}", "type": "SECRET"},
                        {"key": "ANTHROPIC_API_KEY", "value": "${ANTHROPIC_API_KEY}", "type": "SECRET"},
                        {"key": "MCP_ENABLED", "value": "true"},
                        {"key": "SUPABASE_ENABLED", "value": "true"},
                        {"key": "SUPABASE_URL", "value": "${SUPABASE_URL}", "type": "SECRET"},
                        {"key": "SUPABASE_KEY", "value": "${SUPABASE_KEY}", "type": "SECRET"},
                        {"key": "DIGITALOCEAN_ENABLED", "value": "true"},
                        {"key": "DIGITALOCEAN_TOKEN", "value": "${DIGITALOCEAN_TOKEN}", "type": "SECRET"},
                        {"key": "CONTEXT7_ENABLED", "value": "true"},
                        {"key": "VOICE_ENABLED", "value": "true"},
                        {"key": "ENVIRONMENT", "value": "production"}
                    ]
                }
            ]
        }
    
    async def create_app(self) -> Optional[str]:
        """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ DigitalOcean —á–µ—Ä–µ–∑ MCP"""
        print(f"\nüöÄ –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è {self.app_name}...")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—é
        app_spec = await self.create_app_spec()
        
        # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ MCP
        command = f"/mcp create app {json.dumps(app_spec)}"
        
        result = await self.claude_service.execute_mcp_command(command)
        
        if result.get("success"):
            print("‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ")
            # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏–∑ –æ—Ç–≤–µ—Ç–∞
            app_id = self._extract_app_id(result.get("response", ""))
            return app_id
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {result.get('error')}")
            return None
    
    async def get_app_status(self, app_id: str) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        print(f"\nüìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è {app_id}...")
        
        command = f"/mcp get app {app_id}"
        result = await self.claude_service.execute_mcp_command(command)
        
        if result.get("success"):
            print("‚úÖ –°—Ç–∞—Ç—É—Å –ø–æ–ª—É—á–µ–Ω")
            return result
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {result.get('error')}")
            return None
    
    async def get_deployment_logs(self, app_id: str) -> Optional[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç –ª–æ–≥–∏ –¥–µ–ø–ª–æ—è"""
        print(f"\nüìù –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–≥–æ–≤ –¥–µ–ø–ª–æ—è –¥–ª—è {app_id}...")
        
        command = f"/mcp logs {app_id}"
        result = await self.claude_service.execute_mcp_command(command)
        
        if result.get("success"):
            print("‚úÖ –õ–æ–≥–∏ –ø–æ–ª—É—á–µ–Ω—ã")
            return result.get("response")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {result.get('error')}")
            return None
    
    async def update_app_env(self, app_id: str, env_vars: Dict[str, str]) -> bool:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        print(f"\nüîß –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è {app_id}...")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        env_list = [{"key": k, "value": v, "type": "SECRET"} for k, v in env_vars.items()]
        command = f"/mcp update app {app_id} env {json.dumps(env_list)}"
        
        result = await self.claude_service.execute_mcp_command(command)
        
        if result.get("success"):
            print("‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {result.get('error')}")
            return False
    
    async def trigger_deployment(self, app_id: str) -> bool:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –Ω–æ–≤—ã–π –¥–µ–ø–ª–æ–π"""
        print(f"\nüöÄ –ó–∞–ø—É—Å–∫ –Ω–æ–≤–æ–≥–æ –¥–µ–ø–ª–æ—è –¥–ª—è {app_id}...")
        
        command = f"/mcp deploy {app_id}"
        result = await self.claude_service.execute_mcp_command(command)
        
        if result.get("success"):
            print("‚úÖ –î–µ–ø–ª–æ–π –∑–∞–ø—É—â–µ–Ω")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {result.get('error')}")
            return False
    
    def _extract_app_id(self, response: str) -> Optional[str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç ID –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏–∑ –æ—Ç–≤–µ—Ç–∞"""
        # –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–∏–Ω–≥ - –∏—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω app ID
        import re
        match = re.search(r'app[_-]?id["\s:]+([a-f0-9-]+)', response, re.IGNORECASE)
        if match:
            return match.group(1)
        return None
    
    async def full_deploy(self):
        """–ü–æ–ª–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –¥–µ–ø–ª–æ—è"""
        print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –¥–µ–ø–ª–æ–π Artem Integrator —á–µ—Ä–µ–∑ MCP DigitalOcean")
        print("=" * 60)
        
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º MCP
        if not await self.check_mcp_status():
            print("\n‚ùå MCP –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é.")
            return
        
        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        apps = await self.list_apps()
        
        # 3. –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        app_id = None
        
        if apps and "artem-integrator" in str(apps):
            print("\n‚ö†Ô∏è –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            # TODO: –ò–∑–≤–ª–µ—á—å ID —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        else:
            app_id = await self.create_app()
            
            if not app_id:
                print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ")
                return
        
        # 4. –ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
        print("\n‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
        await asyncio.sleep(30)
        
        # 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
        if app_id:
            status = await self.get_app_status(app_id)
            if status:
                print(f"\nüìä –°—Ç–∞—Ç—É—Å: {status.get('response', '')[:200]}...")
        
        # 6. –ü–æ–ª—É—á–∞–µ–º –ª–æ–≥–∏
        if app_id:
            logs = await self.get_deployment_logs(app_id)
            if logs:
                print(f"\nüìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏:\n{logs[:500]}...")
        
        print("\n‚úÖ –ü—Ä–æ—Ü–µ—Å—Å –¥–µ–ø–ª–æ—è –∑–∞–≤–µ—Ä—à–µ–Ω!")
        print("\nüìã –î–∞–ª—å–Ω–µ–π—à–∏–µ —à–∞–≥–∏:")
        print("1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ DigitalOcean App Platform")
        print("2. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
        print("3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ webhook URL –≤ Telegram –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–º–µ–Ω–∞")
        print("4. –ú–æ–Ω–∏—Ç–æ—Ä—å—Ç–µ –ª–æ–≥–∏ —á–µ—Ä–µ–∑ DigitalOcean –∏–ª–∏ MCP –∫–æ–º–∞–Ω–¥—ã")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    deployer = MCPDeployer()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    if len(sys.argv) > 1:
        command = sys.argv[1]
        
        if command == "status":
            await deployer.check_mcp_status()
        elif command == "list":
            await deployer.list_apps()
        elif command == "deploy":
            await deployer.full_deploy()
        elif command == "logs" and len(sys.argv) > 2:
            app_id = sys.argv[2]
            await deployer.get_deployment_logs(app_id)
        else:
            print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
            print("  python deploy_with_mcp.py status  - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å MCP")
            print("  python deploy_with_mcp.py list    - —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π")
            print("  python deploy_with_mcp.py deploy  - –ø–æ–ª–Ω—ã–π –¥–µ–ø–ª–æ–π")
            print("  python deploy_with_mcp.py logs <app_id> - –ª–æ–≥–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
    else:
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∑–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω—ã–π –¥–µ–ø–ª–æ–π
        await deployer.full_deploy()


if __name__ == "__main__":
    asyncio.run(main())