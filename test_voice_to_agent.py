#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ Intelligent Agent
"""
import asyncio
import logging
from datetime import datetime

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥—É–ª–∏
from bot.webhook.handlers import webhook_handler
from bot.services.intelligent_agent_service import intelligent_agent_service

async def test_voice_message():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∞
    test_update = {
        "update_id": 888888,
        "message": {
            "message_id": 8888,
            "from": {
                "id": 229838448,  # Admin ID
                "is_bot": False,
                "first_name": "Artem",
                "username": "aaatema",
                "language_code": "ru"
            },
            "chat": {
                "id": 229838448,
                "first_name": "Artem",
                "username": "aaatema",
                "type": "private"
            },
            "date": int(datetime.now().timestamp()),
            "voice": {
                "duration": 3,
                "mime_type": "audio/ogg",
                "file_id": "TEST_VOICE_FILE_ID",
                "file_unique_id": "TEST_UNIQUE_ID",
                "file_size": 10000
            }
        }
    }
    
    logger.info("=" * 50)
    logger.info("–¢–ï–°–¢ –ì–û–õ–û–°–û–í–û–ì–û –°–û–û–ë–©–ï–ù–ò–Ø")
    logger.info("=" * 50)
    
    # –ú–æ–∫–∞–µ–º voice_service –¥–ª—è —Ç–µ—Å—Ç–∞
    from unittest.mock import AsyncMock, Mock
    from bot.webhook import handlers
    
    # –°–æ–∑–¥–∞–µ–º –º–æ–∫ voice_service
    mock_voice_service = Mock()
    mock_voice_service.process_voice = AsyncMock(return_value={
        "success": True,
        "text": "–ö–∞–∫–∏–µ —É —Ç–µ–±—è –µ—Å—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã?",
        "language": "ru",
        "duration": 3
    })
    
    # –í—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–º–µ–Ω—è–µ–º voice_service
    original_voice_service = handlers.voice_service
    handlers.voice_service = mock_voice_service
    
    try:
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        logger.info("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...")
        result = await webhook_handler.handle_update(test_update)
        
        logger.info(f"\nüì• –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ voice_service –±—ã–ª –≤—ã–∑–≤–∞–Ω
        if mock_voice_service.process_voice.called:
            logger.info("‚úÖ Voice service –≤—ã–∑–≤–∞–Ω –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏")
            call_args = mock_voice_service.process_voice.call_args
            logger.info(f"   –ê—Ä–≥—É–º–µ–Ω—Ç—ã: {call_args}")
        else:
            logger.error("‚ùå Voice service –ù–ï –±—ã–ª –≤—ã–∑–≤–∞–Ω")
            
    finally:
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π voice_service
        handlers.voice_service = original_voice_service


async def test_text_message_comparison():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è"""
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–º –∂–µ —Ç–µ–∫—Å—Ç–æ–º
    test_update = {
        "update_id": 777777,
        "message": {
            "message_id": 7777,
            "from": {
                "id": 229838448,  # Admin ID
                "is_bot": False,
                "first_name": "Artem",
                "username": "aaatema",
                "language_code": "ru"
            },
            "chat": {
                "id": 229838448,
                "first_name": "Artem",
                "username": "aaatema",
                "type": "private"
            },
            "date": int(datetime.now().timestamp()),
            "text": "–ö–∞–∫–∏–µ —É —Ç–µ–±—è –µ—Å—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã?"
        }
    }
    
    logger.info("\n" + "=" * 50)
    logger.info("–¢–ï–°–¢ –¢–ï–ö–°–¢–û–í–û–ì–û –°–û–û–ë–©–ï–ù–ò–Ø (–¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è)")
    logger.info("=" * 50)
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    logger.info("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...")
    result = await webhook_handler.handle_update(test_update)
    
    logger.info(f"\nüì• –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å Intelligent Agent
    if intelligent_agent_service:
        logger.info("‚úÖ Intelligent Agent Service –¥–æ—Å—Ç—É–ø–µ–Ω")
        logger.info(f"   Tools: {intelligent_agent_service.tool_registry.list_tools()}")
    else:
        logger.error("‚ùå Intelligent Agent Service –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    
    # –¢–µ—Å—Ç 1: –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await test_voice_message()
    
    # –¢–µ—Å—Ç 2: –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await test_text_message_comparison()


if __name__ == "__main__":
    asyncio.run(main())