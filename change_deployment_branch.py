#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–µ—Ç–∫–∏ –¥–µ–ø–ª–æ—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è DigitalOcean —á–µ—Ä–µ–∑ API

–ò–∑–º–µ–Ω—è–µ—Ç –≤–µ—Ç–∫—É —Å main –Ω–∞ refactoring –¥–ª—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –æ—á–∏—â–µ–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏
"""

import json
import os
import sys
import requests
from typing import Dict, Any

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
APP_ID = "38929bac-dfee-41b5-8b8c-ad710efd81aa"
NEW_BRANCH = "refactoring"
OLD_BRANCH = "main"

def get_digitalocean_token():
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–æ–∫–µ–Ω DigitalOcean –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ —Ñ–∞–π–ª–∞"""
    token = os.getenv('DIGITALOCEAN_TOKEN')
    if token:
        return token
    
    # –ü—Ä–æ–±—É–µ–º –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    try:
        with open('.env', 'r') as f:
            for line in f:
                if line.startswith('DIGITALOCEAN_TOKEN='):
                    return line.split('=', 1)[1].strip()
    except FileNotFoundError:
        pass
    
    return None

def get_app_spec(app_id: str, token: str) -> Dict[str, Any]:
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â—É—é —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    url = f"https://api.digitalocean.com/v2/apps/{app_id}"
    headers = {
        "Authorization": f"Bearer {token}",
        "Content-Type": "application/json"
    }
    
    print(f"üì• –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è {app_id}...")
    response = requests.get(url, headers=headers)
    
    if response.status_code != 200:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {response.status_code}")
        print(f"Response: {response.text}")
        return None
    
    app_data = response.json()
    print(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
    
    return app_data["app"]

def update_app_branch(app_id: str, token: str, app_spec: Dict[str, Any], new_branch: str) -> bool:
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –≤–µ—Ç–∫—É –≤ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    # –ù–∞—Ö–æ–¥–∏–º —Å–µ—Ä–≤–∏—Å —Å GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–º
    updated = False
    
    for service in app_spec["spec"]["services"]:
        if "github" in service:
            old_branch = service["github"]["branch"]
            service["github"]["branch"] = new_branch
            print(f"üîÑ –ò–∑–º–µ–Ω—è–µ–º –≤–µ—Ç–∫—É —Å–µ—Ä–≤–∏—Å–∞ '{service['name']}': {old_branch} ‚Üí {new_branch}")
            updated = True
    
    if not updated:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω —Å–µ—Ä–≤–∏—Å —Å GitHub –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π")
        return False
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—é
    url = f"https://api.digitalocean.com/v2/apps/{app_id}"
    headers = {
        "Authorization": f"Bearer {token}",
        "Content-Type": "application/json"
    }
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ spec –Ω—É–∂–µ–Ω)
    update_data = {
        "spec": app_spec["spec"]
    }
    
    print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é...")
    response = requests.put(url, headers=headers, json=update_data)
    
    if response.status_code != 200:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {response.status_code}")
        print(f"Response: {response.text}")
        return False
    
    print(f"‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
    return True

def get_deployment_status(app_id: str, token: str) -> Dict[str, Any]:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –¥–µ–ø–ª–æ—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    url = f"https://api.digitalocean.com/v2/apps/{app_id}/deployments"
    headers = {
        "Authorization": f"Bearer {token}",
        "Content-Type": "application/json"
    }
    
    response = requests.get(url, headers=headers)
    
    if response.status_code != 200:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ–ø–ª–æ–µ–≤: {response.status_code}")
        return None
    
    deployments = response.json()["deployments"]
    if deployments:
        latest = deployments[0]  # –°–∞–º—ã–π –Ω–æ–≤—ã–π –¥–µ–ø–ª–æ–π
        return {
            "id": latest["id"],
            "phase": latest["phase"],
            "cause": latest.get("cause", "Unknown"),
            "created_at": latest["created_at"],
            "commit_hash": latest["services"][0].get("source_commit_hash", "Unknown") if latest["services"] else "Unknown"
        }
    
    return None

def wait_for_deployment(app_id: str, token: str, timeout_minutes: int = 10):
    """–û–∂–∏–¥–∞–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–µ–ø–ª–æ—è"""
    import time
    
    print(f"‚è≥ –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–µ–ø–ª–æ—è (—Ç–∞–π–º–∞—É—Ç: {timeout_minutes} –º–∏–Ω—É—Ç)...")
    
    start_time = time.time()
    timeout_seconds = timeout_minutes * 60
    
    while time.time() - start_time < timeout_seconds:
        status = get_deployment_status(app_id, token)
        if not status:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –¥–µ–ø–ª–æ—è")
            break
        
        phase = status["phase"]
        print(f"üìä –°—Ç–∞—Ç—É—Å –¥–µ–ø–ª–æ—è: {phase} (ID: {status['id'][:8]}...)")
        
        if phase == "ACTIVE":
            print(f"‚úÖ –î–µ–ø–ª–æ–π —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!")
            print(f"üìù Commit: {status['commit_hash'][:8]}...")
            return True
        elif phase == "ERROR":
            print(f"‚ùå –î–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π")
            return False
        
        time.sleep(30)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
    
    print(f"‚è∞ –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –¥–µ–ø–ª–æ—è ({timeout_minutes} –º–∏–Ω—É—Ç)")
    return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤–µ—Ç–∫–∏ –¥–µ–ø–ª–æ—è DigitalOcean App Platform")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞
    token = get_digitalocean_token()
    if not token:
        print("‚ùå DIGITALOCEAN_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ .env —Ñ–∞–π–ª–µ")
        print("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ç–æ–∫–µ–Ω:")
        print("   export DIGITALOCEAN_TOKEN=your_token_here")
        sys.exit(1)
    
    print(f"üîê –¢–æ–∫–µ–Ω DigitalOcean –Ω–∞–π–¥–µ–Ω")
    print(f"üì± ID –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {APP_ID}")
    print(f"üåø –¢–µ–∫—É—â–∞—è –≤–µ—Ç–∫–∞: {OLD_BRANCH}")
    print(f"üåø –ù–æ–≤–∞—è –≤–µ—Ç–∫–∞: {NEW_BRANCH}")
    print()
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    app_spec = get_app_spec(APP_ID, token)
    if not app_spec:
        sys.exit(1)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –≤–µ—Ç–∫—É
    current_branch = None
    for service in app_spec["spec"]["services"]:
        if "github" in service:
            current_branch = service["github"]["branch"]
            print(f"üìã –¢–µ–∫—É—â–∞—è –≤–µ—Ç–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ '{service['name']}': {current_branch}")
    
    if current_branch == NEW_BRANCH:
        print(f"‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –≤–µ—Ç–∫—É '{NEW_BRANCH}'")
        return
    
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    print(f"\n‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤–µ—Ç–∫–∏ –∑–∞–ø—É—Å—Ç–∏—Ç –Ω–æ–≤—ã–π –¥–µ–ø–ª–æ–π!")
    print(f"   –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±—É–¥–µ—Ç –ø–µ—Ä–µ—Å–æ–±—Ä–∞–Ω–æ –∏–∑ –≤–µ—Ç–∫–∏ '{NEW_BRANCH}'")
    
    confirm = input(f"\n‚ùì –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤–µ—Ç–∫–∏ —Å '{current_branch}' –Ω–∞ '{NEW_BRANCH}'? (y/N): ")
    if confirm.lower() not in ['y', 'yes', '–¥–∞']:
        print("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        return
    
    print()
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –≤–µ—Ç–∫—É
    if update_app_branch(APP_ID, token, app_spec, NEW_BRANCH):
        print(f"üéâ –í–µ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ '{NEW_BRANCH}'!")
        print(f"üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –¥–µ–ø–ª–æ–π –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∞—Ç—å—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ –º–∏–Ω—É—Ç—ã...")
        
        # –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–µ–ø–ª–æ—è
        if wait_for_deployment(APP_ID, token):
            print(f"\nüéØ –î–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            print(f"üåê –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ –∞–¥—Ä–µ—Å—É:")
            print(f"   https://artemintegrator-nahdj.ondigitalocean.app")
            print(f"\nüìä –¢–µ–ø–µ—Ä—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –æ—á–∏—â–µ–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–µ–π –∏–∑ –≤–µ—Ç–∫–∏ '{NEW_BRANCH}'")
        else:
            print(f"\n‚ö†Ô∏è  –î–µ–ø–ª–æ–π –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –≤ –æ–∂–∏–¥–∞–µ–º–æ–µ –≤—Ä–µ–º—è")
            print(f"üîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å –≤—Ä—É—á–Ω—É—é —á–µ—Ä–µ–∑ ./get_digitalocean_logs.sh")
    else:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å –≤–µ—Ç–∫—É")
        sys.exit(1)

if __name__ == "__main__":
    main()