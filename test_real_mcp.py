#!/usr/bin/env python3
"""
–¢–µ—Å—Ç MCP —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ API –∫–ª—é—á–∞–º–∏
"""

import asyncio
import logging
import sys
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

sys.path.insert(0, str(Path(__file__).parent))

from dotenv import load_dotenv
load_dotenv()

from bot.services.claude_code_service import ClaudeCodeService

async def test_real_mcp():
    """–¢–µ—Å—Ç —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –∫–ª—é—á–∞–º–∏"""
    
    print("\nüöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ MCP —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ API –∫–ª—é—á–∞–º–∏")
    print("=" * 60)
    
    service = ClaudeCodeService()
    
    if not service.enabled:
        print("‚ùå MCP —Å–µ—Ä–≤–∏—Å –æ—Ç–∫–ª—é—á–µ–Ω!")
        return
        
    print(f"‚úÖ MCP —Å–µ—Ä–≤–∏—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    print(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é: {service.mcp_config_path}")
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã
    test_commands = [
        {
            "cmd": "/mcp status",
            "desc": "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ MCP —Å–µ—Ä–≤–µ—Ä–æ–≤"
        },
        {
            "cmd": "/mcp apps",
            "desc": "–°–ø–∏—Å–æ–∫ DigitalOcean –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π"
        },
        {
            "cmd": "/db SELECT current_database(), version()",
            "desc": "–¢–µ—Å—Ç Supabase –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"
        },
        {
            "cmd": "/docs react hooks",
            "desc": "–ü–æ–∏—Å–∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ React"
        }
    ]
    
    for test in test_commands:
        print(f"\n{'='*60}")
        print(f"üß™ {test['desc']}")
        print(f"üìù –ö–æ–º–∞–Ω–¥–∞: {test['cmd']}")
        print("-" * 40)
        
        try:
            result = await service.execute_mcp_command(test['cmd'])
            
            if result.get('success'):
                print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!")
                print(f"üìÑ –û—Ç–≤–µ—Ç:")
                response = result.get('response', '')
                if len(response) > 500:
                    print(f"{response[:500]}...")
                    print(f"(–≤—Å–µ–≥–æ {len(response)} —Å–∏–º–≤–æ–ª–æ–≤)")
                else:
                    print(response)
                    
                if result.get('data'):
                    print(f"\nüìä –î–∞–Ω–Ω—ã–µ: {result.get('data')}")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
                
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
            logger.error("–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã", exc_info=True)
    
    print("\n" + "="*60)
    print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

if __name__ == "__main__":
    asyncio.run(test_real_mcp())