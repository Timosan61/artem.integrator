#!/usr/bin/env python3
"""
–¢–µ—Å—Ç—ã –¥–ª—è Intent Classifier
"""
import asyncio
import os
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ path
sys.path.append(str(Path(__file__).parent.parent.parent))

from agent.core.intent_classifier import IntentClassifier, Intent
from agent.core.models import ToolType


def test_basic_intent_classification():
    """–¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–∞–º–µ—Ä–µ–Ω–∏–π"""
    print("\nüß™ –¢–µ—Å—Ç 1: –ë–∞–∑–æ–≤–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–∞–º–µ—Ä–µ–Ω–∏–π")
    print("-" * 50)
    
    classifier = IntentClassifier()
    
    test_cases = [
        {
            "message": "–ø–æ–∫–∞–∂–∏ –≤—Å–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è",
            "expected_intent": Intent.MCP_COMMAND,
            "min_confidence": 0.8
        },
        {
            "message": "–Ω–∞—Ä–∏—Å—É–π –º–Ω–µ –∫—Ä–∞—Å–∏–≤—ã–π –∑–∞–∫–∞—Ç –Ω–∞–¥ –º–æ—Ä–µ–º",
            "expected_intent": Intent.IMAGE_GENERATION,
            "min_confidence": 0.9
        },
        {
            "message": "–ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ –≤–∏–¥–µ–æ https://example.com/video.mp4",
            "expected_intent": Intent.VIDEO_ANALYSIS,
            "min_confidence": 0.8
        },
        {
            "message": "–ø—Ä–∏–≤–µ—Ç, –∫–∞–∫ –¥–µ–ª–∞?",
            "expected_intent": Intent.GENERAL_CHAT,
            "min_confidence": 0.0
        }
    ]
    
    passed = 0
    for test in test_cases:
        intent, confidence, metadata = classifier.classify(test["message"])
        
        success = (
            intent == test["expected_intent"] and
            confidence >= test["min_confidence"]
        )
        
        status = "‚úÖ" if success else "‚ùå"
        print(f"{status} '{test['message'][:30]}...'")
        print(f"   –û–∂–∏–¥–∞–ª–æ—Å—å: {test['expected_intent']}")
        print(f"   –ü–æ–ª—É—á–µ–Ω–æ: {intent} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.2f})")
        
        if success:
            passed += 1
    
    print(f"\n–ü—Ä–æ–π–¥–µ–Ω–æ: {passed}/{len(test_cases)}")
    return passed == len(test_cases)


def test_keyword_analysis():
    """–¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤"""
    print("\nüß™ –¢–µ—Å—Ç 2: –ê–Ω–∞–ª–∏–∑ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤")
    print("-" * 50)
    
    classifier = IntentClassifier()
    
    test_cases = [
        {
            "message": "–±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö postgresql –∫–ª–∞—Å—Ç–µ—Ä",
            "expected_tool": ToolType.MCP,
            "description": "MCP –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞"
        },
        {
            "message": "–¥–∏–∑–∞–π–Ω –∞—Ä—Ç –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏—è –≤ —Å—Ç–∏–ª–µ digital art",
            "expected_tool": ToolType.IMAGE_GENERATOR,
            "description": "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"
        },
        {
            "message": "instagram reels –∫–æ–Ω—Ç–µ–Ω—Ç –∞–Ω–∞–ª–∏–∑ –∫–∞–¥—Ä–æ–≤",
            "expected_tool": ToolType.VISION_ANALYZER,
            "description": "–ê–Ω–∞–ª–∏–∑ –≤–∏–¥–µ–æ"
        }
    ]
    
    passed = 0
    for test in test_cases:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–µ—Ç–æ–¥ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        scores = classifier._analyze_keywords(test["message"].lower())
        
        if scores:
            best_tool = max(scores.items(), key=lambda x: x[1])[0]
            success = best_tool == test["expected_tool"]
        else:
            success = False
        
        status = "‚úÖ" if success else "‚ùå"
        print(f"{status} {test['description']}")
        print(f"   –°–æ–æ–±—â–µ–Ω–∏–µ: '{test['message']}'")
        print(f"   Scores: {scores}")
        
        if success:
            passed += 1
    
    print(f"\n–ü—Ä–æ–π–¥–µ–Ω–æ: {passed}/{len(test_cases)}")
    return passed == len(test_cases)


def test_clarification_detection():
    """–¢–µ—Å—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —É—Ç–æ—á–Ω–µ–Ω–∏—è"""
    print("\nüß™ –¢–µ—Å—Ç 3: –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —É—Ç–æ—á–Ω–µ–Ω–∏—è")
    print("-" * 50)
    
    classifier = IntentClassifier()
    
    test_cases = [
        {
            "message": "–º–æ–∂–µ—Ç –ø–æ–∫–∞–∂–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏–ª–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, –Ω–µ –∑–Ω–∞—é",
            "should_clarify": True,
            "reason": "–ù–µ–æ–¥–Ω–æ–∑–Ω–∞—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å"
        },
        {
            "message": "–∞–Ω–∞–ª–∏–∑ –≤–∏–¥–µ–æ",  # –±–µ–∑ —Å—Å—ã–ª–∫–∏
            "should_clarify": True,
            "reason": "–í–∏–¥–µ–æ –∞–Ω–∞–ª–∏–∑ –±–µ–∑ —Å—Å—ã–ª–∫–∏"
        },
        {
            "message": "–ø–æ–∫–∞–∂–∏ –≤—Å–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è",
            "should_clarify": False,
            "reason": "–ß–µ—Ç–∫–∏–π –∑–∞–ø—Ä–æ—Å"
        },
        {
            "message": "—á—Ç–æ-—Ç–æ —Å–≤—è–∑–∞–Ω–Ω–æ–µ —Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è–º–∏ –∏–ª–∏ –±–∞–∑–∞–º–∏, –Ω–µ —É–≤–µ—Ä–µ–Ω",
            "should_clarify": True,
            "reason": "–ù–∏–∑–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å —Å –Ω–µ–æ–¥–Ω–æ–∑–Ω–∞—á–Ω–æ—Å—Ç—å—é"
        }
    ]
    
    passed = 0
    for test in test_cases:
        intent, confidence, metadata = classifier.classify(test["message"])
        needs_clarification = intent == Intent.CLARIFICATION_NEEDED
        
        success = needs_clarification == test["should_clarify"]
        status = "‚úÖ" if success else "‚ùå"
        
        print(f"{status} {test['reason']}")
        print(f"   –°–æ–æ–±—â–µ–Ω–∏–µ: '{test['message']}'")
        print(f"   –ù—É–∂–Ω–æ —É—Ç–æ—á–Ω–µ–Ω–∏–µ: {needs_clarification}")
        print(f"   Intent: {intent}, Confidence: {confidence:.2f}")
        
        if success:
            passed += 1
    
    print(f"\n–ü—Ä–æ–π–¥–µ–Ω–æ: {passed}/{len(test_cases)}")
    return passed == len(test_cases)


def test_yaml_pattern_loading():
    """–¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –∏–∑ YAML"""
    print("\nüß™ –¢–µ—Å—Ç 4: –ó–∞–≥—Ä—É–∑–∫–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –∏–∑ YAML")
    print("-" * 50)
    
    config_path = Path(__file__).parent.parent / "config" / "intent_patterns.yaml"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
    classifier = IntentClassifier(str(config_path))
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã
    print(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑: {config_path}")
    print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤: {len(classifier.patterns)}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    test_messages = [
        "–ø–æ–∫–∞–∂–∏ –≤—Å–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö",
        "—Å–æ–∑–¥–∞–π –º–Ω–µ –∞—Ä—Ç",
        "—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∏–¥–µ–æ"
    ]
    
    for msg in test_messages:
        intent, confidence, _ = classifier.classify(msg)
        print(f"   '{msg}' -> {intent} ({confidence:.2f})")
    
    return True


def test_tool_detection():
    """–¢–µ—Å—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
    print("\nüß™ –¢–µ—Å—Ç 5: –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤")
    print("-" * 50)
    
    classifier = IntentClassifier()
    
    test_cases = [
        {
            "message": "–ø–æ–∫–∞–∂–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö",
            "should_contain": [ToolType.MCP],
            "description": "MCP –∑–∞–ø—Ä–æ—Å"
        },
        {
            "message": "–Ω–∞—Ä–∏—Å—É–π –∫–∞—Ä—Ç–∏–Ω–∫—É –∏–ª–∏ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –≤–∏–¥–µ–æ",
            "should_contain": [ToolType.IMAGE_GENERATOR, ToolType.VISION_ANALYZER],
            "description": "–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã"
        },
        {
            "message": "–ø—Ä–∏–≤–µ—Ç, –∫–∞–∫ –¥–µ–ª–∞?",
            "should_contain": [],
            "description": "–û–±—ã—á–Ω—ã–π —á–∞—Ç"
        }
    ]
    
    passed = 0
    for test in test_cases:
        intent, confidence, metadata = classifier.classify(test["message"])
        detected_tools = metadata.get('detected_tools', [])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ –æ–∂–∏–¥–∞–µ–º—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã
        success = all(tool in detected_tools for tool in test["should_contain"])
        
        status = "‚úÖ" if success else "‚ùå"
        print(f"{status} {test['description']}")
        print(f"   –°–æ–æ–±—â–µ–Ω–∏–µ: '{test['message']}'")
        print(f"   –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã: {detected_tools}")
        print(f"   –û–∂–∏–¥–∞–ª–∏—Å—å: {test['should_contain']}")
        
        if success:
            passed += 1
    
    print(f"\n–ü—Ä–æ–π–¥–µ–Ω–æ: {passed}/{len(test_cases)}")
    return passed == len(test_cases)


def test_clarification_options():
    """–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è"""
    print("\nüß™ –¢–µ—Å—Ç 6: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è")
    print("-" * 50)
    
    classifier = IntentClassifier()
    
    # –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–¥–Ω–æ–∑–Ω–∞—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å
    message = "–ø–æ–∫–∞–∂–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏–ª–∏ –º–æ–∂–µ—Ç –ª—É—á—à–µ –Ω–∞—Ä–∏—Å—É–π –∫–∞—Ä—Ç–∏–Ω–∫—É"
    intent, confidence, metadata = classifier.classify(message)
    
    # –ü–æ–ª—É—á–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è
    options = classifier.get_clarification_options(metadata)
    
    print(f"–°–æ–æ–±—â–µ–Ω–∏–µ: '{message}'")
    print(f"Intent: {intent}, Confidence: {confidence:.2f}")
    print(f"Detected tools: {metadata.get('detected_tools', [])}")
    print(f"\n–í–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è ({len(options)}):")
    
    for i, option in enumerate(options, 1):
        print(f"\n{i}. {option['icon']} {option['name']}")
        print(f"   {option['description']}")
        print(f"   Tool: {option.get('tool', 'None')}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã
    success = len(options) > 0
    
    if success:
        print("\n‚úÖ –í–∞—Ä–∏–∞–Ω—Ç—ã —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã")
    else:
        print("\n‚ùå –í–∞—Ä–∏–∞–Ω—Ç—ã –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã")
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞
        print(f"\n–û—Ç–ª–∞–¥–∫–∞:")
        print(f"  Metadata keys: {list(metadata.keys())}")
        print(f"  Message text: {metadata.get('message_text', 'NOT FOUND')}")
    
    return success


def test_russian_commands():
    """–¢–µ—Å—Ç —Ä—É—Å—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥"""
    print("\nüß™ –¢–µ—Å—Ç 7: –†—É—Å—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã")
    print("-" * 50)
    
    classifier = IntentClassifier()
    
    test_cases = [
        {
            "message": "–ø–æ–∫–∞–∂–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö",
            "expected_intent": Intent.MCP_COMMAND,
            "expected_type": "databases"
        },
        {
            "message": "—Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–µ–ø–ª–æ–π–º–µ–Ω—Ç–æ–≤",
            "expected_intent": Intent.MCP_COMMAND,
            "expected_type": "deployments"
        },
        {
            "message": "–Ω–∞—Ä–∏—Å—É–π –∫–æ—Ç–∏–∫–∞",
            "expected_intent": Intent.IMAGE_GENERATION,
            "expected_type": None
        },
        {
            "message": "–ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ä–∏–ª—Å",
            "expected_intent": Intent.CLARIFICATION_NEEDED,  # –ù–µ—Ç —Å—Å—ã–ª–∫–∏
            "expected_type": None
        }
    ]
    
    passed = 0
    for test in test_cases:
        intent, confidence, metadata = classifier.classify(test["message"])
        
        success = intent == test["expected_intent"]
        
        # –î–ª—è MCP –∫–æ–º–∞–Ω–¥ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø
        if success and intent == Intent.MCP_COMMAND:
            detected_tools = metadata.get('detected_tools', [])
            if ToolType.MCP in detected_tools:
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ –∫–æ–º–∞–Ω–¥—ã —á–µ—Ä–µ–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
                # (—ç—Ç–æ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –≤ MCPTool)
                pass
        
        status = "‚úÖ" if success else "‚ùå"
        print(f"{status} '{test['message']}'")
        print(f"   Intent: {intent} (–æ–∂–∏–¥–∞–ª—Å—è: {test['expected_intent']})")
        print(f"   Confidence: {confidence:.2f}")
        
        if success:
            passed += 1
    
    print(f"\n–ü—Ä–æ–π–¥–µ–Ω–æ: {passed}/{len(test_cases)}")
    return passed >= len(test_cases) - 1  # –î–æ–ø—É—Å–∫–∞–µ–º 1 –æ—à–∏–±–∫—É


def run_all_tests():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ Intent Classifier")
    print("=" * 60)
    
    tests = [
        ("–ë–∞–∑–æ–≤–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è", test_basic_intent_classification),
        ("–ê–Ω–∞–ª–∏–∑ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤", test_keyword_analysis),
        ("–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ç–æ—á–Ω–µ–Ω–∏–π", test_clarification_detection),
        ("–ó–∞–≥—Ä—É–∑–∫–∞ YAML", test_yaml_pattern_loading),
        ("–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤", test_tool_detection),
        ("–í–∞—Ä–∏–∞–Ω—Ç—ã —É—Ç–æ—á–Ω–µ–Ω–∏—è", test_clarification_options),
        ("–†—É—Å—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã", test_russian_commands)
    ]
    
    results = []
    
    for name, test_func in tests:
        try:
            result = test_func()
            results.append((name, result))
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ {name}: {e}")
            import traceback
            traceback.print_exc()
            results.append((name, False))
    
    # –ò—Ç–æ–≥–∏
    print("\n" + "=" * 60)
    print("üìä –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print("-" * 60)
    
    passed = sum(1 for _, result in results if result)
    total = len(results)
    
    for name, result in results:
        status = "‚úÖ PASSED" if result else "‚ùå FAILED"
        print(f"{name:.<40} {status}")
    
    print("-" * 60)
    print(f"–ü—Ä–æ–π–¥–µ–Ω–æ: {passed}/{total} ({passed/total*100:.1f}%)")
    
    if passed == total:
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
    else:
        print(f"\n‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏ ({total - passed} –∏–∑ {total})")
    
    return passed == total


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
    success = run_all_tests()
    sys.exit(0 if success else 1)