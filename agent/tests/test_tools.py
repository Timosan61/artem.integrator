#!/usr/bin/env python3
"""
–¢–µ—Å—Ç—ã —Å–∏—Å—Ç–µ–º—ã –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ (Tool System)
–ü–†–ò–ú–ï–ß–ê–ù–ò–ï: –≠—Ç–æ—Ç —Ñ–∞–π–ª –Ω–µ–∞–∫—Ç—É–∞–ª–µ–Ω - MCPTool —É–¥–∞–ª–µ–Ω –≤ Simple Agent –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ
"""
import asyncio
import os
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ path
sys.path.append(str(Path(__file__).parent.parent.parent))

from agent.tools import EchoTool, MCPTool
from agent.core.tool_registry import tool_registry
from agent.core.models import EchoToolParams, MCPCommandParams


async def test_echo_tool_direct():
    """–¢–µ—Å—Ç –ø—Ä—è–º–æ–≥–æ –≤—ã–∑–æ–≤–∞ Echo –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞"""
    print("\nüß™ –¢–µ—Å—Ç 1: –ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤ EchoTool")
    print("-" * 50)
    
    echo_tool = EchoTool()
    
    # –¢–µ—Å—Ç 1: –û–±—ã—á–Ω–æ–µ —ç—Ö–æ
    params = EchoToolParams(
        message="Hello Tool System",
        uppercase=False,
        user_id="test_user"
    )
    
    result = await echo_tool.execute(params)
    print(f"‚úÖ –û–±—ã—á–Ω–æ–µ —ç—Ö–æ:")
    print(f"   –£—Å–ø–µ—Ö: {result.success}")
    print(f"   –î–∞–Ω–Ω—ã–µ: {result.data}")
    assert result.success
    assert result.data["echo"] == "Hello Tool System"
    
    # –¢–µ—Å—Ç 2: –≠—Ö–æ –≤ –≤–µ—Ä—Ö–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ
    params_upper = EchoToolParams(
        message="test uppercase",
        uppercase=True,
        user_id="test_user"
    )
    
    result_upper = await echo_tool.execute(params_upper)
    print(f"\n‚úÖ –≠—Ö–æ –≤ –≤–µ—Ä—Ö–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ:")
    print(f"   –£—Å–ø–µ—Ö: {result_upper.success}")
    print(f"   –î–∞–Ω–Ω—ã–µ: {result_upper.data}")
    assert result_upper.success
    assert result_upper.data["echo"] == "TEST UPPERCASE"
    
    return True


async def test_tool_registry():
    """–¢–µ—Å—Ç —Ä–µ–µ—Å—Ç—Ä–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
    print("\nüß™ –¢–µ—Å—Ç 2: Tool Registry")
    print("-" * 50)
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
    echo_tool = EchoTool()
    mcp_tool = MCPTool()
    
    tool_registry.register_tool(echo_tool)
    tool_registry.register_tool(mcp_tool)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
    print("‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã:")
    registry_info = tool_registry.get_registry_info()
    print(f"   –í—Å–µ–≥–æ: {registry_info['total_tools']}")
    print(f"   –í–∫–ª—é—á–µ–Ω–æ: {registry_info['enabled_tools']}")
    
    for tool_info in registry_info['tools']:
        status = "‚úÖ" if tool_info['enabled'] else "‚ùå"
        print(f"   {status} {tool_info['name']} - {tool_info['description']}")
    
    assert registry_info['total_tools'] >= 2
    
    # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
    retrieved_tool = tool_registry.get_tool("echo_tool")
    assert retrieved_tool is not None
    assert retrieved_tool.metadata.name == "echo_tool"
    
    return True


async def test_tool_execution_via_registry():
    """–¢–µ—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ —Ä–µ–µ—Å—Ç—Ä"""
    print("\nüß™ –¢–µ—Å—Ç 3: –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Registry")
    print("-" * 50)
    
    # –£–±–µ–¥–∏–º—Å—è —á—Ç–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã
    if not tool_registry.get_tool("echo_tool"):
        tool_registry.register_tool(EchoTool())
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º echo —á–µ—Ä–µ–∑ —Ä–µ–µ—Å—Ç—Ä
    params = {
        "message": "Registry test",
        "uppercase": True,
        "user_id": "registry_user"
    }
    
    result = await tool_registry.execute_tool("echo_tool", params)
    print(f"‚úÖ Echo —á–µ—Ä–µ–∑ —Ä–µ–µ—Å—Ç—Ä:")
    print(f"   –£—Å–ø–µ—Ö: {result.success}")
    print(f"   –î–∞–Ω–Ω—ã–µ: {result.data}")
    assert result.success
    assert result.data["echo"] == "REGISTRY TEST"
    
    # –¢–µ—Å—Ç —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–º
    result_invalid = await tool_registry.execute_tool("invalid_tool", {})
    print(f"\n‚úÖ –ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç:")
    print(f"   –£—Å–ø–µ—Ö: {result_invalid.success}")
    print(f"   –û—à–∏–±–∫–∞: {result_invalid.error}")
    assert not result_invalid.success
    assert "–Ω–µ –Ω–∞–π–¥–µ–Ω" in result_invalid.error
    
    return True


async def test_openai_schemas():
    """–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ö–µ–º –¥–ª—è OpenAI"""
    print("\nüß™ –¢–µ—Å—Ç 4: OpenAI Schemas")
    print("-" * 50)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ö–µ–º—ã
    schemas = tool_registry.get_openai_schemas()
    
    print(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ —Å—Ö–µ–º: {len(schemas)}")
    
    for schema in schemas:
        func = schema["function"]
        print(f"\nüìã –°—Ö–µ–º–∞: {func['name']}")
        print(f"   –û–ø–∏—Å–∞–Ω–∏–µ: {func['description']}")
        print(f"   –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {list(func['parameters']['properties'].keys())}")
        print(f"   –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ: {func['parameters'].get('required', [])}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å—Ö–µ–º
    assert len(schemas) >= 2
    for schema in schemas:
        assert "type" in schema
        assert schema["type"] == "function"
        assert "function" in schema
        assert "name" in schema["function"]
        assert "parameters" in schema["function"]
    
    return True


async def test_mcp_tool():
    """–¢–µ—Å—Ç MCP –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞"""
    print("\nüß™ –¢–µ—Å—Ç 5: MCP Tool")
    print("-" * 50)
    
    mcp_tool = MCPTool()
    
    # –¢–µ—Å—Ç —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
    test_commands = [
        {
            "command": "list apps",
            "expected_type": "applications"
        },
        {
            "command": "–ø–æ–∫–∞–∑–∞—Ç—å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö",
            "expected_type": "databases"
        },
        {
            "command": "get deployments",
            "expected_type": "deployments"
        }
    ]
    
    for test in test_commands:
        params = MCPCommandParams(
            command=test["command"],
            user_id="test_mcp_user"
        )
        
        result = await mcp_tool.execute(params)
        print(f"\n‚úÖ MCP –∫–æ–º–∞–Ω–¥–∞: {test['command']}")
        print(f"   –£—Å–ø–µ—Ö: {result.success}")
        print(f"   –¢–∏–ø –∫–æ–º–∞–Ω–¥—ã: {result.metadata.get('command_type')}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ (–∏–ª–∏ —ç–º—É–ª–∏—Ä–æ–≤–∞–Ω–∞)
        assert result.success
        assert result.metadata.get("command_type") == test["expected_type"]
        
        # –ï—Å–ª–∏ —ç—Ç–æ —ç–º—É–ª—è—Ü–∏—è, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∞–≥
        if result.metadata.get("emulated"):
            print(f"   ‚ö†Ô∏è  –≠–º—É–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç")
    
    return True


async def test_tool_validation():
    """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
    print("\nüß™ –¢–µ—Å—Ç 6: –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
    print("-" * 50)
    
    echo_tool = EchoTool()
    
    # –¢–µ—Å—Ç —Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ (–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç user_id)
    invalid_params = {
        "message": "Test message"
        # user_id –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
    }
    
    result = await echo_tool.execute_with_validation(invalid_params)
    print(f"‚úÖ –ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:")
    print(f"   –£—Å–ø–µ—Ö: {result.success}")
    print(f"   –û—à–∏–±–∫–∞: {result.error}")
    assert not result.success
    assert "user_id" in result.error.lower()
    
    # –¢–µ—Å—Ç —Å –≤–∞–ª–∏–¥–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    valid_params = {
        "message": "Valid test",
        "user_id": "test_user",
        "uppercase": True
    }
    
    result_valid = await echo_tool.execute_with_validation(valid_params)
    print(f"\n‚úÖ –í–∞–ª–∏–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:")
    print(f"   –£—Å–ø–µ—Ö: {result_valid.success}")
    print(f"   –î–∞–Ω–Ω—ã–µ: {result_valid.data}")
    assert result_valid.success
    
    return True


async def test_tool_enable_disable():
    """–¢–µ—Å—Ç –≤–∫–ª—é—á–µ–Ω–∏—è/–æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
    print("\nüß™ –¢–µ—Å—Ç 7: –í–∫–ª—é—á–µ–Ω–∏–µ/–æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤")
    print("-" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ echo_tool –≤–∫–ª—é—á–µ–Ω
    assert tool_registry.is_enabled("echo_tool")
    print("‚úÖ echo_tool –≤–∫–ª—é—á–µ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
    
    # –û—Ç–∫–ª—é—á–∞–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
    tool_registry.disable_tool("echo_tool")
    assert not tool_registry.is_enabled("echo_tool")
    print("‚úÖ echo_tool —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω")
    
    # –ü—ã—Ç–∞–µ–º—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
    result = await tool_registry.execute_tool("echo_tool", {
        "message": "test",
        "user_id": "test"
    })
    assert not result.success
    assert "–æ—Ç–∫–ª—é—á–µ–Ω" in result.error
    print("‚úÖ –û—Ç–∫–ª—é—á–µ–Ω–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è")
    
    # –í–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ
    tool_registry.enable_tool("echo_tool")
    assert tool_registry.is_enabled("echo_tool")
    print("‚úÖ echo_tool —É—Å–ø–µ—à–Ω–æ –≤–∫–ª—é—á–µ–Ω –æ–±—Ä–∞—Ç–Ω–æ")
    
    return True


async def run_all_tests():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ Tool System")
    print("=" * 60)
    
    tests = [
        ("Echo Tool Direct", test_echo_tool_direct),
        ("Tool Registry", test_tool_registry),
        ("Execution via Registry", test_tool_execution_via_registry),
        ("OpenAI Schemas", test_openai_schemas),
        ("MCP Tool", test_mcp_tool),
        ("Parameter Validation", test_tool_validation),
        ("Enable/Disable Tools", test_tool_enable_disable)
    ]
    
    results = []
    
    for name, test_func in tests:
        try:
            result = await test_func()
            results.append((name, result))
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ {name}: {e}")
            import traceback
            traceback.print_exc()
            results.append((name, False))
    
    # –ò—Ç–æ–≥–∏
    print("\n" + "=" * 60)
    print("üìä –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print("-" * 60)
    
    passed = sum(1 for _, result in results if result)
    total = len(results)
    
    for name, result in results:
        status = "‚úÖ PASSED" if result else "‚ùå FAILED"
        print(f"{name:.<40} {status}")
    
    print("-" * 60)
    print(f"–ü—Ä–æ–π–¥–µ–Ω–æ: {passed}/{total} ({passed/total*100:.1f}%)")
    
    if passed == total:
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
    else:
        print(f"\n‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏ ({total - passed} –∏–∑ {total})")
    
    return passed == total


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
    success = asyncio.run(run_all_tests())
    sys.exit(0 if success else 1)