#!/usr/bin/env python3
"""
–¢–µ—Å—Ç—ã –±–∞–∑–æ–≤–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ Intelligent Agent —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –≤—ã–∑–æ–≤–∞–º–∏ OpenAI
"""
import asyncio
import os
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ path
sys.path.append(str(Path(__file__).parent.parent.parent))

from agent.core.intelligent_agent import IntelligentAgent
from agent.core.models import AgentResponse, ToolType


async def test_echo_tool():
    """–¢–µ—Å—Ç echo –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞"""
    print("\nüß™ –¢–µ—Å—Ç 1: Echo Tool")
    print("-" * 50)
    
    # –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    api_key = os.getenv("OPENAI_API_KEY")
    if not api_key:
        print("‚ùå –û—à–∏–±–∫–∞: –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ OPENAI_API_KEY –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏")
        return False
    
    agent = IntelligentAgent(api_key=api_key, model="gpt-4o")
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    test_cases = [
        {
            "message": "–ò—Å–ø–æ–ª—å–∑—É–π echo tool —á—Ç–æ–±—ã –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —Ñ—Ä–∞–∑—É 'Hello World'",
            "user_id": "test_user_1"
        },
        {
            "message": "–ü–æ–≤—Ç–æ—Ä–∏ '—Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ' –≤ –≤–µ—Ä—Ö–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ –∏—Å–ø–æ–ª—å–∑—É—è echo",
            "user_id": "test_user_2"
        }
    ]
    
    for i, test in enumerate(test_cases, 1):
        print(f"\n–¢–µ—Å—Ç 1.{i}: {test['message']}")
        
        try:
            response = await agent.process_message(
                message=test["message"],
                user_id=test["user_id"]
            )
            
            print(f"‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω:")
            print(f"   –°–æ–æ–±—â–µ–Ω–∏–µ: {response.message}")
            print(f"   –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: {response.tool_used}")
            print(f"   –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {response.confidence}")
            
            if response.tool_response:
                print(f"   –î–∞–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞: {response.tool_response.data}")
                
            # –ü—Ä–æ–≤–µ—Ä–∫–∏
            assert isinstance(response, AgentResponse)
            assert response.tool_used == ToolType.ECHO
            assert response.tool_response.success
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            return False
    
    return True


async def test_mcp_intent():
    """–¢–µ—Å—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è MCP –Ω–∞–º–µ—Ä–µ–Ω–∏–π"""
    print("\nüß™ –¢–µ—Å—Ç 2: MCP Intent Detection")
    print("-" * 50)
    
    api_key = os.getenv("OPENAI_API_KEY")
    if not api_key:
        print("‚ùå –û—à–∏–±–∫–∞: –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ OPENAI_API_KEY –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏")
        return False
    
    agent = IntelligentAgent(api_key=api_key, model="gpt-4o")
    
    test_cases = [
        "–ü–æ–∫–∞–∂–∏ –º–æ–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ DigitalOcean",
        "–ö–∞–∫–∏–µ —É –º–µ–Ω—è –µ—Å—Ç—å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö?",
        "–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–µ–ø–ª–æ–π–º–µ–Ω—Ç–æ–≤"
    ]
    
    for i, message in enumerate(test_cases, 1):
        print(f"\n–¢–µ—Å—Ç 2.{i}: {message}")
        
        try:
            response = await agent.process_message(
                message=message,
                user_id="test_mcp_user"
            )
            
            print(f"‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω:")
            print(f"   –°–æ–æ–±—â–µ–Ω–∏–µ: {response.message}")
            print(f"   –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: {response.tool_used}")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –æ–ø—Ä–µ–¥–µ–ª–∏–ª—Å—è MCP
            assert response.tool_used == ToolType.MCP or "MCP" in response.message
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            return False
    
    return True


async def test_image_generation_intent():
    """–¢–µ—Å—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–∞–º–µ—Ä–µ–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    print("\nüß™ –¢–µ—Å—Ç 3: Image Generation Intent")
    print("-" * 50)
    
    api_key = os.getenv("OPENAI_API_KEY")
    if not api_key:
        print("‚ùå –û—à–∏–±–∫–∞: –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ OPENAI_API_KEY –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏")
        return False
    
    agent = IntelligentAgent(api_key=api_key, model="gpt-4o")
    
    test_cases = [
        "–ù–∞—Ä–∏—Å—É–π –∫—Ä–∞—Å–∏–≤—ã–π –∑–∞–∫–∞—Ç –Ω–∞–¥ –æ–∫–µ–∞–Ω–æ–º",
        "–°–æ–∑–¥–∞–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ—Ç–∞ –≤ –∫–æ—Å–º–æ—Å–µ –≤ —Å—Ç–∏–ª–µ cartoon",
        "–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –∫–∞—Ä—Ç–∏–Ω–∫—É —Ä–æ–±–æ—Ç–∞ –≤ —Å—Ç–∏–ª–µ oil painting —Ä–∞–∑–º–µ—Ä–æ–º 1792x1024"
    ]
    
    for i, message in enumerate(test_cases, 1):
        print(f"\n–¢–µ—Å—Ç 3.{i}: {message}")
        
        try:
            response = await agent.process_message(
                message=message,
                user_id="test_image_user"
            )
            
            print(f"‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω:")
            print(f"   –°–æ–æ–±—â–µ–Ω–∏–µ: {response.message[:100]}...")
            print(f"   –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: {response.tool_used}")
            
            if response.tool_response and response.tool_response.data:
                print(f"   –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {response.tool_response.data}")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞
            assert response.tool_used == ToolType.IMAGE_GENERATOR or "–∏–∑–æ–±—Ä–∞–∂–µ–Ω" in response.message.lower()
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            return False
    
    return True


async def test_general_chat():
    """–¢–µ—Å—Ç –æ–±—ã—á–Ω–æ–≥–æ —á–∞—Ç–∞ –±–µ–∑ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
    print("\nüß™ –¢–µ—Å—Ç 4: General Chat (–±–µ–∑ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤)")
    print("-" * 50)
    
    api_key = os.getenv("OPENAI_API_KEY")
    if not api_key:
        print("‚ùå –û—à–∏–±–∫–∞: –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ OPENAI_API_KEY –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏")
        return False
    
    agent = IntelligentAgent(api_key=api_key, model="gpt-4o")
    
    test_cases = [
        "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?",
        "–†–∞—Å—Å–∫–∞–∂–∏ –∞–Ω–µ–∫–¥–æ—Ç –ø—Ä–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–æ–≤",
        "–ß—Ç–æ —Ç–∞–∫–æ–µ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç?"
    ]
    
    for i, message in enumerate(test_cases, 1):
        print(f"\n–¢–µ—Å—Ç 4.{i}: {message}")
        
        try:
            response = await agent.process_message(
                message=message,
                user_id="test_chat_user"
            )
            
            print(f"‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω:")
            print(f"   –°–æ–æ–±—â–µ–Ω–∏–µ: {response.message[:150]}...")
            print(f"   –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: {response.tool_used}")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –ù–ï –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
            assert response.tool_used is None
            assert response.tool_response is None
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            return False
    
    return True


async def test_context_handling():
    """–¢–µ—Å—Ç —Ä–∞–±–æ—Ç—ã —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º"""
    print("\nüß™ –¢–µ—Å—Ç 5: Context Handling")
    print("-" * 50)
    
    api_key = os.getenv("OPENAI_API_KEY")
    if not api_key:
        print("‚ùå –û—à–∏–±–∫–∞: –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ OPENAI_API_KEY –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏")
        return False
    
    agent = IntelligentAgent(api_key=api_key, model="gpt-4o")
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
    context = [
        {"role": "user", "content": "–ú–µ–Ω—è –∑–æ–≤—É—Ç –ê–ª–µ–∫—Å–µ–π"},
        {"role": "assistant", "content": "–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, –ê–ª–µ–∫—Å–µ–π!"}
    ]
    
    print("–ö–æ–Ω—Ç–µ–∫—Å—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–µ–¥—Å—Ç–∞–≤–∏–ª—Å—è –∫–∞–∫ –ê–ª–µ–∫—Å–µ–π")
    
    try:
        response = await agent.process_message(
            message="–ö–∞–∫ –º–µ–Ω—è –∑–æ–≤—É—Ç?",
            user_id="test_context_user",
            context=context
        )
        
        print(f"‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω:")
        print(f"   –°–æ–æ–±—â–µ–Ω–∏–µ: {response.message}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –∞–≥–µ–Ω—Ç –ø–æ–º–Ω–∏—Ç –∏–º—è
        assert "–ê–ª–µ–∫—Å–µ–π" in response.message or "–∞–ª–µ–∫—Å–µ–π" in response.message.lower()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False
    
    return True


async def run_all_tests():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –±–∞–∑–æ–≤–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ Intelligent Agent")
    print("=" * 60)
    
    tests = [
        ("Echo Tool", test_echo_tool),
        ("MCP Intent", test_mcp_intent),
        ("Image Generation", test_image_generation_intent),
        ("General Chat", test_general_chat),
        ("Context Handling", test_context_handling)
    ]
    
    results = []
    
    for name, test_func in tests:
        try:
            result = await test_func()
            results.append((name, result))
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ {name}: {e}")
            results.append((name, False))
    
    # –ò—Ç–æ–≥–∏
    print("\n" + "=" * 60)
    print("üìä –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print("-" * 60)
    
    passed = sum(1 for _, result in results if result)
    total = len(results)
    
    for name, result in results:
        status = "‚úÖ PASSED" if result else "‚ùå FAILED"
        print(f"{name:.<40} {status}")
    
    print("-" * 60)
    print(f"–ü—Ä–æ–π–¥–µ–Ω–æ: {passed}/{total} ({passed/total*100:.1f}%)")
    
    if passed == total:
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
    else:
        print(f"\n‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏ ({total - passed} –∏–∑ {total})")
    
    return passed == total


if __name__ == "__main__":
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–∞
    if not os.getenv("OPENAI_API_KEY"):
        print("‚ùå –û—à–∏–±–∫–∞: –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è OPENAI_API_KEY")
        print("export OPENAI_API_KEY='your-api-key-here'")
        sys.exit(1)
    
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
    success = asyncio.run(run_all_tests())
    sys.exit(0 if success else 1)