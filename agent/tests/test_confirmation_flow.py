#!/usr/bin/env python3
"""
–¢–µ—Å—Ç—ã –¥–ª—è Confirmation Manager –∏ ConversationState
"""
import asyncio
import os
import sys
from pathlib import Path
from datetime import datetime, timedelta

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ path
sys.path.append(str(Path(__file__).parent.parent.parent))

from agent.core.confirmation_manager import (
    ConfirmationManager, 
    ConfirmationStatus,
    ConfirmationSession
)
from agent.core.conversation_state import (
    ConversationStateManager,
    StateType
)
from agent.core.confirmation_formatter import ConfirmationFormatter
from agent.tools import MCPTool, EchoTool
from agent.core.models import MCPCommandParams, EchoToolParams, ToolType


async def test_confirmation_request():
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
    print("\nüß™ –¢–µ—Å—Ç 1: –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")
    print("-" * 50)
    
    manager = ConfirmationManager(default_timeout=60)
    tool = MCPTool()
    params = MCPCommandParams(
        command="delete app production",
        user_id="test_user"
    )
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å
    session_id = await manager.request_confirmation(
        user_id="test_user",
        tool=tool,
        params=params
    )
    
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω –∑–∞–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {session_id}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Å—Å–∏—é
    session = manager.get_session(session_id)
    assert session is not None
    assert session.status == ConfirmationStatus.PENDING
    assert session.user_id == "test_user"
    assert session.tool == tool
    
    print(f"   –°—Ç–∞—Ç—É—Å: {session.status}")
    print(f"   –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: {session.tool.metadata.name}")
    print(f"   –ò—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑: {(session.expires_at - datetime.now()).seconds}—Å")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–∏—Å–æ–∫ –æ–∂–∏–¥–∞—é—â–∏—Ö —Å–µ—Å—Å–∏–π
    pending = manager.get_pending_sessions("test_user")
    assert len(pending) == 1
    assert pending[0].session_id == session_id
    
    return True


async def test_confirmation_response():
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ"""
    print("\nüß™ –¢–µ—Å—Ç 2: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ")
    print("-" * 50)
    
    manager = ConfirmationManager()
    tool = EchoTool()
    params = EchoToolParams(
        message="Test confirmation",
        uppercase=True,
        user_id="test_user"
    )
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å
    session_id = await manager.request_confirmation(
        user_id="test_user",
        tool=tool,
        params=params
    )
    
    # –¢–µ—Å—Ç 1: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    print("‚úÖ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ...")
    result = await manager.handle_response(session_id, confirmed=True)
    
    assert result is not None
    assert result.success
    assert result.data["echo"] == "TEST CONFIRMATION"
    
    session = manager.get_session(session_id)
    assert session.status == ConfirmationStatus.CONFIRMED
    
    print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {result.data['echo']}")
    print(f"   –°—Ç–∞—Ç—É—Å —Å–µ—Å—Å–∏–∏: {session.status}")
    
    # –¢–µ—Å—Ç 2: –û—Ç–º–µ–Ω–∞
    params2 = EchoToolParams(
        message="Test cancellation",
        user_id="test_user"
    )
    
    session_id2 = await manager.request_confirmation(
        user_id="test_user",
        tool=tool,
        params=params2
    )
    
    print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç–º–µ–Ω—É...")
    result2 = await manager.handle_response(session_id2, confirmed=False)
    
    assert result2 is None
    session2 = manager.get_session(session_id2)
    assert session2.status == ConfirmationStatus.CANCELLED
    
    print(f"   –°—Ç–∞—Ç—É—Å —Å–µ—Å—Å–∏–∏: {session2.status}")
    
    return True


async def test_confirmation_timeout():
    """–¢–µ—Å—Ç —Ç–∞–π–º–∞—É—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
    print("\nüß™ –¢–µ—Å—Ç 3: –¢–∞–π–º–∞—É—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")
    print("-" * 50)
    
    # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä —Å –∫–æ—Ä–æ—Ç–∫–∏–º —Ç–∞–π–º–∞—É—Ç–æ–º
    manager = ConfirmationManager(default_timeout=1)
    tool = EchoTool()
    params = EchoToolParams(
        message="Test timeout",
        user_id="test_user"
    )
    
    session_id = await manager.request_confirmation(
        user_id="test_user",
        tool=tool,
        params=params
    )
    
    print("‚è∞ –ñ–¥–µ–º –∏—Å—Ç–µ—á–µ–Ω–∏—è —Ç–∞–π–º–∞—É—Ç–∞...")
    await asyncio.sleep(2)
    
    # –ü—ã—Ç–∞–µ–º—Å—è –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏—Å—Ç–µ–∫—à–∏–π –∑–∞–ø—Ä–æ—Å
    result = await manager.handle_response(session_id, confirmed=True)
    
    assert result is None
    session = manager.get_session(session_id)
    assert session.status == ConfirmationStatus.EXPIRED
    
    print(f"‚úÖ –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞: {session.status}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—á–∏—Å—Ç–∫—É –∏—Å—Ç–µ–∫—à–∏—Ö —Å–µ—Å—Å–∏–π
    expired_count = manager.cleanup_expired()
    print(f"‚úÖ –û—á–∏—â–µ–Ω–æ –∏—Å—Ç–µ–∫—à–∏—Ö —Å–µ—Å—Å–∏–π: {expired_count}")
    
    return True


async def test_conversation_states():
    """–¢–µ—Å—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞"""
    print("\nüß™ –¢–µ—Å—Ç 4: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞")
    print("-" * 50)
    
    state_manager = ConversationStateManager(default_ttl=60)
    
    # –¢–µ—Å—Ç 1: –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    print("‚úÖ –°–æ–∑–¥–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è...")
    conf_state = state_manager.set_confirmation_state(
        user_id="test_user",
        original_message="—É–¥–∞–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ production",
        tool_name="mcp_executor",
        parameters={"command": "delete app production"},
        confirmation_session_id="test_session_123"
    )
    
    assert conf_state.state_type == StateType.CONFIRMATION.value
    assert conf_state.tool_to_execute == "mcp_executor"
    assert conf_state.parameters["confirmation_session_id"] == "test_session_123"
    
    print(f"   –¢–∏–ø —Å–æ—Å—Ç–æ—è–Ω–∏—è: {conf_state.state_type}")
    print(f"   –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: {conf_state.tool_to_execute}")
    
    # –¢–µ—Å—Ç 2: –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —É—Ç–æ—á–Ω–µ–Ω–∏—è
    print("\n‚úÖ –°–æ–∑–¥–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É—Ç–æ—á–Ω–µ–Ω–∏—è...")
    clarif_state = state_manager.set_clarification_state(
        user_id="test_user2",
        original_message="—Å–¥–µ–ª–∞–π —á—Ç–æ-–Ω–∏–±—É–¥—å —Å –¥–∞–Ω–Ω—ã–º–∏",
        clarification_options=[
            {"tool": "mcp_executor", "name": "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π"},
            {"tool": None, "name": "–û–±—ã—á–Ω—ã–π —Ä–∞–∑–≥–æ–≤–æ—Ä"}
        ]
    )
    
    assert clarif_state.state_type == StateType.CLARIFICATION.value
    assert len(clarif_state.parameters["options"]) == 2
    
    print(f"   –¢–∏–ø —Å–æ—Å—Ç–æ—è–Ω–∏—è: {clarif_state.state_type}")
    print(f"   –í–∞—Ä–∏–∞–Ω—Ç–æ–≤: {len(clarif_state.parameters['options'])}")
    
    # –¢–µ—Å—Ç 3: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    print("\n‚úÖ –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ...")
    updated = state_manager.update_state(
        user_id="test_user",
        parameters={"command": "delete app staging", "updated": True}
    )
    
    assert updated is not None
    assert updated.parameters["updated"] is True
    
    # –¢–µ—Å—Ç 4: –ò—Å—Ç–æ—Ä–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π
    print("\n‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–æ—Ä–∏—é...")
    state_manager.clear_state("test_user")
    history = state_manager.get_state_history("test_user")
    
    assert len(history) > 0
    print(f"   –ó–∞–ø–∏—Å–µ–π –≤ –∏—Å—Ç–æ—Ä–∏–∏: {len(history)}")
    
    return True


async def test_confirmation_formatting():
    """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
    print("\nüß™ –¢–µ—Å—Ç 5: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π")
    print("-" * 50)
    
    tool = MCPTool()
    params = MCPCommandParams(
        command="delete database production_db",
        user_id="test_user"
    )
    
    expires_at = datetime.now() + timedelta(minutes=5)
    
    # –¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    message = ConfirmationFormatter.format_confirmation_message(
        tool=tool,
        params=params,
        session_id="test_123",
        expires_at=expires_at
    )
    
    print("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:")
    print(message)
    
    assert "–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ" in message
    assert "delete database" in message
    assert "‚ö†Ô∏è" in message  # –î–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –¥–ª—è delete
    
    # –¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É—Ç–æ—á–Ω–µ–Ω–∏—è
    clarif_message = ConfirmationFormatter.format_clarification_message(
        original_message="–ø–æ–∫–∞–∂–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å",
        options=[
            {
                "tool": ToolType.MCP,
                "name": "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π",
                "description": "–ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –∏ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö",
                "icon": "üîß"
            },
            {
                "tool": None,
                "name": "–û–±—ã—á–Ω—ã–π —Ä–∞–∑–≥–æ–≤–æ—Ä",
                "description": "–ü—Ä–æ—Å—Ç–æ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å",
                "icon": "üí¨"
            }
        ]
    )
    
    print("\n‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Ç–æ—á–Ω–µ–Ω–∏—è:")
    print(clarif_message)
    
    assert "–£—Ç–æ—á–Ω–∏—Ç–µ" in clarif_message
    assert "–ø–æ–∫–∞–∂–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å" in clarif_message
    assert "üîß" in clarif_message
    
    # –¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É—Å–ø–µ—Ö–∞
    success_message = ConfirmationFormatter.format_success_message(
        tool_type=ToolType.MCP,
        operation="–£–¥–∞–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö",
        result={"status": "deleted", "database": "test_db"}
    )
    
    print("\n‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—Ö–∞:")
    print(success_message)
    
    assert "—É—Å–ø–µ—à–Ω–æ" in success_message
    assert "deleted" in success_message
    
    return True


async def test_confirmation_buttons():
    """–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–Ω–æ–ø–æ–∫ –¥–ª—è Telegram"""
    print("\nüß™ –¢–µ—Å—Ç 6: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫")
    print("-" * 50)
    
    manager = ConfirmationManager()
    session_id = "test_session_456"
    
    buttons = manager.format_confirmation_buttons(session_id)
    
    assert len(buttons) == 2
    assert buttons[0]["text"] == "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"
    assert buttons[0]["callback_data"] == f"confirm:{session_id}:yes"
    assert buttons[1]["text"] == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å"
    assert buttons[1]["callback_data"] == f"confirm:{session_id}:no"
    
    print("‚úÖ –ö–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:")
    for btn in buttons:
        print(f"   {btn['text']} -> {btn['callback_data']}")
    
    return True


async def test_state_export_import():
    """–¢–µ—Å—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞/–∏–º–ø–æ—Ä—Ç–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π"""
    print("\nüß™ –¢–µ—Å—Ç 7: –≠–∫—Å–ø–æ—Ä—Ç/–∏–º–ø–æ—Ä—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–π")
    print("-" * 50)
    
    manager = ConversationStateManager()
    
    # –°–æ–∑–¥–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    original_state = manager.set_confirmation_state(
        user_id="export_user",
        original_message="test export",
        tool_name="test_tool",
        parameters={"test": True},
        confirmation_session_id="export_123"
    )
    
    # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º
    exported = manager.export_state("export_user")
    assert exported is not None
    
    print("‚úÖ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:")
    print(f"   user_id: {exported['user_id']}")
    print(f"   state_type: {exported['state_type']}")
    
    # –û—á–∏—â–∞–µ–º –∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ
    manager.clear_state("export_user")
    imported = manager.import_state(exported)
    
    assert imported is not None
    assert imported.user_id == original_state.user_id
    assert imported.state_type == original_state.state_type
    assert imported.parameters["test"] is True
    
    print("‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ")
    
    return True


async def run_all_tests():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ Confirmation Flow")
    print("=" * 60)
    
    tests = [
        ("–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è", test_confirmation_request),
        ("–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞", test_confirmation_response),
        ("–¢–∞–π–º–∞—É—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è", test_confirmation_timeout),
        ("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏", test_conversation_states),
        ("–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π", test_confirmation_formatting),
        ("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫", test_confirmation_buttons),
        ("–≠–∫—Å–ø–æ—Ä—Ç/–∏–º–ø–æ—Ä—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–π", test_state_export_import)
    ]
    
    results = []
    
    for name, test_func in tests:
        try:
            result = await test_func()
            results.append((name, result))
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ {name}: {e}")
            import traceback
            traceback.print_exc()
            results.append((name, False))
    
    # –ò—Ç–æ–≥–∏
    print("\n" + "=" * 60)
    print("üìä –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print("-" * 60)
    
    passed = sum(1 for _, result in results if result)
    total = len(results)
    
    for name, result in results:
        status = "‚úÖ PASSED" if result else "‚ùå FAILED"
        print(f"{name:.<40} {status}")
    
    print("-" * 60)
    print(f"–ü—Ä–æ–π–¥–µ–Ω–æ: {passed}/{total} ({passed/total*100:.1f}%)")
    
    if passed == total:
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
    else:
        print(f"\n‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏ ({total - passed} –∏–∑ {total})")
    
    return passed == total


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
    success = asyncio.run(run_all_tests())
    sys.exit(0 if success else 1)