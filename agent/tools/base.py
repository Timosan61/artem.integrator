"""
–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –≤—Å–µ—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
"""
from abc import ABC, abstractmethod
from typing import Dict, Any, Optional, Type
from pydantic import BaseModel
import logging

from ..core.models import BaseToolParams, ToolResponse, ToolType

logger = logging.getLogger(__name__)


class ToolMetadata(BaseModel):
    """–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞"""
    name: str
    description: str
    version: str = "1.0.0"
    author: str = "Intelligent Agent"
    requires_confirmation: bool = False
    estimated_time: Optional[str] = None
    
    class Config:
        arbitrary_types_allowed = True


class BaseTool(ABC):
    """–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –≤—Å–µ—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
    
    def __init__(self):
        self.logger = logging.getLogger(f"{__name__}.{self.__class__.__name__}")
        self.logger.info(f"üîß –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç {self.__class__.__name__} –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    @abstractmethod
    def get_metadata(self) -> ToolMetadata:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞"""
        pass
    
    @abstractmethod
    def get_openai_schema(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ö–µ–º—É —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è OpenAI"""
        pass
    
    @abstractmethod
    def get_params_model(self) -> Type[BaseToolParams]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç Pydantic –º–æ–¥–µ–ª—å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
        pass
    
    @abstractmethod
    async def execute(self, params: BaseToolParams) -> ToolResponse:
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
        
        Args:
            params: –í–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            
        Returns:
            ToolResponse —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        """
        pass
    
    def validate_params(self, params_dict: Dict[str, Any]) -> BaseToolParams:
        """
        –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —á–µ—Ä–µ–∑ Pydantic
        
        Args:
            params_dict: –°–ª–æ–≤–∞—Ä—å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            
        Returns:
            –í–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            
        Raises:
            ValidationError: –ï—Å–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–µ–≤–∞–ª–∏–¥–Ω—ã
        """
        params_model = self.get_params_model()
        return params_model(**params_dict)
    
    async def execute_with_validation(self, params_dict: Dict[str, Any]) -> ToolResponse:
        """
        –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
        
        Args:
            params_dict: –°–ª–æ–≤–∞—Ä—å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            
        Returns:
            ToolResponse —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
        """
        try:
            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            validated_params = self.validate_params(params_dict)
            
            # –õ–æ–≥–∏—Ä—É–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
            self.logger.info(
                f"üöÄ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ {self.metadata.name} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {validated_params.user_id}"
            )
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
            result = await self.execute(validated_params)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            if result.metadata is None:
                result.metadata = {}
            result.metadata["tool_name"] = self.metadata.name
            result.metadata["tool_version"] = self.metadata.version
            
            if result.success:
                self.logger.info(f"‚úÖ {self.metadata.name} –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            else:
                self.logger.error(f"‚ùå {self.metadata.name} –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π: {result.error}")
            
            return result
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è {self.metadata.name}: {e}", exc_info=True)
            return ToolResponse(
                success=False,
                error=str(e),
                metadata={"tool_name": self.metadata.name}
            )
    
    def get_confirmation_message(self, params: BaseToolParams) -> Optional[str]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è
        
        Args:
            params: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
            
        Returns:
            –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ None
        """
        if not self.metadata.requires_confirmation:
            return None
        
        message = f"""
üìã **–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è**

–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: **{self.metadata.name}**
{self.metadata.description}

"""
        
        if self.metadata.estimated_time:
            message += f"‚è± –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {self.metadata.estimated_time}\n\n"
        
        message += "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ?\n‚úÖ –î–∞ / ‚ùå –ù–µ—Ç"
        
        return message