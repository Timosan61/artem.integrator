"""
Conversation State Manager - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
"""
import logging
from typing import Dict, Optional, List, Any
from datetime import datetime, timedelta
from enum import Enum
import json

from ..core.models import ConversationState

logger = logging.getLogger(__name__)


class StateType(str, Enum):
    """–¢–∏–ø—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π —Ä–∞–∑–≥–æ–≤–æ—Ä–∞"""
    NORMAL = "normal"
    CONFIRMATION = "confirmation"
    CLARIFICATION = "clarification"
    MULTI_STEP = "multi_step"


class ConversationStateManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏–π —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    
    def __init__(self, default_ttl: int = 3600):
        """
        Args:
            default_ttl: –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1 —á–∞—Å)
        """
        self.default_ttl = default_ttl
        self._states: Dict[str, ConversationState] = {}
        self._state_history: Dict[str, List[ConversationState]] = {}
        
        logger.info(f"üìù ConversationStateManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (TTL: {default_ttl}—Å)")
    
    def create_state(
        self,
        user_id: str,
        state_type: StateType,
        original_message: str,
        tool_to_execute: Optional[str] = None,
        parameters: Optional[Dict[str, Any]] = None,
        ttl: Optional[int] = None
    ) -> ConversationState:
        """
        –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            state_type: –¢–∏–ø —Å–æ—Å—Ç–æ—è–Ω–∏—è
            original_message: –ò—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            tool_to_execute: –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            parameters: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
            ttl: –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            
        Returns:
            –°–æ–∑–¥–∞–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        """
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
        if user_id in self._states:
            self._add_to_history(user_id, self._states[user_id])
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è
        ttl = ttl or self.default_ttl
        expires_at = datetime.now() + timedelta(seconds=ttl)
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        state = ConversationState(
            user_id=user_id,
            state_type=state_type.value,
            original_message=original_message,
            tool_to_execute=tool_to_execute,
            parameters=parameters,
            expires_at=expires_at
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º
        self._states[user_id] = state
        
        logger.info(f"üìå –°–æ–∑–¥–∞–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ {state_type} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        return state
    
    def get_state(self, user_id: str) -> Optional[ConversationState]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–ª–∏ None
        """
        state = self._states.get(user_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–µ—á–µ–Ω–∏–µ
        if state and state.expires_at and datetime.now() > state.expires_at:
            logger.info(f"‚è∞ –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∏—Å—Ç–µ–∫–ª–æ")
            self._add_to_history(user_id, state)
            del self._states[user_id]
            return None
        
        return state
    
    def update_state(
        self,
        user_id: str,
        **kwargs
    ) -> Optional[ConversationState]:
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            **kwargs: –ü–æ–ª—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            
        Returns:
            –û–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–ª–∏ None
        """
        state = self.get_state(user_id)
        if not state:
            return None
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è
        for key, value in kwargs.items():
            if hasattr(state, key):
                setattr(state, key, value)
        
        logger.info(f"üìù –û–±–Ω–æ–≤–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        return state
    
    def clear_state(self, user_id: str) -> bool:
        """
        –û—á–∏—â–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            True –µ—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±—ã–ª–æ –æ—á–∏—â–µ–Ω–æ
        """
        if user_id in self._states:
            self._add_to_history(user_id, self._states[user_id])
            del self._states[user_id]
            logger.info(f"üßπ –û—á–∏—â–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            return True
        
        return False
    
    def set_normal_state(self, user_id: str) -> ConversationState:
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ"""
        return self.create_state(
            user_id=user_id,
            state_type=StateType.NORMAL,
            original_message="",
            ttl=60  # –ö–æ—Ä–æ—Ç–∫–æ–µ –≤—Ä–µ–º—è –∂–∏–∑–Ω–∏ –¥–ª—è –Ω–æ—Ä–º–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        )
    
    def set_confirmation_state(
        self,
        user_id: str,
        original_message: str,
        tool_name: str,
        parameters: Dict[str, Any],
        confirmation_session_id: str
    ) -> ConversationState:
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
        params = parameters.copy()
        params['confirmation_session_id'] = confirmation_session_id
        
        return self.create_state(
            user_id=user_id,
            state_type=StateType.CONFIRMATION,
            original_message=original_message,
            tool_to_execute=tool_name,
            parameters=params,
            ttl=300  # 5 –º–∏–Ω—É—Ç –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        )
    
    def set_clarification_state(
        self,
        user_id: str,
        original_message: str,
        clarification_options: List[Dict[str, Any]]
    ) -> ConversationState:
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —É—Ç–æ—á–Ω–µ–Ω–∏—è"""
        return self.create_state(
            user_id=user_id,
            state_type=StateType.CLARIFICATION,
            original_message=original_message,
            parameters={'options': clarification_options},
            ttl=180  # 3 –º–∏–Ω—É—Ç—ã –Ω–∞ —É—Ç–æ—á–Ω–µ–Ω–∏–µ
        )
    
    def set_multi_step_state(
        self,
        user_id: str,
        original_message: str,
        current_step: int,
        total_steps: int,
        step_data: Dict[str, Any]
    ) -> ConversationState:
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–Ω–æ–≥–æ—à–∞–≥–æ–≤–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞"""
        return self.create_state(
            user_id=user_id,
            state_type=StateType.MULTI_STEP,
            original_message=original_message,
            parameters={
                'current_step': current_step,
                'total_steps': total_steps,
                'step_data': step_data
            },
            ttl=600  # 10 –º–∏–Ω—É—Ç –Ω–∞ –º–Ω–æ–≥–æ—à–∞–≥–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å
        )
    
    def _add_to_history(self, user_id: str, state: ConversationState):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é"""
        if user_id not in self._state_history:
            self._state_history[user_id] = []
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ 10 —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏
        history = self._state_history[user_id]
        history.append(state)
        if len(history) > 10:
            history.pop(0)
    
    def get_state_history(self, user_id: str, limit: int = 5) -> List[ConversationState]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            limit: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
            
        Returns:
            –°–ø–∏—Å–æ–∫ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
        """
        history = self._state_history.get(user_id, [])
        return history[-limit:] if history else []
    
    def cleanup_expired(self) -> int:
        """–û—á–∏—â–∞–µ—Ç –∏—Å—Ç–µ–∫—à–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
        now = datetime.now()
        expired_users = []
        
        for user_id, state in self._states.items():
            if state.expires_at and now > state.expires_at:
                expired_users.append(user_id)
        
        for user_id in expired_users:
            self.clear_state(user_id)
        
        if expired_users:
            logger.info(f"üßπ –û—á–∏—â–µ–Ω–æ {len(expired_users)} –∏—Å—Ç–µ–∫—à–∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π")
        
        return len(expired_users)
    
    def get_stats(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è–º"""
        by_type = {}
        
        for state in self._states.values():
            state_type = state.state_type
            by_type[state_type] = by_type.get(state_type, 0) + 1
        
        return {
            "active_states": len(self._states),
            "by_type": by_type,
            "users_with_history": len(self._state_history),
            "total_history_records": sum(len(h) for h in self._state_history.values())
        }
    
    def export_state(self, user_id: str) -> Optional[Dict[str, Any]]:
        """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏"""
        state = self.get_state(user_id)
        if not state:
            return None
        
        return {
            "user_id": state.user_id,
            "state_type": state.state_type,
            "original_message": state.original_message,
            "tool_to_execute": state.tool_to_execute,
            "parameters": state.parameters,
            "created_at": state.created_at.isoformat(),
            "expires_at": state.expires_at.isoformat() if state.expires_at else None
        }
    
    def import_state(self, state_data: Dict[str, Any]) -> Optional[ConversationState]:
        """–ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑ —Å–ª–æ–≤–∞—Ä—è"""
        try:
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞—Ç—ã
            created_at = datetime.fromisoformat(state_data["created_at"])
            expires_at = None
            if state_data.get("expires_at"):
                expires_at = datetime.fromisoformat(state_data["expires_at"])
            
            # –°–æ–∑–¥–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            state = ConversationState(
                user_id=state_data["user_id"],
                state_type=state_data["state_type"],
                original_message=state_data["original_message"],
                tool_to_execute=state_data.get("tool_to_execute"),
                parameters=state_data.get("parameters"),
                created_at=created_at,
                expires_at=expires_at
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º
            self._states[state.user_id] = state
            
            return state
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")
            return None


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π
conversation_state_manager = ConversationStateManager()