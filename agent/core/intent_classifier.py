"""
Intent Classifier - –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä –Ω–∞–º–µ—Ä–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
"""
import re
import logging
from typing import Dict, List, Optional, Tuple, Any
from pathlib import Path
import yaml

from ..core.models import ToolType
from .intents import Intent

logger = logging.getLogger(__name__)


class IntentPattern:
    """–ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–∞–º–µ—Ä–µ–Ω–∏—è"""
    
    def __init__(self, intent: Intent, patterns: List[str], confidence: float = 0.8):
        self.intent = intent
        self.patterns = [re.compile(p, re.IGNORECASE) for p in patterns]
        self.confidence = confidence


class IntentClassifier:
    """–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä –Ω–∞–º–µ—Ä–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    
    def __init__(self, config_path: Optional[str] = None):
        self.patterns: List[IntentPattern] = []
        self.tool_keywords: Dict[ToolType, List[str]] = {}
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–∑–æ–≤—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
        self._load_default_patterns()
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞
        if config_path:
            self.load_patterns_from_yaml(config_path)
        
        logger.info("üß† IntentClassifier –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def _load_default_patterns(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã"""
        # MCP –∫–æ–º–∞–Ω–¥—ã
        self.patterns.append(IntentPattern(
            Intent.MCP_COMMAND,
            [
                r"(–ø–æ–∫–∞–∂–∏|–ø–æ–∫–∞–∑–∞—Ç—å|—Å–ø–∏—Å–æ–∫|list|get|–ø–æ–ª—É—á–∏—Ç—å).*(–ø—Ä–∏–ª–æ–∂–µ–Ω|app|–±–∞–∑–∞|–±–∞–∑—ã|–¥–∞–Ω–Ω|database|db|–¥–µ–ø–ª–æ–π|deploy)",
                r"(–∫–∞–∫–∏–µ|—á—Ç–æ –∑–∞|–ø—Ä–æ–≤–µ—Ä—å).*(–ø—Ä–∏–ª–æ–∂–µ–Ω|app|–±–∞–∑–∞|–±–∞–∑—ã|–¥–∞–Ω–Ω|database|db|–¥–µ–ø–ª–æ–π|deploy)",
                r"(—Å—Ç–∞—Ç—É—Å|—Å–æ—Å—Ç–æ—è–Ω–∏–µ|status).*(–ø—Ä–∏–ª–æ–∂–µ–Ω|app|–±–∞–∑–∞|–±–∞–∑—ã|–¥–∞–Ω–Ω|database|db|–¥–µ–ø–ª–æ–π|deploy)",
                r"/mcp\s+\w+",
                r"/db\s+.+",
                r"–≤—ã–ø–æ–ª–Ω–∏.*(mcp|–∫–æ–º–∞–Ω–¥—É)"
            ],
            confidence=0.85
        ))
        
        # –ê–Ω–∞–ª–∏–∑ YouTube –≤–∏–¥–µ–æ
        self.patterns.append(IntentPattern(
            Intent.YOUTUBE_ANALYSIS,
            [
                r"youtube\.com/watch\?v=",
                r"youtu\.be/",
                r"(–ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π|–∞–Ω–∞–ª–∏–∑|–ø–æ—Å–º–æ—Ç—Ä–∏|–∏–∑—É—á–∏).*(youtube|—é—Ç—É–±|–≤–∏–¥–µ–æ)",
                r"(—Å—É–±—Ç–∏—Ç—Ä—ã|subtitles|—Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü).*(–≤–∏–¥–µ–æ|youtube)",
                r"(–ø–æ–ª—É—á–∏|–∏–∑–≤–ª–µ–∫–∏|–¥–æ—Å—Ç–∞–Ω—å).*(—Å—É–±—Ç–∏—Ç—Ä—ã|—Ç–µ–∫—Å—Ç).*(–≤–∏–¥–µ–æ|youtube)",
                r"(—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞|–ø—Ä–æ—Å–º–æ—Ç—Ä—ã|–ª–∞–π–∫–∏).*(–≤–∏–¥–µ–æ|youtube|—é—Ç—É–±)"
            ],
            confidence=0.85
        ))
        
        # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        self.tool_keywords = {
            ToolType.MCP: [
                "–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", "–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è", "app", "apps",
                "–±–∞–∑–∞", "–±–∞–∑—ã", "–¥–∞–Ω–Ω—ã—Ö", "database", "db",
                "–¥–µ–ø–ª–æ–π", "–¥–µ–ø–ª–æ–π–º–µ–Ω—Ç", "deploy", "deployment",
                "—Å–µ—Ä–≤–µ—Ä", "server", "–∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞"
            ],
            ToolType.YOUTUBE_ANALYZER: [
                "youtube", "—é—Ç—É–±", "–≤–∏–¥–µ–æ", "video",
                "—Å—É–±—Ç–∏—Ç—Ä—ã", "subtitles", "—Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è",
                "–ø—Ä–æ—Å–º–æ—Ç—Ä—ã", "views", "–ª–∞–π–∫–∏", "likes",
                "–∫–∞–Ω–∞–ª", "channel", "youtube.com", "youtu.be"
            ]
        }
    
    def load_patterns_from_yaml(self, config_path: str) -> bool:
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∏–∑ YAML —Ñ–∞–π–ª–∞
        
        Args:
            config_path: –ü—É—Ç—å –∫ YAML —Ñ–∞–π–ª—É
            
        Returns:
            True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ
        """
        try:
            with open(config_path, 'r', encoding='utf-8') as f:
                config = yaml.safe_load(f)
            
            patterns_config = config.get('intent_patterns', [])
            
            for pattern_config in patterns_config:
                intent = Intent(pattern_config['intent'])
                patterns = pattern_config['patterns']
                confidence = pattern_config.get('confidence', 0.8)
                
                self.patterns.append(IntentPattern(intent, patterns, confidence))
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
            keywords_config = config.get('tool_keywords', {})
            for tool_type_str, keywords in keywords_config.items():
                try:
                    tool_type = ToolType(tool_type_str)
                    if tool_type not in self.tool_keywords:
                        self.tool_keywords[tool_type] = []
                    self.tool_keywords[tool_type].extend(keywords)
                except ValueError:
                    logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {tool_type_str}")
            
            logger.info(f"üìö –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(patterns_config)} –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –∏–∑ {config_path}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –∏–∑ {config_path}: {e}")
            return False
    
    def classify(self, user_message: str) -> Tuple[Intent, float, Dict[str, Any]]:
        """
        –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç –Ω–∞–º–µ—Ä–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            user_message: –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            –ö–æ—Ä—Ç–µ–∂ (Intent, confidence, metadata)
        """
        user_message_lower = user_message.lower()
        best_intent = Intent.GENERAL_CHAT
        best_confidence = 0.0
        metadata = {}
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã
        for pattern_group in self.patterns:
            for pattern in pattern_group.patterns:
                if pattern.search(user_message):
                    if pattern_group.confidence > best_confidence:
                        best_intent = pattern_group.intent
                        best_confidence = pattern_group.confidence
                        break
        
        # –ï—Å–ª–∏ –Ω–∞–º–µ—Ä–µ–Ω–∏–µ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ —Ç–æ—á–Ω–æ, –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
        if best_confidence < 0.7:
            keyword_scores = self._analyze_keywords(user_message_lower)
            if keyword_scores:
                # –í—ã–±–∏—Ä–∞–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —Å –Ω–∞–∏–≤—ã—Å—à–∏–º —Å—á–µ—Ç–æ–º
                best_tool, score = max(keyword_scores.items(), key=lambda x: x[1])
                
                # –ú–∞–ø–∏–Ω–≥ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –Ω–∞ –Ω–∞–º–µ—Ä–µ–Ω–∏—è
                tool_to_intent = {
                    ToolType.MCP: Intent.MCP_COMMAND,
                    ToolType.YOUTUBE_ANALYZER: Intent.YOUTUBE_ANALYSIS
                }
                
                if score > 0.2:  # –°–Ω–∏–∑–∏–ª –ø–æ—Ä–æ–≥ –¥–ª—è –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
                    best_intent = tool_to_intent.get(best_tool, Intent.GENERAL_CHAT)
                    best_confidence = min(score * 1.5, 0.75)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º confidence
                    metadata['keyword_based'] = True
                    metadata['suggested_tool'] = best_tool
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ —É—Ç–æ—á–Ω–µ–Ω–∏–µ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –æ–±—ã—á–Ω—ã–π —á–∞—Ç)
        if best_intent != Intent.GENERAL_CHAT and self._needs_clarification(user_message, best_intent, best_confidence):
            metadata['original_intent'] = best_intent
            metadata['original_confidence'] = best_confidence
            best_intent = Intent.CLARIFICATION_NEEDED
            best_confidence = 0.9
        
        # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        metadata.update({
            'message_length': len(user_message),
            'has_url': bool(re.search(r'https?://\S+', user_message)),
            'has_command': user_message.startswith('/'),
            'detected_tools': self._detect_potential_tools(user_message_lower),
            'message_text': user_message  # –î–æ–±–∞–≤–ª—è–µ–º –¥–ª—è get_clarification_options
        })
        
        logger.info(f"üéØ –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–æ: {best_intent} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {best_confidence:.2f})")
        return best_intent, best_confidence, metadata
    
    def _analyze_keywords(self, message: str) -> Dict[ToolType, float]:
        """
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
        
        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å {ToolType: score}
        """
        scores = {}
        
        for tool_type, keywords in self.tool_keywords.items():
            score = 0.0
            matches = 0
            
            for keyword in keywords:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º word boundaries –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è
                if re.search(r'\b' + re.escape(keyword.lower()) + r'\b', message):
                    matches += 1
                    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤–µ—Å –¥–ª—è –±–æ–ª–µ–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
                    if len(keyword) > 5:
                        score += 0.3
                    else:
                        score += 0.15
            
            if matches > 0:
                # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º score –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
                scores[tool_type] = min(score, 1.0)
        
        return scores
    
    def _needs_clarification(self, message: str, intent: Intent, confidence: float) -> bool:
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ —É—Ç–æ—á–Ω–µ–Ω–∏–µ –Ω–∞–º–µ—Ä–µ–Ω–∏—è
        
        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            intent: –û–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –Ω–∞–º–µ—Ä–µ–Ω–∏–µ
            confidence: –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
            
        Returns:
            True –µ—Å–ª–∏ –Ω—É–∂–Ω–æ —É—Ç–æ—á–Ω–µ–Ω–∏–µ
        """
        # –ï—Å–ª–∏ —ç—Ç–æ —á–µ—Ç–∫–∞—è –∫–æ–º–∞–Ω–¥–∞, –Ω–µ –Ω—É–∂–Ω–æ —É—Ç–æ—á–Ω–µ–Ω–∏–µ
        if message.startswith('/'):
            return False
            
        # –û—á–µ–Ω—å –Ω–∏–∑–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å - –≤—Å–µ–≥–¥–∞ –Ω—É–∂–Ω–æ —É—Ç–æ—á–Ω–µ–Ω–∏–µ
        if confidence < 0.3:  # –°–Ω–∏–∑–∏–ª –ø–æ—Ä–æ–≥
            return True
        
        # –ù–µ–æ–¥–Ω–æ–∑–Ω–∞—á–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        ambiguous_patterns = [
            r"(–∏–ª–∏|–ª–∏–±–æ)",  # –£–±—Ä–∞–ª "–º–æ–∂–µ—Ç" –∏ "–≤–æ–∑–º–æ–∂–Ω–æ" - –æ–Ω–∏ —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤ –æ–±—ã—á–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞—Ö
            r"(–Ω–µ –∑–Ω–∞—é|–Ω–µ —É–≤–µ—Ä–µ–Ω)",
            r"\?.*\?"  # –ù–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤
        ]
        
        for pattern in ambiguous_patterns:
            if re.search(pattern, message, re.IGNORECASE):
                return True
        
        # –î–ª—è YouTube –∞–Ω–∞–ª–∏–∑–∞ - –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å—Å—ã–ª–∫–∏
        if intent == Intent.YOUTUBE_ANALYSIS and not re.search(r'https?://\S+', message):
            return True
        
        return False
    
    def _detect_potential_tools(self, message: str) -> List[ToolType]:
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
        
        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ
            
        Returns:
            –°–ø–∏—Å–æ–∫ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        """
        tools = []
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
        keyword_scores = self._analyze_keywords(message)
        
        # –í—ã–±–∏—Ä–∞–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —Å score > 0.3
        for tool_type, score in keyword_scores.items():
            if score > 0.3:
                tools.append(tool_type)
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
        tools.sort(key=lambda t: keyword_scores.get(t, 0), reverse=True)
        
        return tools
    
    def get_clarification_options(self, metadata: Dict[str, Any]) -> List[Dict[str, Any]]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –Ω–∞–º–µ—Ä–µ–Ω–∏—è
        
        Args:
            metadata: –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
            
        Returns:
            –°–ø–∏—Å–æ–∫ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        options = []
        detected_tools = metadata.get('detected_tools', [])
        
        # –ú–∞–ø–∏–Ω–≥ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –Ω–∞ –æ–ø–∏—Å–∞–Ω–∏—è
        tool_descriptions = {
            ToolType.MCP: {
                'name': '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π',
                'description': '–ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π, –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö, –¥–µ–ø–ª–æ–π–º–µ–Ω—Ç–æ–≤',
                'icon': 'üîß'
            },
            ToolType.YOUTUBE_ANALYZER: {
                'name': '–ê–Ω–∞–ª–∏–∑ YouTube –≤–∏–¥–µ–æ',
                'description': '–ê–Ω–∞–ª–∏–∑ YouTube –≤–∏–¥–µ–æ, –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—É–±—Ç–∏—Ç—Ä–æ–≤ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏',
                'icon': 'üé•'
            }
        }
        
        # –ï—Å–ª–∏ –Ω–µ—Ç detected_tools, –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
        if not detected_tools:
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
            keyword_scores = self._analyze_keywords(metadata.get('message_text', '').lower())
            if keyword_scores:
                # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ score –∏ –±–µ—Ä–µ–º —Ç–æ–ø 3
                sorted_tools = sorted(keyword_scores.items(), key=lambda x: x[1], reverse=True)
                detected_tools = [tool for tool, score in sorted_tools[:3] if score > 0.1]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        for tool in detected_tools[:3]:  # –ú–∞–∫—Å–∏–º—É–º 3 –≤–∞—Ä–∏–∞–Ω—Ç–∞
            if tool in tool_descriptions:
                desc = tool_descriptions[tool]
                options.append({
                    'tool': tool,
                    'name': desc['name'],
                    'description': desc['description'],
                    'icon': desc['icon']
                })
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏—é "–ø—Ä–æ—Å—Ç–æ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å" –µ—Å–ª–∏ –µ—Å—Ç—å –¥—Ä—É–≥–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
        if options:
            options.append({
                'tool': None,
                'name': '–û–±—ã—á–Ω—ã–π —Ä–∞–∑–≥–æ–≤–æ—Ä',
                'description': '–ü—Ä–æ—Å—Ç–æ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å –±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤',
                'icon': 'üí¨'
            })
        
        return options