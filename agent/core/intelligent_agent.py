"""
–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π Intelligent Agent —Å –ø—Ä—è–º—ã–º LLM-–∞–Ω–∞–ª–∏–∑–æ–º –Ω–∞–º–µ—Ä–µ–Ω–∏–π
"""
import json
import logging
from typing import List, Dict, Any, Optional, TYPE_CHECKING
from openai import AsyncOpenAI
from datetime import datetime

from .models import (
    AgentResponse, ToolResponse, BaseToolParams,
    EchoToolParams, ImageGenerationParams,
    YouTubeAnalysisParams, ToolType
)
from .intents import Intent

if TYPE_CHECKING:
    from ..tools.base import BaseTool

logger = logging.getLogger(__name__)


class IntelligentAgent:
    """–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –∞–≥–µ–Ω—Ç —Å –ø—Ä—è–º—ã–º LLM-–∞–Ω–∞–ª–∏–∑–æ–º"""
    
    def __init__(self, api_key: str, model: str = "gpt-4o"):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–∞
        
        Args:
            api_key: OpenAI API –∫–ª—é—á
            model: –ú–æ–¥–µ–ª—å –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é gpt-4o)
        """
        self.client = AsyncOpenAI(api_key=api_key)
        self.model = model
        self.conversation_history = []
        
        self.logger = logger
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Claude Code Service –¥–ª—è –ø—Ä—è–º—ã—Ö –≤—ã–∑–æ–≤–æ–≤
        self._init_claude_code_service()
        
        # –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        self.available_functions = self._get_available_functions()
        
        logger.info(f"‚úÖ –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π IntelligentAgent –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –º–æ–¥–µ–ª—å—é {model}")
    
    def _init_claude_code_service(self) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç Claude Code Service –¥–ª—è –ø—Ä—è–º—ã—Ö –≤—ã–∑–æ–≤–æ–≤"""
        try:
            from bot.services.claude_code_service import claude_code_service
            self.claude_code_service = claude_code_service
            logger.info("‚úÖ Claude Code Service –ø–æ–¥–∫–ª—é—á–µ–Ω –Ω–∞–ø—Ä—è–º—É—é")
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å Claude Code Service: {e}")
            self.claude_code_service = None
    
    def _get_available_functions(self) -> List[Dict[str, Any]]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è OpenAI"""
        return [
            {
                "type": "function",
                "function": {
                    "name": "echo_tool",
                    "description": "–ü—Ä–æ—Å—Ç–æ–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–π –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç—Ö–æ —Å–æ–æ–±—â–µ–Ω–∏—è",
                    "parameters": {
                        "type": "object",
                        "properties": {
                            "message": {
                                "type": "string",
                                "description": "–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —ç—Ö–æ-–æ—Ç–≤–µ—Ç–∞"
                            },
                            "uppercase": {
                                "type": "boolean",
                                "description": "–í–µ—Ä–Ω—É—Ç—å –≤ –≤–µ—Ä—Ö–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ",
                                "default": False
                            },
                            "user_id": {
                                "type": "string",
                                "description": "ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
                            }
                        },
                        "required": ["message", "user_id"]
                    }
                }
            },
            {
                "type": "function",
                "function": {
                    "name": "claude_code_direct",
                    "description": "–ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤ Claude Code Service –¥–ª—è MCP –∫–æ–º–∞–Ω–¥ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π",
                    "parameters": {
                        "type": "object",
                        "properties": {
                            "message": {
                                "type": "string",
                                "description": "–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è Claude Code Service (–Ω–∞ —Ä—É—Å—Å–∫–æ–º –∏–ª–∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º)"
                            },
                            "user_id": {
                                "type": "string",
                                "description": "ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
                            }
                        },
                        "required": ["message", "user_id"]
                    }
                }
            },
            {
                "type": "function",
                "function": {
                    "name": "generate_image",
                    "description": "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É –æ–ø–∏—Å–∞–Ω–∏—é",
                    "parameters": {
                        "type": "object",
                        "properties": {
                            "prompt": {
                                "type": "string",
                                "description": "–î–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º"
                            },
                            "style": {
                                "type": "string",
                                "description": "–°—Ç–∏–ª—å: realistic, cartoon, abstract, oil-painting, watercolor",
                                "default": "realistic"
                            },
                            "size": {
                                "type": "string",
                                "description": "–†–∞–∑–º–µ—Ä: 1024x1024, 1792x1024, 1024x1792",
                                "default": "1024x1024"
                            },
                            "quality": {
                                "type": "string",
                                "description": "–ö–∞—á–µ—Å—Ç–≤–æ: standard –∏–ª–∏ hd",
                                "default": "standard"
                            },
                            "user_id": {
                                "type": "string",
                                "description": "ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
                            }
                        },
                        "required": ["prompt", "user_id"]
                    }
                }
            },
            {
                "type": "function",
                "function": {
                    "name": "analyze_youtube_video",
                    "description": "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å YouTube –≤–∏–¥–µ–æ, –ø–æ–ª—É—á–∏—Ç—å —Å—É–±—Ç–∏—Ç—Ä—ã –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É",
                    "parameters": {
                        "type": "object",
                        "properties": {
                            "url": {
                                "type": "string",
                                "description": "URL YouTube –≤–∏–¥–µ–æ"
                            },
                            "extract_subtitles": {
                                "type": "boolean",
                                "description": "–ò–∑–≤–ª–µ—á—å —Å—É–±—Ç–∏—Ç—Ä—ã –≤–∏–¥–µ–æ",
                                "default": True
                            },
                            "subtitle_language": {
                                "type": "string",
                                "description": "–Ø–∑—ã–∫ —Å—É–±—Ç–∏—Ç—Ä–æ–≤ (ru, en, auto)",
                                "default": "ru"
                            },
                            "include_metadata": {
                                "type": "boolean",
                                "description": "–í–∫–ª—é—á–∏—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –≤–∏–¥–µ–æ",
                                "default": True
                            },
                            "user_id": {
                                "type": "string",
                                "description": "ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
                            }
                        },
                        "required": ["url", "user_id"]
                    }
                }
            }
        ]
    
    async def process_message(
        self, 
        message: str, 
        user_id: str,
        context: Optional[List[Dict[str, str]]] = None
    ) -> AgentResponse:
        """
        –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä—è–º—ã–º LLM-–∞–Ω–∞–ª–∏–∑–æ–º
        
        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            
        Returns:
            AgentResponse —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏
        """
        try:
            logger.info(f"ü§ñ –ü—Ä–æ—Å—Ç–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: '{message[:50]}...' –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
            # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π - LLM —Å–∞–º –≤—ã–±–µ—Ä–µ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
            messages = self._prepare_simple_messages(message, context)
            
            # –í—ã–∑—ã–≤–∞–µ–º OpenAI —Å function calling
            response = await self.client.chat.completions.create(
                model=self.model,
                messages=messages,
                tools=self.available_functions,
                tool_choice="auto"
            )
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç
            assistant_message = response.choices[0].message
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –≤—ã–∑–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é
            if assistant_message.tool_calls:
                logger.info(f"üîß LLM –≤—ã–±—Ä–∞–ª –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: {assistant_message.tool_calls[0].function.name}")
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–∑–æ–≤—ã —Ñ—É–Ω–∫—Ü–∏–π
                tool_response = await self._handle_tool_calls(
                    assistant_message.tool_calls,
                    user_id
                )
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
                tool_type = self._get_tool_type_from_call(assistant_message.tool_calls[0])
                
                # –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Ñ—É–Ω–∫—Ü–∏–π
                final_response = await self._get_final_response(
                    messages,
                    assistant_message,
                    tool_response
                )
                
                return AgentResponse(
                    message=final_response,
                    tool_used=tool_response.metadata.get("tool_type") if tool_response.metadata else None,
                    tool_response=tool_response,
                    confidence=0.9,  # –í—ã—Å–æ–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å - LLM —Å–∞–º –≤—ã–±—Ä–∞–ª –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
                    requires_confirmation=False
                )
            else:
                # –û–±—ã—á–Ω—ã–π –æ—Ç–≤–µ—Ç –±–µ–∑ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
                logger.info("üí¨ LLM –≤—ã–±—Ä–∞–ª –æ–±—ã—á–Ω—ã–π —Ä–∞–∑–≥–æ–≤–æ—Ä")
                return AgentResponse(
                    message=assistant_message.content or "–ù–µ –º–æ–≥—É —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç",
                    confidence=0.8,
                    requires_confirmation=False
                )
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}", exc_info=True)
            return AgentResponse(
                message=f"–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}",
                confidence=0.0,
                requires_confirmation=False,
                tool_response=ToolResponse(success=False, error=str(e))
            )
    
    def _prepare_simple_messages(
        self, 
        message: str, 
        context: Optional[List[Dict[str, str]]] = None
    ) -> List[Dict[str, str]]:
        """–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ø—Ä—è–º—ã–º–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏ –¥–ª—è LLM"""
        system_prompt = """–¢—ã - —É–º–Ω—ã–π AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ê—Ä—Ç—ë–º –ò–Ω—Ç–µ–≥—Ä–∞—Ç–æ—Ä —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º.

üéØ –¢–í–û–Ø –ó–ê–î–ê–ß–ê: –ü–æ–Ω—è—Ç—å, —á—Ç–æ —Ö–æ—á–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∏ –≤—ã–±—Ä–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç:

üìä **MCP –ö–û–ú–ê–ù–î–´** (claude_code_direct) - –∏—Å–ø–æ–ª—å–∑—É–π –¥–ª—è:
- "–ø–æ–∫–∞–∂–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è", "–º–æ–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è", "—Å–ø–∏—Å–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π"
- "–∫–∞–∫–∏–µ —É –º–µ–Ω—è MCP —Å–µ—Ä–≤–µ—Ä–∞", "—Å–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤", "mcp —Å–µ—Ä–≤–µ—Ä–∞"
- "–∫–∞–∫–∏–µ —É –º–µ–Ω—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö", "–±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö", "–ë–î"
- "–¥–µ–ø–ª–æ–π–º–µ–Ω—Ç—ã", "–∏—Å—Ç–æ—Ä–∏—è –¥–µ–ø–ª–æ–µ–≤", "—Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è"
- –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã –ø—Ä–æ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—É DigitalOcean/Supabase

üé• **YOUTUBE –ê–ù–ê–õ–ò–ó** (analyze_youtube_video) - –∏—Å–ø–æ–ª—å–∑—É–π –¥–ª—è:
- —Å—Å—ã–ª–æ–∫ –Ω–∞ YouTube –≤–∏–¥–µ–æ
- "–∞–Ω–∞–ª–∏–∑ –≤–∏–¥–µ–æ", "—Å—É–±—Ç–∏—Ç—Ä—ã", "—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∏–¥–µ–æ"

üñºÔ∏è **–ì–ï–ù–ï–†–ê–¶–ò–Ø –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô** (generate_image) - –∏—Å–ø–æ–ª—å–∑—É–π –¥–ª—è:
- "–Ω–∞—Ä–∏—Å—É–π", "—Å–æ–∑–¥–∞–π –∫–∞—Ä—Ç–∏–Ω–∫—É", "—Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"

üí¨ **–û–ë–´–ß–ù–´–ô –†–ê–ó–ì–û–í–û–†** - –¥–ª—è –≤—Å–µ–≥–æ –æ—Å—Ç–∞–ª—å–Ω–æ–≥–æ:
- –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è, –æ–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã, –ø–æ–º–æ—â—å

üöÄ **–ö–õ–Æ–ß–ï–í–û–ï –ü–†–ê–í–ò–õ–û**: –ù–µ –¥—É–º–∞–π –æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞—Ö - –ø—Ä–æ—Å—Ç–æ –ø–æ–π–º–∏ –Ω–∞–º–µ—Ä–µ–Ω–∏–µ –∏ –¥–µ–π—Å—Ç–≤—É–π!

–ü—Ä–∏–º–µ—Ä—ã:
- "–∫–∞–∫–∏–µ —É –º–µ–Ω—è –µ—Å—Ç—å MCP —Å–µ—Ä–≤–µ—Ä–∞?" ‚Üí claude_code_direct
- "–∫–∞–∫–∏–µ —É –º–µ–Ω—è MCP —Å–µ—Ä–≤–µ—Ä–∞" ‚Üí claude_code_direct
- "–ø–æ–∫–∞–∂–∏ –º–æ–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è" ‚Üí claude_code_direct
- "—Å–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤" ‚Üí claude_code_direct  
- "–∫–∞–∫ –¥–µ–ª–∞?" ‚Üí –æ–±—ã—á–Ω—ã–π —Ä–∞–∑–≥–æ–≤–æ—Ä
- "–Ω–∞—Ä–∏—Å—É–π –∫–æ—Ç–∞" ‚Üí generate_image

–ë—É–¥—å –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º –∏ –ø–æ–ª–µ–∑–Ω—ã–º! ü§ñ"""
        
        messages = [{"role": "system", "content": system_prompt}]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –µ—Å–ª–∏ –µ—Å—Ç—å
        if context:
            for ctx_msg in context[-5:]:  # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–æ–æ–±—â–µ–Ω–∏–π
                messages.append(ctx_msg)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        messages.append({"role": "user", "content": message})
        
        return messages
    
    def _prepare_messages(
        self, 
        message: str, 
        context: Optional[List[Dict[str, str]]] = None
    ) -> List[Dict[str, str]]:
        """–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è API"""
        system_prompt = """–¢—ã - —É–º–Ω—ã–π AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ —Ä–∞–∑–ª–∏—á–Ω—ã–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º.

–ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –∑–∞–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∏—Å–ø–æ–ª—å–∑—É–π –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã:
- –î–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ –æ–± –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–µ (–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, —Å–µ—Ä–≤–µ—Ä—ã) - –∏—Å–ø–æ–ª—å–∑—É–π execute_mcp_command
- –î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π - –∏—Å–ø–æ–ª—å–∑—É–π generate_image
- –î–ª—è –∞–Ω–∞–ª–∏–∑–∞ YouTube –≤–∏–¥–µ–æ - –∏—Å–ø–æ–ª—å–∑—É–π analyze_youtube_video
- –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è - –∏—Å–ø–æ–ª—å–∑—É–π echo_tool

–í–ê–ñ–ù–û: –ö–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞—Ö, MCP –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞—Ö –∏–ª–∏ —á—Ç–æ —Ç—ã —É–º–µ–µ—à—å –¥–µ–ª–∞—Ç—å, 
–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –∏—Å–ø–æ–ª—å–∑—É–π execute_mcp_command —Å –∫–æ–º–∞–Ω–¥–æ–π "help" –∏–ª–∏ "list tools" –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π.
–ù–ï –æ—Ç–≤–µ—á–∞–π –ø—Ä–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –±–µ–∑ –∏—Ö –≤—ã–∑–æ–≤–∞!

–û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ —Å—É—â–µ—Å—Ç–≤—É."""
        
        messages = [{"role": "system", "content": system_prompt}]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –µ—Å–ª–∏ –µ—Å—Ç—å
        if context:
            messages.extend(context)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        messages.append({"role": "user", "content": message})
        
        return messages
    
    async def _handle_tool_calls(
        self, 
        tool_calls, 
        user_id: str
    ) -> ToolResponse:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–∑–æ–≤—ã –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
        # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π –≤—ã–∑–æ–≤
        tool_call = tool_calls[0]
        function_name = tool_call.function.name
        function_args = json.loads(tool_call.function.arguments)
        
        # –î–æ–±–∞–≤–ª—è–µ–º user_id –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if "user_id" not in function_args:
            function_args["user_id"] = user_id
        
        logger.info(f"üîß –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏: {function_name} —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: {function_args}")
        
        # –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è Claude Code –∫–æ–º–∞–Ω–¥
        if function_name == "claude_code_direct":
            logger.info(f"üîå Claude Code –ø—Ä—è–º–æ–π –≤—ã–∑–æ–≤: {function_args.get('message')}")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é
        if function_name == "echo_tool":
            return await self._execute_echo_tool(EchoToolParams(**function_args))
        elif function_name == "claude_code_direct":
            return await self._execute_claude_code_direct(function_args)
        elif function_name == "generate_image":
            return await self._execute_image_generation(ImageGenerationParams(**function_args))
        elif function_name == "analyze_youtube_video":
            return await self._execute_youtube_analysis(YouTubeAnalysisParams(**function_args))
        else:
            return ToolResponse(
                success=False,
                error=f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: {function_name}"
            )
    
    async def _execute_echo_tool(self, params: EchoToolParams) -> ToolResponse:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç echo –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)"""
        try:
            result = params.message
            if params.uppercase:
                result = result.upper()
            
            return ToolResponse(
                success=True,
                data={"echo": result, "original": params.message},
                metadata={"tool_type": ToolType.ECHO}
            )
        except Exception as e:
            return ToolResponse(success=False, error=str(e))
    
    async def _execute_claude_code_direct(self, function_args: Dict[str, Any]) -> ToolResponse:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –ø—Ä—è–º–æ–π –≤—ã–∑–æ–≤ Claude Code Service"""
        try:
            message = function_args.get("message")
            user_id = function_args.get("user_id")
            
            logger.info(f"üîå –ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤ Claude Code Service: {message}")
            
            if self.claude_code_service:
                # –ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤ Claude Code Service
                result = await self.claude_code_service.execute_mcp_command(message, user_id)
                
                if result.get("success"):
                    return ToolResponse(
                        success=True,
                        data={
                            "message": message,
                            "response": result.get("response", "–ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞"),
                            "mcp_response": result.get("data") or result.get("mcp_response")
                        },
                        metadata={"tool_type": ToolType.MCP}
                    )
                else:
                    return ToolResponse(
                        success=False,
                        error=result.get("error", "–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è Claude Code Service"),
                        metadata={"tool_type": ToolType.MCP}
                    )
            else:
                # Fallback –µ—Å–ª–∏ —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
                return ToolResponse(
                    success=False,
                    error="Claude Code Service –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω",
                    metadata={"tool_type": ToolType.MCP}
                )
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä—è–º–æ–≥–æ –≤—ã–∑–æ–≤–∞ Claude Code Service: {e}", exc_info=True)
            return ToolResponse(
                success=False,
                error=f"–û—à–∏–±–∫–∞: {str(e)}",
                metadata={"tool_type": ToolType.MCP}
            )
    
    async def _execute_image_generation(self, params: ImageGenerationParams) -> ToolResponse:
        """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
        # TODO: –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å —Å DALL-E
        return ToolResponse(
            success=True,
            data={
                "message": f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ '{params.prompt}' –±—É–¥–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ",
                "style": params.style,
                "size": params.size
            },
            metadata={"tool_type": ToolType.IMAGE_GENERATOR}
        )
    
    async def _execute_youtube_analysis(self, params: YouTubeAnalysisParams) -> ToolResponse:
        """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ YouTube –≤–∏–¥–µ–æ"""
        # TODO: –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å —Å YouTube API
        return ToolResponse(
            success=True,
            data={
                "message": f"–ê–Ω–∞–ª–∏–∑ YouTube –≤–∏–¥–µ–æ {params.url} –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω",
                "video_url": params.url,
                "extract_subtitles": params.extract_subtitles
            },
            metadata={"tool_type": ToolType.YOUTUBE_ANALYZER}
        )
    
    async def _get_final_response(
        self,
        messages: List[Dict[str, str]],
        assistant_message,
        tool_response: ToolResponse
    ) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞"""
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ —Å tool_calls
        messages.append({
            "role": "assistant",
            "content": assistant_message.content or "",
            "tool_calls": assistant_message.tool_calls
        })
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏
        tool_call = assistant_message.tool_calls[0]
        messages.append({
            "role": "tool",
            "content": json.dumps(tool_response.dict(), ensure_ascii=False),
            "tool_call_id": tool_call.id
        })
        
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
        final_response = await self.client.chat.completions.create(
            model=self.model,
            messages=messages
        )
        
        return final_response.choices[0].message.content or "–û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞"
    
    def _get_available_tool_types(self, intent: Intent) -> List[ToolType]:
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –Ω–∞–º–µ—Ä–µ–Ω–∏—è"""
        # –ú–∞–ø–∏–Ω–≥ –Ω–∞–º–µ—Ä–µ–Ω–∏–π –Ω–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
        intent_to_tools = {
            Intent.MCP_COMMAND: [ToolType.MCP],
            Intent.IMAGE_GENERATION: [ToolType.IMAGE_GENERATOR],
            Intent.YOUTUBE_ANALYSIS: [ToolType.YOUTUBE_ANALYZER],
            Intent.GENERAL_QUESTION: [ToolType.ECHO],
            Intent.GENERAL_CHAT: [ToolType.ECHO],
            Intent.UNKNOWN: [ToolType.ECHO, ToolType.MCP]
        }
        
        return intent_to_tools.get(intent, [ToolType.ECHO])
    
    def _prepare_messages_with_preferences(
        self,
        message: str,
        context: Optional[List[Dict[str, str]]],
        intent: Intent,
        preferred_tool: Optional[tuple[ToolType, float]]
    ) -> List[Dict[str, str]]:
        """–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å —É—á–µ—Ç–æ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π"""
        system_prompt = """–¢—ã - —É–º–Ω—ã–π AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ —Ä–∞–∑–ª–∏—á–Ω—ã–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º.

–ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –∑–∞–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∏—Å–ø–æ–ª—å–∑—É–π –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã:
- –î–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ –æ–± –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–µ (–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, —Å–µ—Ä–≤–µ—Ä—ã) - –∏—Å–ø–æ–ª—å–∑—É–π execute_mcp_command
- –î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π - –∏—Å–ø–æ–ª—å–∑—É–π generate_image
- –î–ª—è –∞–Ω–∞–ª–∏–∑–∞ YouTube –≤–∏–¥–µ–æ - –∏—Å–ø–æ–ª—å–∑—É–π analyze_youtube_video
- –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è - –∏—Å–ø–æ–ª—å–∑—É–π echo_tool

–û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ —Å—É—â–µ—Å—Ç–≤—É."""
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è—Ö –µ—Å–ª–∏ –µ—Å—Ç—å
        if preferred_tool:
            tool_type, confidence = preferred_tool
            tool_hints = {
                ToolType.MCP: "execute_mcp_command",
                ToolType.IMAGE_GENERATOR: "generate_image",
                ToolType.YOUTUBE_ANALYZER: "analyze_youtube_video",
                ToolType.ECHO: "echo_tool"
            }
            
            if tool_type in tool_hints:
                system_prompt += f"\n\n–í–ê–ñ–ù–û: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å {tool_hints[tool_type]} –¥–ª—è –ø–æ–¥–æ–±–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.0%})."
        
        messages = [{"role": "system", "content": system_prompt}]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –µ—Å–ª–∏ –µ—Å—Ç—å
        if context:
            messages.extend(context)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        messages.append({"role": "user", "content": message})
        
        return messages
    
    def _get_tool_type_from_call(self, tool_call) -> Optional[ToolType]:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –ø–æ –≤—ã–∑–æ–≤—É —Ñ—É–Ω–∫—Ü–∏–∏"""
        function_name = tool_call.function.name
        
        # –ú–∞–ø–∏–Ω–≥ –∏–º–µ–Ω —Ñ—É–Ω–∫—Ü–∏–π –Ω–∞ —Ç–∏–ø—ã
        function_to_type = {
            "echo_tool": ToolType.ECHO,
            "execute_mcp_command": ToolType.MCP,
            "generate_image": ToolType.IMAGE_GENERATOR,
            "analyze_youtube_video": ToolType.YOUTUBE_ANALYZER
        }
        
        return function_to_type.get(function_name)