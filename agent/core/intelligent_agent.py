"""
–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å Intelligent Agent —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π OpenAI Function Calling
"""
import json
import logging
from typing import List, Dict, Any, Optional, TYPE_CHECKING
from openai import AsyncOpenAI
from datetime import datetime

from .models import (
    AgentResponse, ToolResponse, BaseToolParams,
    EchoToolParams, MCPCommandParams, ImageGenerationParams,
    YouTubeAnalysisParams, ToolType
)
from .intents import Intent
from .preference_manager import preference_manager
from .intent_classifier import IntentClassifier
from .tool_registry import ToolRegistry

if TYPE_CHECKING:
    from ..tools.base import BaseTool

logger = logging.getLogger(__name__)


class IntelligentAgent:
    """–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –∞–≥–µ–Ω—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Function Calling"""
    
    def __init__(self, api_key: str, model: str = "gpt-4o"):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–∞
        
        Args:
            api_key: OpenAI API –∫–ª—é—á
            model: –ú–æ–¥–µ–ª—å –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é gpt-4o)
        """
        self.client = AsyncOpenAI(api_key=api_key)
        self.model = model
        self.conversation_history = []
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        self.intent_classifier = IntentClassifier()
        self.tool_registry = ToolRegistry()
        self.preference_manager = preference_manager
        self.logger = logger
        
        # –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        self.available_functions = self._get_available_functions()
        
        logger.info(f"‚úÖ IntelligentAgent –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –º–æ–¥–µ–ª—å—é {model}")
    
    def _get_available_functions(self) -> List[Dict[str, Any]]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è OpenAI"""
        return [
            {
                "type": "function",
                "function": {
                    "name": "echo_tool",
                    "description": "–ü—Ä–æ—Å—Ç–æ–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–π –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç—Ö–æ —Å–æ–æ–±—â–µ–Ω–∏—è",
                    "parameters": {
                        "type": "object",
                        "properties": {
                            "message": {
                                "type": "string",
                                "description": "–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —ç—Ö–æ-–æ—Ç–≤–µ—Ç–∞"
                            },
                            "uppercase": {
                                "type": "boolean",
                                "description": "–í–µ—Ä–Ω—É—Ç—å –≤ –≤–µ—Ä—Ö–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ",
                                "default": False
                            },
                            "user_id": {
                                "type": "string",
                                "description": "ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
                            }
                        },
                        "required": ["message", "user_id"]
                    }
                }
            },
            {
                "type": "function",
                "function": {
                    "name": "execute_mcp_command",
                    "description": "–í—ã–ø–æ–ª–Ω–∏—Ç—å MCP –∫–æ–º–∞–Ω–¥—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π (–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, —Å–µ—Ä–≤–µ—Ä—ã)",
                    "parameters": {
                        "type": "object",
                        "properties": {
                            "command": {
                                "type": "string",
                                "description": "MCP –∫–æ–º–∞–Ω–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 'list apps', 'show databases', 'get deployments')"
                            },
                            "user_id": {
                                "type": "string",
                                "description": "ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
                            },
                            "filters": {
                                "type": "object",
                                "description": "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã",
                                "default": {}
                            }
                        },
                        "required": ["command", "user_id"]
                    }
                }
            },
            {
                "type": "function",
                "function": {
                    "name": "generate_image",
                    "description": "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É –æ–ø–∏—Å–∞–Ω–∏—é",
                    "parameters": {
                        "type": "object",
                        "properties": {
                            "prompt": {
                                "type": "string",
                                "description": "–î–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º"
                            },
                            "style": {
                                "type": "string",
                                "description": "–°—Ç–∏–ª—å: realistic, cartoon, abstract, oil-painting, watercolor",
                                "default": "realistic"
                            },
                            "size": {
                                "type": "string",
                                "description": "–†–∞–∑–º–µ—Ä: 1024x1024, 1792x1024, 1024x1792",
                                "default": "1024x1024"
                            },
                            "quality": {
                                "type": "string",
                                "description": "–ö–∞—á–µ—Å—Ç–≤–æ: standard –∏–ª–∏ hd",
                                "default": "standard"
                            },
                            "user_id": {
                                "type": "string",
                                "description": "ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
                            }
                        },
                        "required": ["prompt", "user_id"]
                    }
                }
            },
            {
                "type": "function",
                "function": {
                    "name": "analyze_youtube_video",
                    "description": "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å YouTube –≤–∏–¥–µ–æ, –ø–æ–ª—É—á–∏—Ç—å —Å—É–±—Ç–∏—Ç—Ä—ã –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É",
                    "parameters": {
                        "type": "object",
                        "properties": {
                            "url": {
                                "type": "string",
                                "description": "URL YouTube –≤–∏–¥–µ–æ"
                            },
                            "extract_subtitles": {
                                "type": "boolean",
                                "description": "–ò–∑–≤–ª–µ—á—å —Å—É–±—Ç–∏—Ç—Ä—ã –≤–∏–¥–µ–æ",
                                "default": True
                            },
                            "subtitle_language": {
                                "type": "string",
                                "description": "–Ø–∑—ã–∫ —Å—É–±—Ç–∏—Ç—Ä–æ–≤ (ru, en, auto)",
                                "default": "ru"
                            },
                            "include_metadata": {
                                "type": "boolean",
                                "description": "–í–∫–ª—é—á–∏—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –≤–∏–¥–µ–æ",
                                "default": True
                            },
                            "user_id": {
                                "type": "string",
                                "description": "ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
                            }
                        },
                        "required": ["url", "user_id"]
                    }
                }
            }
        ]
    
    async def process_message(
        self, 
        message: str, 
        user_id: str,
        context: Optional[List[Dict[str, str]]] = None
    ) -> AgentResponse:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            
        Returns:
            AgentResponse —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏
        """
        try:
            # –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –Ω–∞–º–µ—Ä–µ–Ω–∏–µ
            intent, confidence, metadata = self.intent_classifier.classify(message)
            logger.info(f"üéØ –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞–º–µ—Ä–µ–Ω–∏–µ: {intent.value} (confidence: {confidence:.2f})")
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ –æ–± –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞—Ö
            message_lower = message.lower()
            if any(word in message_lower for word in ["–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç", "tool", "mcp", "—É–º–µ–µ—à—å", "–º–æ–∂–µ—à—å"]):
                logger.info(f"üìù –û–±–Ω–∞—Ä—É–∂–µ–Ω –≤–æ–ø—Ä–æ—Å –æ–± –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞—Ö/–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            available_tools = self._get_available_tool_types(intent)
            preferred_tool = self.preference_manager.get_preferred_tool(
                user_id, intent, available_tools
            )
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å —É—á–µ—Ç–æ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π
            messages = self._prepare_messages_with_preferences(
                message, context, intent, preferred_tool
            )
            
            # –í—ã–∑—ã–≤–∞–µ–º OpenAI —Å function calling
            response = await self.client.chat.completions.create(
                model=self.model,
                messages=messages,
                tools=self.available_functions,
                tool_choice="auto"
            )
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç
            assistant_message = response.choices[0].message
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –≤—ã–∑–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é
            if assistant_message.tool_calls:
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–∑–æ–≤—ã —Ñ—É–Ω–∫—Ü–∏–π
                tool_response = await self._handle_tool_calls(
                    assistant_message.tool_calls,
                    user_id
                )
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
                tool_type = self._get_tool_type_from_call(assistant_message.tool_calls[0])
                
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
                if tool_type:
                    self.preference_manager.record_choice(
                        user_id=user_id,
                        message=message,
                        intent=intent,
                        tool_type=tool_type,
                        success=tool_response.success,
                        tool_params=tool_response.data
                    )
                
                # –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Ñ—É–Ω–∫—Ü–∏–π
                final_response = await self._get_final_response(
                    messages,
                    assistant_message,
                    tool_response
                )
                
                return AgentResponse(
                    message=final_response,
                    tool_used=tool_response.metadata.get("tool_type") if tool_response.metadata else None,
                    tool_response=tool_response,
                    confidence=confidence,
                    requires_confirmation=False,
                    intent=intent
                )
            else:
                # –û–±—ã—á–Ω—ã–π –æ—Ç–≤–µ—Ç –±–µ–∑ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
                return AgentResponse(
                    message=assistant_message.content or "–ù–µ –º–æ–≥—É —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç",
                    confidence=confidence,
                    requires_confirmation=False,
                    intent=intent
                )
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}", exc_info=True)
            return AgentResponse(
                message=f"–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}",
                confidence=0.0,
                requires_confirmation=False,
                tool_response=ToolResponse(success=False, error=str(e))
            )
    
    def _prepare_messages(
        self, 
        message: str, 
        context: Optional[List[Dict[str, str]]] = None
    ) -> List[Dict[str, str]]:
        """–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è API"""
        system_prompt = """–¢—ã - —É–º–Ω—ã–π AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ —Ä–∞–∑–ª–∏—á–Ω—ã–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º.

–ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –∑–∞–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∏—Å–ø–æ–ª—å–∑—É–π –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã:
- –î–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ –æ–± –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–µ (–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, —Å–µ—Ä–≤–µ—Ä—ã) - –∏—Å–ø–æ–ª—å–∑—É–π execute_mcp_command
- –î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π - –∏—Å–ø–æ–ª—å–∑—É–π generate_image
- –î–ª—è –∞–Ω–∞–ª–∏–∑–∞ YouTube –≤–∏–¥–µ–æ - –∏—Å–ø–æ–ª—å–∑—É–π analyze_youtube_video
- –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è - –∏—Å–ø–æ–ª—å–∑—É–π echo_tool

–í–ê–ñ–ù–û: –ö–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞—Ö, MCP –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞—Ö –∏–ª–∏ —á—Ç–æ —Ç—ã —É–º–µ–µ—à—å –¥–µ–ª–∞—Ç—å, 
–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –∏—Å–ø–æ–ª—å–∑—É–π execute_mcp_command —Å –∫–æ–º–∞–Ω–¥–æ–π "help" –∏–ª–∏ "list tools" –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π.
–ù–ï –æ—Ç–≤–µ—á–∞–π –ø—Ä–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –±–µ–∑ –∏—Ö –≤—ã–∑–æ–≤–∞!

–û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ —Å—É—â–µ—Å—Ç–≤—É."""
        
        messages = [{"role": "system", "content": system_prompt}]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –µ—Å–ª–∏ –µ—Å—Ç—å
        if context:
            messages.extend(context)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        messages.append({"role": "user", "content": message})
        
        return messages
    
    async def _handle_tool_calls(
        self, 
        tool_calls, 
        user_id: str
    ) -> ToolResponse:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–∑–æ–≤—ã –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
        # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π –≤—ã–∑–æ–≤
        tool_call = tool_calls[0]
        function_name = tool_call.function.name
        function_args = json.loads(tool_call.function.arguments)
        
        # –î–æ–±–∞–≤–ª—è–µ–º user_id –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if "user_id" not in function_args:
            function_args["user_id"] = user_id
        
        logger.info(f"üîß –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏: {function_name} —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: {function_args}")
        
        # –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è MCP –∫–æ–º–∞–Ω–¥
        if function_name == "execute_mcp_command":
            logger.info(f"üîå MCP –∫–æ–º–∞–Ω–¥–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞: {function_args.get('command')}")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é
        if function_name == "echo_tool":
            return await self._execute_echo_tool(EchoToolParams(**function_args))
        elif function_name == "execute_mcp_command":
            return await self._execute_mcp_command(MCPCommandParams(**function_args))
        elif function_name == "generate_image":
            return await self._execute_image_generation(ImageGenerationParams(**function_args))
        elif function_name == "analyze_youtube_video":
            return await self._execute_youtube_analysis(YouTubeAnalysisParams(**function_args))
        else:
            return ToolResponse(
                success=False,
                error=f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: {function_name}"
            )
    
    async def _execute_echo_tool(self, params: EchoToolParams) -> ToolResponse:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç echo –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)"""
        try:
            result = params.message
            if params.uppercase:
                result = result.upper()
            
            return ToolResponse(
                success=True,
                data={"echo": result, "original": params.message},
                metadata={"tool_type": ToolType.ECHO}
            )
        except Exception as e:
            return ToolResponse(success=False, error=str(e))
    
    async def _execute_mcp_command(self, params: MCPCommandParams) -> ToolResponse:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç MCP –∫–æ–º–∞–Ω–¥—É —á–µ—Ä–µ–∑ —Ä–µ–∞–ª—å–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç"""
        # –ü–æ–ª—É—á–∞–µ–º MCP tool –∏–∑ —Ä–µ–µ—Å—Ç—Ä–∞
        mcp_tool = self.tool_registry.get_tool("mcp_executor")
        
        if mcp_tool:
            logger.info(f"üîß –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ MCP –∫–æ–º–∞–Ω–¥—ã —á–µ—Ä–µ–∑ tool: {params.command}")
            result = await mcp_tool.execute(params)
            return result
        else:
            # Fallback –Ω–∞ –∑–∞–≥–ª—É—à–∫—É
            logger.warning("‚ö†Ô∏è MCP tool –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ä–µ–µ—Å—Ç—Ä–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É")
            return ToolResponse(
                success=True,
                data={
                    "message": f"MCP –∫–æ–º–∞–Ω–¥–∞ '{params.command}' –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∞",
                    "command": params.command,
                    "user": params.user_id
                },
                metadata={"tool_type": ToolType.MCP}
            )
    
    async def _execute_image_generation(self, params: ImageGenerationParams) -> ToolResponse:
        """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
        # TODO: –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å —Å DALL-E
        return ToolResponse(
            success=True,
            data={
                "message": f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ '{params.prompt}' –±—É–¥–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ",
                "style": params.style,
                "size": params.size
            },
            metadata={"tool_type": ToolType.IMAGE_GENERATOR}
        )
    
    async def _execute_youtube_analysis(self, params: YouTubeAnalysisParams) -> ToolResponse:
        """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ YouTube –≤–∏–¥–µ–æ"""
        # TODO: –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å —Å YouTube API
        return ToolResponse(
            success=True,
            data={
                "message": f"–ê–Ω–∞–ª–∏–∑ YouTube –≤–∏–¥–µ–æ {params.url} –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω",
                "video_url": params.url,
                "extract_subtitles": params.extract_subtitles
            },
            metadata={"tool_type": ToolType.YOUTUBE_ANALYZER}
        )
    
    async def _get_final_response(
        self,
        messages: List[Dict[str, str]],
        assistant_message,
        tool_response: ToolResponse
    ) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞"""
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ —Å tool_calls
        messages.append({
            "role": "assistant",
            "content": assistant_message.content or "",
            "tool_calls": assistant_message.tool_calls
        })
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏
        tool_call = assistant_message.tool_calls[0]
        messages.append({
            "role": "tool",
            "content": json.dumps(tool_response.dict(), ensure_ascii=False),
            "tool_call_id": tool_call.id
        })
        
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
        final_response = await self.client.chat.completions.create(
            model=self.model,
            messages=messages
        )
        
        return final_response.choices[0].message.content or "–û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞"
    
    def _get_available_tool_types(self, intent: Intent) -> List[ToolType]:
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –Ω–∞–º–µ—Ä–µ–Ω–∏—è"""
        # –ú–∞–ø–∏–Ω–≥ –Ω–∞–º–µ—Ä–µ–Ω–∏–π –Ω–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
        intent_to_tools = {
            Intent.MCP_COMMAND: [ToolType.MCP],
            Intent.IMAGE_GENERATION: [ToolType.IMAGE_GENERATOR],
            Intent.YOUTUBE_ANALYSIS: [ToolType.YOUTUBE_ANALYZER],
            Intent.GENERAL_QUESTION: [ToolType.ECHO],
            Intent.GENERAL_CHAT: [ToolType.ECHO],
            Intent.UNKNOWN: [ToolType.ECHO, ToolType.MCP]
        }
        
        return intent_to_tools.get(intent, [ToolType.ECHO])
    
    def _prepare_messages_with_preferences(
        self,
        message: str,
        context: Optional[List[Dict[str, str]]],
        intent: Intent,
        preferred_tool: Optional[tuple[ToolType, float]]
    ) -> List[Dict[str, str]]:
        """–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å —É—á–µ—Ç–æ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π"""
        system_prompt = """–¢—ã - —É–º–Ω—ã–π AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ —Ä–∞–∑–ª–∏—á–Ω—ã–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º.

–ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –∑–∞–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∏—Å–ø–æ–ª—å–∑—É–π –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã:
- –î–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ –æ–± –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–µ (–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, —Å–µ—Ä–≤–µ—Ä—ã) - –∏—Å–ø–æ–ª—å–∑—É–π execute_mcp_command
- –î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π - –∏—Å–ø–æ–ª—å–∑—É–π generate_image
- –î–ª—è –∞–Ω–∞–ª–∏–∑–∞ YouTube –≤–∏–¥–µ–æ - –∏—Å–ø–æ–ª—å–∑—É–π analyze_youtube_video
- –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è - –∏—Å–ø–æ–ª—å–∑—É–π echo_tool

–û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ —Å—É—â–µ—Å—Ç–≤—É."""
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è—Ö –µ—Å–ª–∏ –µ—Å—Ç—å
        if preferred_tool:
            tool_type, confidence = preferred_tool
            tool_hints = {
                ToolType.MCP: "execute_mcp_command",
                ToolType.IMAGE_GENERATOR: "generate_image",
                ToolType.YOUTUBE_ANALYZER: "analyze_youtube_video",
                ToolType.ECHO: "echo_tool"
            }
            
            if tool_type in tool_hints:
                system_prompt += f"\n\n–í–ê–ñ–ù–û: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å {tool_hints[tool_type]} –¥–ª—è –ø–æ–¥–æ–±–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.0%})."
        
        messages = [{"role": "system", "content": system_prompt}]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –µ—Å–ª–∏ –µ—Å—Ç—å
        if context:
            messages.extend(context)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        messages.append({"role": "user", "content": message})
        
        return messages
    
    def _get_tool_type_from_call(self, tool_call) -> Optional[ToolType]:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –ø–æ –≤—ã–∑–æ–≤—É —Ñ—É–Ω–∫—Ü–∏–∏"""
        function_name = tool_call.function.name
        
        # –ú–∞–ø–∏–Ω–≥ –∏–º–µ–Ω —Ñ—É–Ω–∫—Ü–∏–π –Ω–∞ —Ç–∏–ø—ã
        function_to_type = {
            "echo_tool": ToolType.ECHO,
            "execute_mcp_command": ToolType.MCP,
            "generate_image": ToolType.IMAGE_GENERATOR,
            "analyze_youtube_video": ToolType.YOUTUBE_ANALYZER
        }
        
        return function_to_type.get(function_name)