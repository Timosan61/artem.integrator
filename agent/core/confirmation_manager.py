"""
Confirmation Manager - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è–º–∏ –¥–µ–π—Å—Ç–≤–∏–π
"""
import asyncio
import logging
from typing import Dict, Optional, List, Any, Callable, TYPE_CHECKING
from datetime import datetime, timedelta
from enum import Enum
import uuid

from ..core.models import (
    ConversationState, 
    ConfirmationRequest,
    ToolType,
    BaseToolParams
)

if TYPE_CHECKING:
    from ..tools.base import BaseTool

logger = logging.getLogger(__name__)


class ConfirmationStatus(str, Enum):
    """–°—Ç–∞—Ç—É—Å—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
    PENDING = "pending"
    CONFIRMED = "confirmed"
    CANCELLED = "cancelled"
    EXPIRED = "expired"


class ConfirmationSession:
    """–°–µ—Å—Å–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
    
    def __init__(
        self,
        session_id: str,
        user_id: str,
        tool: 'BaseTool',
        params: BaseToolParams,
        expires_at: datetime,
        message: str
    ):
        self.session_id = session_id
        self.user_id = user_id
        self.tool = tool
        self.params = params
        self.expires_at = expires_at
        self.message = message
        self.status = ConfirmationStatus.PENDING
        self.created_at = datetime.now()
        self.responded_at: Optional[datetime] = None
        

class ConfirmationManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π –¥–ª—è –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π"""
    
    def __init__(self, default_timeout: int = 300):
        """
        Args:
            default_timeout: –¢–∞–π–º–∞—É—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 5 –º–∏–Ω—É—Ç)
        """
        self.default_timeout = default_timeout
        self._sessions: Dict[str, ConfirmationSession] = {}
        self._user_sessions: Dict[str, List[str]] = {}  # user_id -> [session_ids]
        
        # –û–±—Ä–∞—Ç–Ω—ã–µ –≤—ã–∑–æ–≤—ã –¥–ª—è UI
        self._on_confirmation_request: Optional[Callable] = None
        self._on_confirmation_response: Optional[Callable] = None
        
        logger.info(f"‚úÖ ConfirmationManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (—Ç–∞–π–º–∞—É—Ç: {default_timeout}—Å)")
    
    async def request_confirmation(
        self,
        user_id: str,
        tool: 'BaseTool',
        params: BaseToolParams,
        custom_message: Optional[str] = None,
        timeout: Optional[int] = None
    ) -> str:
        """
        –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            tool: –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            params: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
            custom_message: –ö–∞—Å—Ç–æ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            timeout: –¢–∞–π–º–∞—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            
        Returns:
            session_id –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
        """
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ID —Å–µ—Å—Å–∏–∏
        session_id = str(uuid.uuid4())
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∞–π–º–∞—É—Ç
        timeout = timeout or self.default_timeout
        expires_at = datetime.now() + timedelta(seconds=timeout)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        if custom_message:
            message = custom_message
        else:
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
            if hasattr(tool, 'get_confirmation_message'):
                message = tool.get_confirmation_message(params)
            else:
                message = self._generate_default_message(tool, params)
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é
        session = ConfirmationSession(
            session_id=session_id,
            user_id=user_id,
            tool=tool,
            params=params,
            expires_at=expires_at,
            message=message
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é
        self._sessions[session_id] = session
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ —Å–µ—Å—Å–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id not in self._user_sessions:
            self._user_sessions[user_id] = []
        self._user_sessions[user_id].append(session_id)
        
        # –í—ã–∑—ã–≤–∞–µ–º callback –µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
        if self._on_confirmation_request:
            await self._on_confirmation_request(session)
        
        logger.info(f"üîî –ó–∞–ø—Ä–æ—à–µ–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ {session_id} –¥–ª—è {tool.metadata.name}")
        
        return session_id
    
    async def handle_response(
        self,
        session_id: str,
        confirmed: bool,
        user_id: Optional[str] = None
    ) -> Optional[Any]:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        
        Args:
            session_id: ID —Å–µ—Å—Å–∏–∏
            confirmed: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ –∏–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏)
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –∏–ª–∏ None
        """
        # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é
        session = self._sessions.get(session_id)
        if not session:
            logger.warning(f"‚ùå –°–µ—Å—Å–∏—è {session_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return None
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id and session.user_id != user_id:
            logger.warning(f"‚ùå –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å–µ—Å—Å–∏–∏ {session_id}")
            return None
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
        if session.status != ConfirmationStatus.PENDING:
            logger.warning(f"‚ùå –°–µ—Å—Å–∏—è {session_id} —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞: {session.status}")
            return None
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–π–º–∞—É—Ç
        if datetime.now() > session.expires_at:
            session.status = ConfirmationStatus.EXPIRED
            logger.warning(f"‚è∞ –°–µ—Å—Å–∏—è {session_id} –∏—Å—Ç–µ–∫–ª–∞")
            return None
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        session.status = ConfirmationStatus.CONFIRMED if confirmed else ConfirmationStatus.CANCELLED
        session.responded_at = datetime.now()
        
        # –í—ã–∑—ã–≤–∞–µ–º callback
        if self._on_confirmation_response:
            await self._on_confirmation_response(session, confirmed)
        
        # –ï—Å–ª–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ - –≤—ã–ø–æ–ª–Ω—è–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
        if confirmed:
            logger.info(f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ {session_id} –ø—Ä–∏–Ω—è—Ç–æ, –≤—ã–ø–æ–ª–Ω—è–µ–º {session.tool.metadata.name}")
            try:
                result = await session.tool.execute(session.params)
                return result
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {e}")
                raise
        else:
            logger.info(f"‚ùå –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ {session_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ")
            return None
    
    def get_session(self, session_id: str) -> Optional[ConfirmationSession]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–µ—Å—Å–∏—é –ø–æ ID"""
        return self._sessions.get(session_id)
    
    def get_pending_sessions(self, user_id: str) -> List[ConfirmationSession]:
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –æ–∂–∏–¥–∞—é—â–∏–µ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if user_id not in self._user_sessions:
            return []
        
        sessions = []
        for session_id in self._user_sessions[user_id]:
            session = self._sessions.get(session_id)
            if session and session.status == ConfirmationStatus.PENDING:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–π–º–∞—É—Ç
                if datetime.now() > session.expires_at:
                    session.status = ConfirmationStatus.EXPIRED
                else:
                    sessions.append(session)
        
        return sessions
    
    def cancel_session(self, session_id: str) -> bool:
        """–û—Ç–º–µ–Ω—è–µ—Ç —Å–µ—Å—Å–∏—é"""
        session = self._sessions.get(session_id)
        if not session:
            return False
        
        if session.status == ConfirmationStatus.PENDING:
            session.status = ConfirmationStatus.CANCELLED
            session.responded_at = datetime.now()
            logger.info(f"üö´ –°–µ—Å—Å–∏—è {session_id} –æ—Ç–º–µ–Ω–µ–Ω–∞")
            return True
        
        return False
    
    def cleanup_expired(self) -> int:
        """–û—á–∏—â–∞–µ—Ç –∏—Å—Ç–µ–∫—à–∏–µ —Å–µ—Å—Å–∏–∏"""
        now = datetime.now()
        expired_count = 0
        
        for session_id, session in list(self._sessions.items()):
            if session.expires_at < now and session.status == ConfirmationStatus.PENDING:
                session.status = ConfirmationStatus.EXPIRED
                expired_count += 1
        
        if expired_count > 0:
            logger.info(f"üßπ –ü–æ–º–µ—á–µ–Ω–æ –∏—Å—Ç–µ–∫—à–∏–º–∏ {expired_count} —Å–µ—Å—Å–∏–π")
        
        return expired_count
    
    def set_confirmation_callback(
        self,
        on_request: Optional[Callable] = None,
        on_response: Optional[Callable] = None
    ):
        """
        –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ–±—Ä–∞—Ç–Ω—ã–µ –≤—ã–∑–æ–≤—ã –¥–ª—è UI
        
        Args:
            on_request: –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –Ω–æ–≤–æ–º –∑–∞–ø—Ä–æ—Å–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            on_response: –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞
        """
        if on_request:
            self._on_confirmation_request = on_request
        if on_response:
            self._on_confirmation_response = on_response
    
    def _generate_default_message(self, tool: 'BaseTool', params: BaseToolParams) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
        metadata = tool.metadata
        
        message = f"""
üîî **–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ**

**–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç**: {metadata.name}
**–û–ø–∏—Å–∞–Ω–∏–µ**: {metadata.description}

**–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–ø–µ—Ä–∞—Ü–∏–∏**:
"""
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        params_dict = params.dict()
        for key, value in params_dict.items():
            if key != 'user_id':  # –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º user_id
                message += f"‚Ä¢ **{key}**: {value}\n"
        
        message += f"\n‚è± **–û–∂–∏–¥–∞–µ–º–æ–µ –≤—Ä–µ–º—è**: {metadata.estimated_time}"
        
        if metadata.requires_confirmation:
            message += "\n\n‚ö†Ô∏è **–í–Ω–∏–º–∞–Ω–∏–µ**: –≠—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏—è —Ç—Ä–µ–±—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"
        
        message += "\n\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ?\n‚úÖ –î–∞ / ‚ùå –ù–µ—Ç"
        
        return message
    
    def format_confirmation_buttons(self, session_id: str) -> List[Dict[str, str]]:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∫–Ω–æ–ø–∫–∏ –¥–ª—è Telegram
        
        Returns:
            –°–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫ –¥–ª—è InlineKeyboardMarkup
        """
        return [
            {
                "text": "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
                "callback_data": f"confirm:{session_id}:yes"
            },
            {
                "text": "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", 
                "callback_data": f"confirm:{session_id}:no"
            }
        ]
    
    def get_session_stats(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å–µ—Å—Å–∏—è–º"""
        total = len(self._sessions)
        by_status = {}
        
        for session in self._sessions.values():
            status = session.status.value
            by_status[status] = by_status.get(status, 0) + 1
        
        # –°—Ä–µ–¥–Ω—è—è –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞
        response_times = []
        for session in self._sessions.values():
            if session.responded_at and session.status in [ConfirmationStatus.CONFIRMED, ConfirmationStatus.CANCELLED]:
                delta = (session.responded_at - session.created_at).total_seconds()
                response_times.append(delta)
        
        avg_response_time = sum(response_times) / len(response_times) if response_times else 0
        
        return {
            "total_sessions": total,
            "by_status": by_status,
            "active_users": len(self._user_sessions),
            "avg_response_time_seconds": avg_response_time
        }


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π
confirmation_manager = ConfirmationManager()