"""
Confirmation Formatter - —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
"""
from typing import Dict, List, Any, Optional
from datetime import datetime

from ..core.models import ToolType, BaseToolParams
from ..tools.base import BaseTool


class ConfirmationFormatter:
    """–§–æ—Ä–º–∞—Ç—Ç–µ—Ä –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫—Ä–∞—Å–∏–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
    
    # –≠–º–æ–¥–∑–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
    TOOL_EMOJIS = {
        ToolType.MCP: "üîß",
        ToolType.IMAGE_GENERATOR: "üé®",
        ToolType.VISION_ANALYZER: "üìπ",
        ToolType.ECHO: "üîä"
    }
    
    # –≠–º–æ–¥–∑–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ–ø–µ—Ä–∞—Ü–∏–π
    OPERATION_EMOJIS = {
        "create": "‚ûï",
        "update": "‚úèÔ∏è",
        "delete": "üóëÔ∏è",
        "list": "üìã",
        "analyze": "üîç",
        "generate": "‚ú®",
        "deploy": "üöÄ",
        "execute": "‚ö°"
    }
    
    @classmethod
    def format_confirmation_message(
        cls,
        tool: BaseTool,
        params: BaseToolParams,
        session_id: str,
        expires_at: datetime,
        custom_details: Optional[List[str]] = None
    ) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        
        Args:
            tool: –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            params: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
            session_id: ID —Å–µ—Å—Å–∏–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            expires_at: –í—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è
            custom_details: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏
            
        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        """
        metadata = tool.metadata
        tool_type = cls._get_tool_type(tool)
        tool_emoji = cls.TOOL_EMOJIS.get(tool_type, "üîß")
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        message = f"{tool_emoji} **–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏**\n\n"
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–µ
        message += f"**–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç**: {metadata.name}\n"
        message += f"**–û–ø–∏—Å–∞–Ω–∏–µ**: {metadata.description}\n\n"
        
        # –î–µ—Ç–∞–ª–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏
        message += "**–î–µ—Ç–∞–ª–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏**:\n"
        details = cls._format_operation_details(tool_type, params, custom_details)
        for detail in details:
            message += f"‚Ä¢ {detail}\n"
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã (–µ—Å–ª–∏ –µ—Å—Ç—å –≤–∞–∂–Ω—ã–µ)
        important_params = cls._get_important_params(tool_type, params)
        if important_params:
            message += "\n**–ü–∞—Ä–∞–º–µ—Ç—Ä—ã**:\n"
            for key, value in important_params.items():
                message += f"‚Ä¢ **{cls._humanize_param_name(key)}**: `{value}`\n"
        
        # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
        warnings = cls._get_warnings(tool_type, params)
        if warnings:
            message += "\n‚ö†Ô∏è **–í–Ω–∏–º–∞–Ω–∏–µ**:\n"
            for warning in warnings:
                message += f"‚Ä¢ {warning}\n"
        
        # –í—Ä–µ–º—è –∏ –∫–Ω–æ–ø–∫–∏
        message += f"\n‚è± **–û–∂–∏–¥–∞–µ–º–æ–µ –≤—Ä–µ–º—è**: {metadata.estimated_time}\n"
        
        # –í—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è
        time_left = (expires_at - datetime.now()).total_seconds()
        if time_left > 0:
            minutes = int(time_left / 60)
            seconds = int(time_left % 60)
            message += f"‚è∞ **–ò—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑**: {minutes}–º {seconds}—Å\n"
        
        message += "\n**–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ?**"
        
        return message
    
    @classmethod
    def format_clarification_message(
        cls,
        original_message: str,
        options: List[Dict[str, Any]],
        metadata: Optional[Dict[str, Any]] = None
    ) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –Ω–∞–º–µ—Ä–µ–Ω–∏—è
        
        Args:
            original_message: –ò—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            options: –í–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è –≤—ã–±–æ—Ä–∞
            metadata: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            
        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        """
        message = "ü§î **–£—Ç–æ—á–Ω–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å**\n\n"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        message += f"–í–∞—à –∑–∞–ø—Ä–æ—Å: *\"{original_message}\"*\n\n"
        
        # –ü—Ä–∏—á–∏–Ω–∞ —É—Ç–æ—á–Ω–µ–Ω–∏—è
        if metadata and metadata.get('reason'):
            message += f"üí° {metadata['reason']}\n\n"
        
        # –í–∞—Ä–∏–∞–Ω—Ç—ã
        message += "**–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã**:\n\n"
        
        for i, option in enumerate(options, 1):
            icon = option.get('icon', '‚Ä¢')
            name = option.get('name', '–í–∞—Ä–∏–∞–Ω—Ç')
            description = option.get('description', '')
            
            message += f"{i}. {icon} **{name}**\n"
            if description:
                message += f"   _{description}_\n"
            message += "\n"
        
        # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è
        message += "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç, –Ω–∞–∂–∞–≤ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É."
        
        return message
    
    @classmethod
    def format_success_message(
        cls,
        tool_type: ToolType,
        operation: str,
        result: Optional[Any] = None
    ) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏
        
        Args:
            tool_type: –¢–∏–ø –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
            operation: –ù–∞–∑–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
            result: –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            
        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        """
        tool_emoji = cls.TOOL_EMOJIS.get(tool_type, "‚úÖ")
        
        message = f"{tool_emoji} **–û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!**\n\n"
        message += f"**–û–ø–µ—Ä–∞—Ü–∏—è**: {operation}\n"
        
        if result:
            message += "\n**–†–µ–∑—É–ª—å—Ç–∞—Ç**:\n"
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
            if isinstance(result, dict):
                for key, value in result.items():
                    if key not in ['metadata', 'raw_response']:
                        message += f"‚Ä¢ **{cls._humanize_param_name(key)}**: {value}\n"
            elif isinstance(result, list):
                message += f"–ù–∞–π–¥–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {len(result)}\n"
            else:
                message += f"{result}\n"
        
        return message
    
    @classmethod
    def format_error_message(
        cls,
        tool_type: ToolType,
        operation: str,
        error: str,
        suggestions: Optional[List[str]] = None
    ) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        
        Args:
            tool_type: –¢–∏–ø –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
            operation: –ù–∞–∑–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
            error: –¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏
            suggestions: –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é
            
        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        """
        message = "‚ùå **–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏**\n\n"
        message += f"**–û–ø–µ—Ä–∞—Ü–∏—è**: {operation}\n"
        message += f"**–û—à–∏–±–∫–∞**: {error}\n"
        
        if suggestions:
            message += "\nüí° **–í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è**:\n"
            for suggestion in suggestions:
                message += f"‚Ä¢ {suggestion}\n"
        
        return message
    
    @classmethod
    def format_cancelled_message(cls, operation: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç–º–µ–Ω–µ –æ–ø–µ—Ä–∞—Ü–∏–∏"""
        return f"üö´ –û–ø–µ—Ä–∞—Ü–∏—è **{operation}** –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É."
    
    @classmethod
    def format_expired_message(cls, operation: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏"""
        return f"‚è∞ –í—Ä–µ–º—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏ **{operation}** –∏—Å—Ç–µ–∫–ª–æ."
    
    @classmethod
    def _get_tool_type(cls, tool: BaseTool) -> Optional[ToolType]:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞"""
        name = tool.metadata.name
        
        # –ú–∞–ø–∏–Ω–≥ –∏–º–µ–Ω –Ω–∞ —Ç–∏–ø—ã
        name_to_type = {
            "mcp_executor": ToolType.MCP,
            "image_generator": ToolType.IMAGE_GENERATOR,
            "vision_analyzer": ToolType.VISION_ANALYZER,
            "echo_tool": ToolType.ECHO
        }
        
        return name_to_type.get(name)
    
    @classmethod
    def _format_operation_details(
        cls,
        tool_type: ToolType,
        params: BaseToolParams,
        custom_details: Optional[List[str]] = None
    ) -> List[str]:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–µ—Ç–∞–ª–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞"""
        details = []
        
        if custom_details:
            return custom_details
        
        # –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞
        if tool_type == ToolType.MCP:
            if hasattr(params, 'command'):
                details.append(f"–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã: `{params.command}`")
            details.append("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π DigitalOcean")
            details.append("–í–æ–∑–º–æ–∂–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è—Ö –∏ –±–∞–∑–∞—Ö –¥–∞–Ω–Ω—ã—Ö")
            
        elif tool_type == ToolType.IMAGE_GENERATOR:
            if hasattr(params, 'prompt'):
                details.append(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é")
            if hasattr(params, 'style'):
                details.append(f"–°—Ç–∏–ª—å: {params.style}")
            details.append("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ DALL-E API")
            
        elif tool_type == ToolType.VISION_ANALYZER:
            if hasattr(params, 'url'):
                details.append(f"–ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø–æ —Å—Å—ã–ª–∫–µ")
            if hasattr(params, 'analysis_type'):
                details.append(f"–¢–∏–ø –∞–Ω–∞–ª–∏–∑–∞: {params.analysis_type}")
            details.append("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ Vision API")
        
        return details
    
    @classmethod
    def _get_important_params(
        cls,
        tool_type: ToolType,
        params: BaseToolParams
    ) -> Dict[str, Any]:
        """–í—ã–±–∏—Ä–∞–µ—Ç –≤–∞–∂–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        params_dict = params.dict()
        important = {}
        
        # –£–±–∏—Ä–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ –ø–æ–ª—è
        skip_fields = {'user_id', 'metadata', 'raw_data'}
        
        # –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞
        if tool_type == ToolType.MCP:
            important_fields = {'command', 'filters', 'app_id', 'database_name'}
        elif tool_type == ToolType.IMAGE_GENERATOR:
            important_fields = {'prompt', 'size', 'quality', 'style'}
        elif tool_type == ToolType.VISION_ANALYZER:
            important_fields = {'url', 'analysis_type', 'frame_interval'}
        else:
            important_fields = set()
        
        for key, value in params_dict.items():
            if key not in skip_fields and (not important_fields or key in important_fields):
                if value is not None:  # –¢–æ–ª—å–∫–æ –Ω–µ–ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                    important[key] = value
        
        return important
    
    @classmethod
    def _get_warnings(
        cls,
        tool_type: ToolType,
        params: BaseToolParams
    ) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏"""
        warnings = []
        
        if tool_type == ToolType.MCP:
            warnings.append("–≠—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏—è –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–∞—à–µ–π –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã")
            if hasattr(params, 'command') and 'delete' in params.command.lower():
                warnings.append("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –û–ø–µ—Ä–∞—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ–æ–±—Ä–∞—Ç–∏–º–∞!")
                
        elif tool_type == ToolType.IMAGE_GENERATOR:
            warnings.append("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ—Ç—Ä–µ–±—É–µ—Ç API credits")
            
        elif tool_type == ToolType.VISION_ANALYZER:
            if hasattr(params, 'url') and 'video' in str(params.url):
                warnings.append("–ê–Ω–∞–ª–∏–∑ –≤–∏–¥–µ–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç")
        
        return warnings
    
    @classmethod
    def _humanize_param_name(cls, param_name: str) -> str:
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –≤ —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥"""
        # –ó–∞–º–µ–Ω—ã –¥–ª—è —á–∞—Å—Ç—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        replacements = {
            'url': 'URL',
            'prompt': '–û–ø–∏—Å–∞–Ω–∏–µ',
            'command': '–ö–æ–º–∞–Ω–¥–∞',
            'size': '–†–∞–∑–º–µ—Ä',
            'quality': '–ö–∞—á–µ—Å—Ç–≤–æ',
            'style': '–°—Ç–∏–ª—å',
            'analysis_type': '–¢–∏–ø –∞–Ω–∞–ª–∏–∑–∞',
            'frame_interval': '–ò–Ω—Ç–µ—Ä–≤–∞–ª –∫–∞–¥—Ä–æ–≤',
            'app_id': 'ID –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è',
            'database_name': '–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö'
        }
        
        if param_name in replacements:
            return replacements[param_name]
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º snake_case –≤ Title Case
        return param_name.replace('_', ' ').title()