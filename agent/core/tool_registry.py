"""
–†–µ–µ—Å—Ç—Ä –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
"""
import logging
from typing import Dict, List, Any, Optional, Type, TYPE_CHECKING
from pathlib import Path
import importlib
import inspect
import yaml

from ..core.models import ToolResponse

if TYPE_CHECKING:
    from ..tools.base import BaseTool

logger = logging.getLogger(__name__)


class ToolRegistry:
    """–†–µ–µ—Å—Ç—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏"""
    
    def __init__(self):
        self._tools: Dict[str, 'BaseTool'] = {}
        self._enabled_tools: Dict[str, bool] = {}
        logger.info("üìö ToolRegistry –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def register_tool(self, tool: 'BaseTool', enabled: bool = True) -> None:
        """
        –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
        
        Args:
            tool: –≠–∫–∑–µ–º–ø–ª—è—Ä –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
            enabled: –í–∫–ª—é—á–µ–Ω –ª–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
        """
        tool_name = tool.metadata.name
        
        if tool_name in self._tools:
            logger.warning(f"‚ö†Ô∏è –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç {tool_name} —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º")
        
        self._tools[tool_name] = tool
        self._enabled_tools[tool_name] = enabled
        
        status = "–≤–∫–ª—é—á–µ–Ω" if enabled else "–æ—Ç–∫–ª—é—á–µ–Ω"
        logger.info(f"‚úÖ –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç '{tool_name}' –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∏ {status}")
    
    def unregister_tool(self, tool_name: str) -> bool:
        """
        –£–¥–∞–ª—è–µ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –∏–∑ —Ä–µ–µ—Å—Ç—Ä–∞
        
        Args:
            tool_name: –ò–º—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
            
        Returns:
            True –µ—Å–ª–∏ —É–¥–∞–ª–µ–Ω, False –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω
        """
        if tool_name in self._tools:
            del self._tools[tool_name]
            del self._enabled_tools[tool_name]
            logger.info(f"üóë –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç '{tool_name}' —É–¥–∞–ª–µ–Ω –∏–∑ —Ä–µ–µ—Å—Ç—Ä–∞")
            return True
        return False
    
    def get_tool(self, tool_name: str) -> Optional['BaseTool']:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –ø–æ –∏–º–µ–Ω–∏
        
        Args:
            tool_name: –ò–º—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
            
        Returns:
            –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –∏–ª–∏ None
        """
        return self._tools.get(tool_name)
    
    def is_enabled(self, tool_name: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –≤–∫–ª—é—á–µ–Ω –ª–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç"""
        return self._enabled_tools.get(tool_name, False)
    
    def enable_tool(self, tool_name: str) -> bool:
        """–í–∫–ª—é—á–∞–µ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç"""
        if tool_name in self._tools:
            self._enabled_tools[tool_name] = True
            logger.info(f"‚úÖ –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç '{tool_name}' –≤–∫–ª—é—á–µ–Ω")
            return True
        return False
    
    def disable_tool(self, tool_name: str) -> bool:
        """–û—Ç–∫–ª—é—á–∞–µ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç"""
        if tool_name in self._tools:
            self._enabled_tools[tool_name] = False
            logger.info(f"üö´ –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç '{tool_name}' –æ—Ç–∫–ª—é—á–µ–Ω")
            return True
        return False
    
    def get_all_tools(self, only_enabled: bool = False) -> Dict[str, 'BaseTool']:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
        
        Args:
            only_enabled: –¢–æ–ª—å–∫–æ –≤–∫–ª—é—á–µ–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        """
        if only_enabled:
            return {
                name: tool 
                for name, tool in self._tools.items() 
                if self._enabled_tools.get(name, False)
            }
        return self._tools.copy()
    
    def get_openai_schemas(self, only_enabled: bool = True) -> List[Dict[str, Any]]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ö–µ–º—ã –≤—Å–µ—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è OpenAI
        
        Args:
            only_enabled: –¢–æ–ª—å–∫–æ –≤–∫–ª—é—á–µ–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
            
        Returns:
            –°–ø–∏—Å–æ–∫ —Å—Ö–µ–º —Ñ—É–Ω–∫—Ü–∏–π
        """
        schemas = []
        tools = self.get_all_tools(only_enabled=only_enabled)
        
        for tool_name, tool in tools.items():
            try:
                schema = tool.get_openai_schema()
                schemas.append(schema)
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ö–µ–º—ã –¥–ª—è {tool_name}: {e}")
        
        return schemas
    
    async def execute_tool(
        self, 
        tool_name: str, 
        params: Dict[str, Any]
    ) -> ToolResponse:
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
        
        Args:
            tool_name: –ò–º—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
            params: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            
        Returns:
            ToolResponse —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
        tool = self.get_tool(tool_name)
        if not tool:
            return ToolResponse(
                success=False,
                error=f"–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç '{tool_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω"
            )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω –ª–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
        if not self.is_enabled(tool_name):
            return ToolResponse(
                success=False,
                error=f"–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç '{tool_name}' –æ—Ç–∫–ª—é—á–µ–Ω"
            )
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
        return await tool.execute_with_validation(params)
    
    def load_tools_from_config(self, config_path: str) -> int:
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        
        Args:
            config_path: –ü—É—Ç—å –∫ YAML –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            
        Returns:
            –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        """
        try:
            with open(config_path, 'r', encoding='utf-8') as f:
                config = yaml.safe_load(f)
            
            tools_config = config.get('tools', [])
            loaded_count = 0
            
            for tool_config in tools_config:
                if not tool_config.get('enabled', True):
                    continue
                
                tool_name = tool_config['name']
                try:
                    # –ü—ã—Ç–∞–µ–º—Å—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∏ —Å–æ–∑–¥–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
                    tool_class = self._import_tool_class(tool_name)
                    if tool_class:
                        tool_instance = tool_class()
                        self.register_tool(tool_instance, enabled=True)
                        loaded_count += 1
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ {tool_name}: {e}")
            
            logger.info(f"üì¶ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {loaded_count} –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            return loaded_count
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: {e}")
            return 0
    
    def _import_tool_class(self, tool_name: str) -> Optional[Type['BaseTool']]:
        """
        –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –∫–ª–∞—Å—Å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –ø–æ –∏–º–µ–Ω–∏
        
        Args:
            tool_name: –ò–º—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
            
        Returns:
            –ö–ª–∞—Å—Å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –∏–ª–∏ None
        """
        # –ú–∞–ø–∏–Ω–≥ –∏–º–µ–Ω –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –Ω–∞ –º–æ–¥—É–ª–∏
        tool_modules = {
            "echo_tool": "agent.tools.echo_tool.EchoTool",
            "mcp_executor": "agent.tools.mcp_tool.MCPTool",
            "youtube_analyzer": "agent.tools.youtube_tool.YouTubeAnalyzerTool"
        }
        
        if tool_name not in tool_modules:
            logger.warning(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: {tool_name}")
            return None
        
        module_path = tool_modules[tool_name]
        module_name, class_name = module_path.rsplit('.', 1)
        
        try:
            module = importlib.import_module(module_name)
            tool_class = getattr(module, class_name)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ø–æ–¥–∫–ª–∞—Å—Å BaseTool
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º BaseTool –ª–æ–∫–∞–ª—å–Ω–æ —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞
            from ..tools.base import BaseTool as BaseToolClass
            if not issubclass(tool_class, BaseToolClass):
                logger.error(f"‚ùå {class_name} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø–æ–¥–∫–ª–∞—Å—Å–æ–º BaseTool")
                return None
            
            return tool_class
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ {module_path}: {e}")
            return None
    
    def get_registry_info(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–µ—Å—Ç—Ä–µ"""
        return {
            "total_tools": len(self._tools),
            "enabled_tools": sum(1 for enabled in self._enabled_tools.values() if enabled),
            "tools": [
                {
                    "name": tool.metadata.name,
                    "description": tool.metadata.description,
                    "version": tool.metadata.version,
                    "enabled": self._enabled_tools.get(tool.metadata.name, False),
                    "requires_confirmation": tool.metadata.requires_confirmation
                }
                for tool in self._tools.values()
            ]
        }


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Ä–µ–µ—Å—Ç—Ä–∞
tool_registry = ToolRegistry()