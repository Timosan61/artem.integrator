"""
Preference Manager - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –∞–≥–µ–Ω—Ç–∞
"""
import logging
import json
from typing import Dict, List, Optional, Any, Tuple
from datetime import datetime, timedelta
from pathlib import Path
import asyncio
from collections import defaultdict

from ..core.models import ToolType, UserPreference
from .intents import Intent

logger = logging.getLogger(__name__)


class PreferencePattern:
    """–ü–∞—Ç—Ç–µ—Ä–Ω –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    
    def __init__(
        self,
        user_id: str,
        intent: Intent,
        tool_type: ToolType,
        confidence_threshold: float = 0.8
    ):
        self.user_id = user_id
        self.intent = intent
        self.tool_type = tool_type
        self.confidence_threshold = confidence_threshold
        self.usage_count = 0
        self.success_count = 0
        self.last_used = datetime.now()
        self.created_at = datetime.now()
        
        # –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
        self.examples: List[Dict[str, Any]] = []
    
    def add_usage(self, success: bool, message: str, tool_params: Optional[Dict] = None):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω–∞"""
        self.usage_count += 1
        if success:
            self.success_count += 1
        self.last_used = datetime.now()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏–º–µ—Ä
        self.examples.append({
            "message": message,
            "success": success,
            "tool_params": tool_params,
            "timestamp": datetime.now().isoformat()
        })
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–º–µ—Ä–æ–≤
        if len(self.examples) > 10:
            self.examples = self.examples[-10:]
    
    @property
    def success_rate(self) -> float:
        """–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω—ã—Ö –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π"""
        if self.usage_count == 0:
            return 0.0
        return self.success_count / self.usage_count
    
    def to_dict(self) -> Dict[str, Any]:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –≤ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è"""
        return {
            "user_id": self.user_id,
            "intent": self.intent.value,
            "tool_type": self.tool_type.value,
            "confidence_threshold": self.confidence_threshold,
            "usage_count": self.usage_count,
            "success_count": self.success_count,
            "last_used": self.last_used.isoformat(),
            "created_at": self.created_at.isoformat(),
            "examples": self.examples
        }
    
    @classmethod
    def from_dict(cls, data: Dict[str, Any]) -> 'PreferencePattern':
        """–°–æ–∑–¥–∞–µ—Ç –∏–∑ —Å–ª–æ–≤–∞—Ä—è"""
        pattern = cls(
            user_id=data["user_id"],
            intent=Intent(data["intent"]),
            tool_type=ToolType(data["tool_type"]),
            confidence_threshold=data.get("confidence_threshold", 0.8)
        )
        pattern.usage_count = data.get("usage_count", 0)
        pattern.success_count = data.get("success_count", 0)
        pattern.last_used = datetime.fromisoformat(data["last_used"])
        pattern.created_at = datetime.fromisoformat(data["created_at"])
        pattern.examples = data.get("examples", [])
        return pattern


class PreferenceManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    
    def __init__(self, storage_path: Optional[str] = None):
        self.storage_path = Path(storage_path or "agent/data/user_preferences.json")
        self.preferences: Dict[str, Dict[str, PreferencePattern]] = {}
        self.learning_threshold = 3  # –ú–∏–Ω–∏–º—É–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
        self.preference_ttl_days = 30  # –°—Ä–æ–∫ –∂–∏–∑–Ω–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è
        self._load_preferences()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        self.stats = defaultdict(lambda: defaultdict(int))
        
        logger.info("üß† PreferenceManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def _load_preferences(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞"""
        if self.storage_path.exists():
            try:
                with open(self.storage_path, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                
                for user_id, user_prefs in data.items():
                    self.preferences[user_id] = {}
                    for key, pref_data in user_prefs.items():
                        pattern = PreferencePattern.from_dict(pref_data)
                        self.preferences[user_id][key] = pattern
                
                logger.info(f"üìö –ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π: {sum(len(p) for p in self.preferences.values())}")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π: {e}")
    
    def _save_preferences(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –≤ —Ñ–∞–π–ª"""
        try:
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            self.storage_path.parent.mkdir(parents=True, exist_ok=True)
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å–æ—Ö—Ä–∞–Ω—è–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç
            data = {}
            for user_id, user_prefs in self.preferences.items():
                data[user_id] = {}
                for key, pattern in user_prefs.items():
                    data[user_id][key] = pattern.to_dict()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º
            with open(self.storage_path, 'w', encoding='utf-8') as f:
                json.dump(data, f, ensure_ascii=False, indent=2)
            
            logger.debug("üíæ –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π: {e}")
    
    def record_choice(
        self,
        user_id: str,
        message: str,
        intent: Intent,
        tool_type: ToolType,
        success: bool,
        tool_params: Optional[Dict] = None
    ):
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        # –°–æ–∑–¥–∞–µ–º –∫–ª—é—á –¥–ª—è –ø–∞—Ç—Ç–µ—Ä–Ω–∞
        pattern_key = f"{intent.value}:{tool_type.value}"
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if user_id not in self.preferences:
            self.preferences[user_id] = {}
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω
        if pattern_key not in self.preferences[user_id]:
            self.preferences[user_id][pattern_key] = PreferencePattern(
                user_id=user_id,
                intent=intent,
                tool_type=tool_type
            )
        
        pattern = self.preferences[user_id][pattern_key]
        pattern.add_usage(success, message, tool_params)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self.stats[user_id]["total_choices"] += 1
        if success:
            self.stats[user_id]["successful_choices"] += 1
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –µ—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ø–æ—Ä–æ–≥ –æ–±—É—á–µ–Ω–∏—è
        if pattern.usage_count % self.learning_threshold == 0:
            self._save_preferences()
            logger.info(f"üéØ –û–±–Ω–æ–≤–ª–µ–Ω–æ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ {pattern_key} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    def get_preferred_tool(
        self,
        user_id: str,
        intent: Intent,
        available_tools: List[ToolType]
    ) -> Optional[Tuple[ToolType, float]]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –Ω–∞–º–µ—Ä–µ–Ω–∏—è
        
        Returns:
            Tuple[ToolType, confidence] –∏–ª–∏ None
        """
        if user_id not in self.preferences:
            return None
        
        best_tool = None
        best_score = 0.0
        
        for tool_type in available_tools:
            pattern_key = f"{intent.value}:{tool_type.value}"
            
            if pattern_key in self.preferences[user_id]:
                pattern = self.preferences[user_id][pattern_key]
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å
                if self._is_pattern_valid(pattern):
                    # –í—ã—á–∏—Å–ª—è–µ–º score –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π –∏ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏
                    score = self._calculate_pattern_score(pattern)
                    
                    if score > best_score and score >= pattern.confidence_threshold:
                        best_tool = tool_type
                        best_score = score
        
        if best_tool:
            logger.debug(f"üéØ –ù–∞–π–¥–µ–Ω–æ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ –¥–ª—è {user_id}: {intent.value} -> {best_tool.value} (score: {best_score:.2f})")
            return (best_tool, best_score)
        
        return None
    
    def _is_pattern_valid(self, pattern: PreferencePattern) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –ø–∞—Ç—Ç–µ—Ä–Ω–∞"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º TTL
        age_days = (datetime.now() - pattern.last_used).days
        if age_days > self.preference_ttl_days:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π
        if pattern.usage_count < self.learning_threshold:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å
        if pattern.success_rate < 0.5:  # –ú–∏–Ω–∏–º—É–º 50% —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏
            return False
        
        return True
    
    def _calculate_pattern_score(self, pattern: PreferencePattern) -> float:
        """–í—ã—á–∏—Å–ª—è–µ—Ç score –ø–∞—Ç—Ç–µ—Ä–Ω–∞"""
        # –ë–∞–∑–æ–≤—ã–π score - –ø—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏
        base_score = pattern.success_rate
        
        # –ë–æ–Ω—É—Å –∑–∞ —á–∞—Å—Ç–æ—Ç—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        usage_bonus = min(pattern.usage_count / 20, 0.2)  # –ú–∞–∫—Å–∏–º—É–º +0.2
        
        # –®—Ç—Ä–∞—Ñ –∑–∞ –¥–∞–≤–Ω–æ—Å—Ç—å
        age_days = (datetime.now() - pattern.last_used).days
        age_penalty = age_days / self.preference_ttl_days * 0.3  # –ú–∞–∫—Å–∏–º—É–º -0.3
        
        return min(base_score + usage_bonus - age_penalty, 1.0)
    
    def get_user_statistics(self, user_id: str) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if user_id not in self.preferences:
            return {
                "total_patterns": 0,
                "total_choices": 0,
                "successful_choices": 0,
                "success_rate": 0.0,
                "favorite_tools": []
            }
        
        # –°—á–∏—Ç–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        patterns = self.preferences[user_id]
        total_usage = sum(p.usage_count for p in patterns.values())
        total_success = sum(p.success_count for p in patterns.values())
        
        # –ù–∞—Ö–æ–¥–∏–º –ª—é–±–∏–º—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
        tool_usage = defaultdict(int)
        for pattern in patterns.values():
            tool_usage[pattern.tool_type.value] += pattern.usage_count
        
        favorite_tools = sorted(
            tool_usage.items(),
            key=lambda x: x[1],
            reverse=True
        )[:3]
        
        return {
            "total_patterns": len(patterns),
            "total_choices": self.stats[user_id]["total_choices"],
            "successful_choices": self.stats[user_id]["successful_choices"],
            "success_rate": total_success / total_usage if total_usage > 0 else 0.0,
            "favorite_tools": favorite_tools,
            "active_patterns": sum(1 for p in patterns.values() if self._is_pattern_valid(p))
        }
    
    def cleanup_old_preferences(self):
        """–û—á–∏—â–∞–µ—Ç —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è"""
        cleaned = 0
        
        for user_id in list(self.preferences.keys()):
            user_prefs = self.preferences[user_id]
            
            # –£–¥–∞–ª—è–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
            for key in list(user_prefs.keys()):
                pattern = user_prefs[key]
                if not self._is_pattern_valid(pattern):
                    del user_prefs[key]
                    cleaned += 1
            
            # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –Ω–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
            if not user_prefs:
                del self.preferences[user_id]
        
        if cleaned > 0:
            self._save_preferences()
            logger.info(f"üßπ –û—á–∏—â–µ–Ω–æ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π: {cleaned}")
    
    def export_learning_data(self) -> List[Dict[str, Any]]:
        """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏"""
        learning_data = []
        
        for user_id, patterns in self.preferences.items():
            for pattern in patterns.values():
                if self._is_pattern_valid(pattern) and pattern.examples:
                    for example in pattern.examples:
                        if example["success"]:  # –¢–æ–ª—å–∫–æ —É—Å–ø–µ—à–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã
                            learning_data.append({
                                "message": example["message"],
                                "intent": pattern.intent.value,
                                "tool_type": pattern.tool_type.value,
                                "confidence": pattern.success_rate,
                                "user_id": user_id
                            })
        
        return learning_data


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π
preference_manager = PreferenceManager()